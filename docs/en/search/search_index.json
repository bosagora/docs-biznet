{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"biznet/consensus/","text":"Consensus Engine We target to design the consensus engine of BizNet to achieve the following goals: Wait a few blocks to confirm. Blocking time should be the same as Ethereum network. No inflation, the block reward is transaction gas fees. It is compatible with Ethereum.","title":"Consensus Engine"},{"location":"biznet/consensus/#consensus-engine","text":"We target to design the consensus engine of BizNet to achieve the following goals: Wait a few blocks to confirm. Blocking time should be the same as Ethereum network. No inflation, the block reward is transaction gas fees. It is compatible with Ethereum.","title":"Consensus Engine"},{"location":"biznet/introduction/","text":"Introduction of BizNet Currently, smart contracts are essential for implementing NFT and DeFi, and they have a lot of influence on cryptocurrency as a whole. In response to these market demands, we plan to prepare BizNet, a blockchain network that supports smart contracts that existing developers can easily adapt without learning obstacles. BizNet's White Paper","title":"Introduction"},{"location":"biznet/introduction/#introduction-of-biznet","text":"Currently, smart contracts are essential for implementing NFT and DeFi, and they have a lot of influence on cryptocurrency as a whole. In response to these market demands, we plan to prepare BizNet, a blockchain network that supports smart contracts that existing developers can easily adapt without learning obstacles. BizNet's White Paper","title":"Introduction of BizNet"},{"location":"biznet/develop/explorers/","text":"BizNet Explorers BizNet explorers is a graphic user interface designed to allow users to interact with the blockchain. Through this interface, a user can browse information about blocks that have been added to the blockchain, transactions that have occurred on the blockchain, wallet balances, and information about BOA. BizNet provides explorers for both its mainnet and testnet. Explorers for Mainnet BOASCAN - https://scan.bosagora.org/ Explorers for Testnet BOASCAN - https://testnet-scan.bosagora.org/","title":"BizNet Explorers"},{"location":"biznet/develop/explorers/#biznet-explorers","text":"BizNet explorers is a graphic user interface designed to allow users to interact with the blockchain. Through this interface, a user can browse information about blocks that have been added to the blockchain, transactions that have occurred on the blockchain, wallet balances, and information about BOA. BizNet provides explorers for both its mainnet and testnet.","title":"BizNet Explorers"},{"location":"biznet/develop/explorers/#explorers-for-mainnet","text":"BOASCAN - https://scan.bosagora.org/","title":"Explorers for Mainnet"},{"location":"biznet/develop/explorers/#explorers-for-testnet","text":"BOASCAN - https://testnet-scan.bosagora.org/","title":"Explorers for Testnet"},{"location":"biznet/develop/mainnet/","text":"BizNet MainNet How to Access BizNet There are multiple ways to access the BizNet mainnet. One possible method is to join the mainnet as an observer node . You can also use the RPC endpoints specified here to connect to the mainnet. RPC endpoints may be used to interact with a node directly over HTTP or websockets. Using RPC, you may perform low-level operations like executing ABCI queries, viewing network/consensus state or broadcasting a transaction. RPC endpoints are also used with web wallets like MetaMask to connect to the BizNet mainnet. How to Build on BizNet You can build deploy smart contracts , NFTs , ERC20 Tokens on the BizNet.","title":"BizNet MainNet"},{"location":"biznet/develop/mainnet/#biznet-mainnet","text":"","title":"BizNet MainNet"},{"location":"biznet/develop/mainnet/#how-to-access-biznet","text":"There are multiple ways to access the BizNet mainnet. One possible method is to join the mainnet as an observer node . You can also use the RPC endpoints specified here to connect to the mainnet. RPC endpoints may be used to interact with a node directly over HTTP or websockets. Using RPC, you may perform low-level operations like executing ABCI queries, viewing network/consensus state or broadcasting a transaction. RPC endpoints are also used with web wallets like MetaMask to connect to the BizNet mainnet.","title":"How to Access BizNet"},{"location":"biznet/develop/mainnet/#how-to-build-on-biznet","text":"You can build deploy smart contracts , NFTs , ERC20 Tokens on the BizNet.","title":"How to Build on BizNet"},{"location":"biznet/develop/rpc/","text":"JSON-RPC Endpoint Available Resources BizNet Mainnet (ChainID 0x867, 2151 in decimal) RPC Endpoints: https://mainnet.bosagora.org BizNet Testnet (ChainID 0x7E3, 2019 in decimal) RPC Endpoints: https://testnet.bosagora.org JSON-RPC methods Please refer to this JSON-RPC Specification .","title":"BizNet RPC"},{"location":"biznet/develop/rpc/#json-rpc-endpoint","text":"","title":"JSON-RPC Endpoint"},{"location":"biznet/develop/rpc/#available-resources","text":"","title":"Available Resources"},{"location":"biznet/develop/rpc/#biznet-mainnet-chainid-0x867-2151-in-decimal","text":"RPC Endpoints: https://mainnet.bosagora.org","title":"BizNet Mainnet (ChainID 0x867, 2151 in decimal)"},{"location":"biznet/develop/rpc/#biznet-testnet-chainid-0x7e3-2019-in-decimal","text":"RPC Endpoints: https://testnet.bosagora.org","title":"BizNet Testnet (ChainID 0x7E3, 2019 in decimal)"},{"location":"biznet/develop/rpc/#json-rpc-methods","text":"Please refer to this JSON-RPC Specification .","title":"JSON-RPC methods"},{"location":"biznet/develop/testnet/","text":"BizNet TestNet What is a Testnet? The testnet is a test environment for BizNet network, which is open to developers. The nodes on the testnet are from the development team. What is the Testnet good for? Create your test address and get your testnet funds. Develop applications and try tutorials on BizNet without the potential to lose your own assets. Test your applications against new versions of BizNet. Analyze blockchain data on a smaller, non-trivial data set compared to the public network. How to get Testnet Fund? The testnet faucet for BizNet Chain can be accessed https://faucet.bosagora.org/request/boa/:address. Steps to claim testnet BOA: Create a new Wallet of BizNet testnet with MetaMask Get Testnet Fund: https://faucet.bosagora.org/request/boa/:address Explorers for Testnet * BOASCAN - https://testnet-scan.bosagora.org/","title":"BizNet TestNet"},{"location":"biznet/develop/testnet/#biznet-testnet","text":"","title":"BizNet TestNet"},{"location":"biznet/develop/testnet/#what-is-a-testnet","text":"The testnet is a test environment for BizNet network, which is open to developers. The nodes on the testnet are from the development team.","title":"What is a Testnet?"},{"location":"biznet/develop/testnet/#what-is-the-testnet-good-for","text":"Create your test address and get your testnet funds. Develop applications and try tutorials on BizNet without the potential to lose your own assets. Test your applications against new versions of BizNet. Analyze blockchain data on a smaller, non-trivial data set compared to the public network.","title":"What is the Testnet good for?"},{"location":"biznet/develop/testnet/#how-to-get-testnet-fund","text":"The testnet faucet for BizNet Chain can be accessed https://faucet.bosagora.org/request/boa/:address. Steps to claim testnet BOA: Create a new Wallet of BizNet testnet with MetaMask Get Testnet Fund: https://faucet.bosagora.org/request/boa/:address","title":"How to get Testnet Fund?"},{"location":"biznet/develop/testnet/#explorers-for-testnet","text":"* BOASCAN - https://testnet-scan.bosagora.org/","title":"Explorers for Testnet"},{"location":"biznet/develop/deploy_smart_contract/hardhat/","text":"Using Hardhat What is Hardhat Hardhat is a development environment to compile, deploy, test, and debug your smart contract. Setting up the development environment There are a few technical requirements before we start. Please install the following: Requirements: Installing There are a few technical requirements before we start. Please install the following: Requirements: Windows, Linux or Mac OS X Node.js v8.9.4 LTS or later Git First, you need to create an empty project npm init --yes Once your project is ready, you should run npm install --save-dev hardhat It's recommeded to install some dependencies. npm install --save-dev @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers To use your local installation of Hardhat, you need to use npx to run it (i.e. npx hardhat ). Create A Project To create your Hardhat project run npx hardhat in your project folder: mkdir MegaCoin cd MegaCoin Intialize your project: $ npx hardhat 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 8888888888 8888b. 888d888 .d88888 88888b. 8888b. 888888 888 888 \"88b 888P\" d88\" 888 888 \"88b \"88b 888 888 888 .d888888 888 888 888 888 888 .d888888 888 888 888 888 888 888 Y88b 888 888 888 888 888 Y88b. 888 888 \"Y888888 888 \"Y88888 888 888 \"Y888888 \"Y888 Welcome to Hardhat v2.0.8 ? What do you want to do? \u2026 \u276f Create a sample project Create an empty hardhat.config.js Quit Once this project is initialized, you'll now have a project structure with the following items: contracts/: Directory for Solidity contracts scripts/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts hardhat-config.js: Hardhat configuration file Create Contract You can write your own smart contract or download the ERC20 token smart contract template . Config Hardhat for BizNet Go to hardhat.config.js Update the config require(\"@nomiclabs/hardhat-waffle\"); require('@nomiclabs/hardhat-ethers'); const { mnemonic } = require('./secrets.json'); // This is a sample Hardhat task. To learn how to create your own go to // https://hardhat.org/guides/create-task.html task(\"accounts\", \"Prints the list of accounts\", async () => { const accounts = await ethers.getSigners(); for (const account of accounts) { console.log(account.address); } }); // You need to export an object to set up your config // Go to https://hardhat.org/config/ to learn more /** * @type import('hardhat/config').HardhatUserConfig */ module.exports = { defaultNetwork: \"mainnet\", networks: { localhost: { url: \"http://127.0.0.1:8545\" }, hardhat: { }, testnet: { url: \"https://testnet.bosagora.org/\", chainId: 2019, gasPrice: 20000000000, accounts: {mnemonic: mnemonic} }, mainnet: { url: \"https://mainnet.bosagora.org/\", chainId: 2152, gasPrice: 20000000000, accounts: {mnemonic: mnemonic} } }, solidity: { version: \"0.5.16\", settings: { optimizer: { enabled: true } } }, paths: { sources: \"./contracts\", tests: \"./test\", cache: \"./cache\", artifacts: \"./artifacts\" }, mocha: { timeout: 20000 } }; Note It requires mnemonic to be passed in for Provider, this is the seed phrase for the account you'd like to deploy from. Create a new .secret file in root directory and enter your 12 word mnemonic seed phrase to get started. To get the seedwords from metamask wallet you can go to Metamask Settings, then from the menu choose Security and Privacy where you will see a button that says reveal seed words. Compile Contract To compile a Hardhat project, change to the root of the directory where the project is located and then type the following into a terminal: npx hardhat compile Deploying on BizNet Network Run this command in root of the project directory: $ npx hardhat run --network testnet scripts/deploy.js Remember your address, transaction_hash and other details provided would differ, Above is just to provide an idea of structure. Congratulations! You have successfully deployed ERC20 Smart Contract. Now you can interact with the Smart Contract. You can check the deployment status here: https://scan.bosagora.org/ or https://testnet-scan.bosagora.org/","title":"Using Hardhat"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#using-hardhat","text":"","title":"Using Hardhat"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#what-is-hardhat","text":"Hardhat is a development environment to compile, deploy, test, and debug your smart contract.","title":"What is Hardhat"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#setting-up-the-development-environment","text":"There are a few technical requirements before we start. Please install the following: Requirements:","title":"Setting up the development environment"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#installing","text":"There are a few technical requirements before we start. Please install the following: Requirements: Windows, Linux or Mac OS X Node.js v8.9.4 LTS or later Git First, you need to create an empty project npm init --yes Once your project is ready, you should run npm install --save-dev hardhat It's recommeded to install some dependencies. npm install --save-dev @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers To use your local installation of Hardhat, you need to use npx to run it (i.e. npx hardhat ).","title":"Installing"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#create-a-project","text":"To create your Hardhat project run npx hardhat in your project folder: mkdir MegaCoin cd MegaCoin Intialize your project: $ npx hardhat 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 8888888888 8888b. 888d888 .d88888 88888b. 8888b. 888888 888 888 \"88b 888P\" d88\" 888 888 \"88b \"88b 888 888 888 .d888888 888 888 888 888 888 .d888888 888 888 888 888 888 888 Y88b 888 888 888 888 888 Y88b. 888 888 \"Y888888 888 \"Y88888 888 888 \"Y888888 \"Y888 Welcome to Hardhat v2.0.8 ? What do you want to do? \u2026 \u276f Create a sample project Create an empty hardhat.config.js Quit Once this project is initialized, you'll now have a project structure with the following items: contracts/: Directory for Solidity contracts scripts/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts hardhat-config.js: Hardhat configuration file","title":"Create A Project"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#create-contract","text":"You can write your own smart contract or download the ERC20 token smart contract template .","title":"Create Contract"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#config-hardhat-for-biznet","text":"Go to hardhat.config.js Update the config require(\"@nomiclabs/hardhat-waffle\"); require('@nomiclabs/hardhat-ethers'); const { mnemonic } = require('./secrets.json'); // This is a sample Hardhat task. To learn how to create your own go to // https://hardhat.org/guides/create-task.html task(\"accounts\", \"Prints the list of accounts\", async () => { const accounts = await ethers.getSigners(); for (const account of accounts) { console.log(account.address); } }); // You need to export an object to set up your config // Go to https://hardhat.org/config/ to learn more /** * @type import('hardhat/config').HardhatUserConfig */ module.exports = { defaultNetwork: \"mainnet\", networks: { localhost: { url: \"http://127.0.0.1:8545\" }, hardhat: { }, testnet: { url: \"https://testnet.bosagora.org/\", chainId: 2019, gasPrice: 20000000000, accounts: {mnemonic: mnemonic} }, mainnet: { url: \"https://mainnet.bosagora.org/\", chainId: 2152, gasPrice: 20000000000, accounts: {mnemonic: mnemonic} } }, solidity: { version: \"0.5.16\", settings: { optimizer: { enabled: true } } }, paths: { sources: \"./contracts\", tests: \"./test\", cache: \"./cache\", artifacts: \"./artifacts\" }, mocha: { timeout: 20000 } }; Note It requires mnemonic to be passed in for Provider, this is the seed phrase for the account you'd like to deploy from. Create a new .secret file in root directory and enter your 12 word mnemonic seed phrase to get started. To get the seedwords from metamask wallet you can go to Metamask Settings, then from the menu choose Security and Privacy where you will see a button that says reveal seed words.","title":"Config Hardhat for BizNet"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#compile-contract","text":"To compile a Hardhat project, change to the root of the directory where the project is located and then type the following into a terminal: npx hardhat compile","title":"Compile Contract"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#deploying-on-biznet-network","text":"Run this command in root of the project directory: $ npx hardhat run --network testnet scripts/deploy.js Remember your address, transaction_hash and other details provided would differ, Above is just to provide an idea of structure. Congratulations! You have successfully deployed ERC20 Smart Contract. Now you can interact with the Smart Contract. You can check the deployment status here: https://scan.bosagora.org/ or https://testnet-scan.bosagora.org/","title":"Deploying on BizNet Network"},{"location":"biznet/develop/deploy_smart_contract/remix/","text":"Using Remix Deploys a ERC20 smart contract with a message, and renders it in the front-end. You can interact with the smart contract easily! This dApp implements a \"Hello World\" style application that echoes a message passed to the contract to the front end. This tutorial is intended to be followed using the online IDE available at Remix IDE . Setting Up Remix IDE Remix is an online IDE to develop smart contracts. You need to choose Solidity Compiler and Deploy and Run Transactions. Go to File Explorers, And Create a new file, Name it ERC20Token.sol Copy/Paste the Smart contract below into the newly created file ERC20Token.sol Writing the Smart Contract Create new contract ERC20Token.sol and copy contract code from the ERC20 token template here Modify \"TOKEN_NAME\", \"TOKEN_SYMBOL\", \"DECIMALS\" and \"TOTAL_SUPPLY\" according to your requirements. The first line, pragma solidity ^0.8.0 specifies that the source code is for a Solidity version greater than 0.5.16. Pragmas are common instructions for compilers about how to treat the source code (e.g., pragma once). A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. Learn more about the constructor and memory in the docs. Compile Smart Contract Step1: Click button to switch to compile page Step2: Select \"ERC20Token\" contract Step3: Enable \"Auto compile\" and \"optimization\" Step4: Click \"ABI\" to copy the contract abi and save it. Deploy Smart Contract Now, We have to deploy our smart contract on BizNet Network. For that, we have to connect to web3 world, We will be using Metamask. Please follow this tutorial to setup a Metamask Account . Copy your address from Metamask Head over to Faucet - https://faucet.bosagora.org/request/boa/your-address and request test BOA Now, let's Deploy the Smart Contract on BizNet Testnet Select \"Injected Web3\" in the ENVIRONMENT dropdown and your contract Metamask accept the Connection Request! From the CONTRACT dropdown menu, select the ERC20Token.sol you created earlier. Click the Deploy button in Remix and accept another metamask popup that requires transaction confirmation once connected! Congratulations! You have successfully deployed a ERC20 Contract. Now you can interact with the Smart Contract. Check the deployment status here: https://testnet-scan.bosagora.org/","title":"Using Remix IDE"},{"location":"biznet/develop/deploy_smart_contract/remix/#using-remix","text":"Deploys a ERC20 smart contract with a message, and renders it in the front-end. You can interact with the smart contract easily! This dApp implements a \"Hello World\" style application that echoes a message passed to the contract to the front end. This tutorial is intended to be followed using the online IDE available at Remix IDE .","title":"Using Remix"},{"location":"biznet/develop/deploy_smart_contract/remix/#setting-up-remix-ide","text":"Remix is an online IDE to develop smart contracts. You need to choose Solidity Compiler and Deploy and Run Transactions. Go to File Explorers, And Create a new file, Name it ERC20Token.sol Copy/Paste the Smart contract below into the newly created file ERC20Token.sol","title":"Setting Up Remix IDE"},{"location":"biznet/develop/deploy_smart_contract/remix/#writing-the-smart-contract","text":"Create new contract ERC20Token.sol and copy contract code from the ERC20 token template here Modify \"TOKEN_NAME\", \"TOKEN_SYMBOL\", \"DECIMALS\" and \"TOTAL_SUPPLY\" according to your requirements. The first line, pragma solidity ^0.8.0 specifies that the source code is for a Solidity version greater than 0.5.16. Pragmas are common instructions for compilers about how to treat the source code (e.g., pragma once). A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. Learn more about the constructor and memory in the docs.","title":"Writing the Smart Contract"},{"location":"biznet/develop/deploy_smart_contract/remix/#compile-smart-contract","text":"Step1: Click button to switch to compile page Step2: Select \"ERC20Token\" contract Step3: Enable \"Auto compile\" and \"optimization\" Step4: Click \"ABI\" to copy the contract abi and save it.","title":"Compile Smart Contract"},{"location":"biznet/develop/deploy_smart_contract/remix/#deploy-smart-contract","text":"Now, We have to deploy our smart contract on BizNet Network. For that, we have to connect to web3 world, We will be using Metamask. Please follow this tutorial to setup a Metamask Account . Copy your address from Metamask Head over to Faucet - https://faucet.bosagora.org/request/boa/your-address and request test BOA Now, let's Deploy the Smart Contract on BizNet Testnet Select \"Injected Web3\" in the ENVIRONMENT dropdown and your contract Metamask accept the Connection Request! From the CONTRACT dropdown menu, select the ERC20Token.sol you created earlier. Click the Deploy button in Remix and accept another metamask popup that requires transaction confirmation once connected! Congratulations! You have successfully deployed a ERC20 Contract. Now you can interact with the Smart Contract. Check the deployment status here: https://testnet-scan.bosagora.org/","title":"Deploy Smart Contract"},{"location":"biznet/develop/deploy_smart_contract/truffle/","text":"Using Truffle Setting up the development environment Requirements There are a few technical requirements before we start. Please install the following: Requirements: Windows, Linux or Mac OS X Node.js v8.9.4 LTS or later Git Recommendations for Windows If you're running Truffle on Windows, you may encounter some naming conflicts that could prevent Truffle from executing properly. Please see the section on resolving naming conflicts for solutions. Installing Truffle Once we have those installed, we only need one command to install Truffle: npm install -g truffle To verify that Truffle is installed properly, type truffle version on a terminal. If you see an error, make sure that your npm modules are added to your path. Project Creation, Compilation, and Configuration The first step is to create a Truffle project. We'll use the *MegaCoin as an example, which creates a token that can be transferred between accounts: Create a new directory for your Truffle project mkdir MegaCoin cd MegaCoin Intialize your project: To initialize your project use the following command truffle init Once this operation is completed, you'll now have a project structure with the following items: contracts/: Directory for Solidity contracts migrations/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts truffle-config.js: Truffle configuration file Create Contract You can write your own smart contract or download the ERC20 token smart contract template. Compile Contract To compile a Truffle project, change to the root of the directory where the project is located and then type the following into a terminal: truffle compile Config Truffle for BizNet Go to truffle-config.js Update the truffle-config const HDWalletProvider = require('@truffle/hdwallet-provider'); const fs = require('fs'); const mnemonic = fs.readFileSync(\".secret\").toString().trim(); module.exports = { networks: { development: { host: \"127.0.0.1\", // Localhost (default: none) port: 8545, // Standard RPC port (default: none) network_id: \"*\", // Any network (default: none) }, testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, mainnet: { provider: () => new HDWalletProvider(mnemonic, `https://mainnet.bosagora.org/`), network_id: 2151, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, }, // Set default mocha options here, use special reporters etc. mocha: { // timeout: 100000 }, // Configure your compilers compilers: { solc: { version: \"^0.6.12\", // A version or constraint - Ex. \"^0.5.0\" } } } Notice, it requires mnemonic to be passed in for Provider, this is the seed phrase for the account you'd like to deploy from. Create a new .secret file in root directory and enter your 12 word mnemonic seed phrase to get started. To get the seedwords from metamask wallet you can go to Metamask Settings, then from the menu choose Security and Privacy where you will see a button that says reveal seed words. Deploying on BizNet Network Run this command in root of the project directory: $ truffle migrate --network testnet Contract will be deployed on BizNet Testnet, it look like this: 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0xaf4502198400bde2148eb4274b08d727a17080b685cd2dcd4aee13d8eb954adc > Blocks: 3 Seconds: 9 > contract address: 0x81eCD10b61978D9160428943a0c0Fb31a5460466 > block number: 3223948 > block timestamp: 1604049862 > account: 0x623ac9f6E62A8134bBD5Dc96D9B8b29b4B60e45F > balance: 6.24574114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH Pausing for 5 confirmations... ------------------------------ > confirmation number: 2 (block: 3223952) > confirmation number: 3 (block: 3223953) > confirmation number: 4 (block: 3223954) > confirmation number: 6 (block: 3223956) > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH Summary ======= > Total deployments: 1 > Final cost: 0.00383886 ETH Remember your address, transaction_hash and other details provided would differ, Above is just to provide an idea of structure. Congratulations! You have successfully deployed ERC20 Smart Contract. Now you can interact with the Smart Contract. You can check the deployment status here: https://scan.bosagora.org/ or https://testnet-scan.bosagora.org/","title":"Using Truffle"},{"location":"biznet/develop/deploy_smart_contract/truffle/#using-truffle","text":"","title":"Using Truffle"},{"location":"biznet/develop/deploy_smart_contract/truffle/#setting-up-the-development-environment","text":"","title":"Setting up the development environment"},{"location":"biznet/develop/deploy_smart_contract/truffle/#requirements","text":"There are a few technical requirements before we start. Please install the following: Requirements: Windows, Linux or Mac OS X Node.js v8.9.4 LTS or later Git","title":"Requirements"},{"location":"biznet/develop/deploy_smart_contract/truffle/#recommendations-for-windows","text":"If you're running Truffle on Windows, you may encounter some naming conflicts that could prevent Truffle from executing properly. Please see the section on resolving naming conflicts for solutions.","title":"Recommendations for Windows"},{"location":"biznet/develop/deploy_smart_contract/truffle/#installing-truffle","text":"Once we have those installed, we only need one command to install Truffle: npm install -g truffle To verify that Truffle is installed properly, type truffle version on a terminal. If you see an error, make sure that your npm modules are added to your path.","title":"Installing Truffle"},{"location":"biznet/develop/deploy_smart_contract/truffle/#project-creation-compilation-and-configuration","text":"The first step is to create a Truffle project. We'll use the *MegaCoin as an example, which creates a token that can be transferred between accounts:","title":"Project Creation, Compilation, and Configuration"},{"location":"biznet/develop/deploy_smart_contract/truffle/#create-a-new-directory-for-your-truffle-project","text":"mkdir MegaCoin cd MegaCoin","title":"Create a new directory for your Truffle project"},{"location":"biznet/develop/deploy_smart_contract/truffle/#intialize-your-project","text":"To initialize your project use the following command truffle init Once this operation is completed, you'll now have a project structure with the following items: contracts/: Directory for Solidity contracts migrations/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts truffle-config.js: Truffle configuration file","title":"Intialize your project:"},{"location":"biznet/develop/deploy_smart_contract/truffle/#create-contract","text":"You can write your own smart contract or download the ERC20 token smart contract template.","title":"Create Contract"},{"location":"biznet/develop/deploy_smart_contract/truffle/#compile-contract","text":"To compile a Truffle project, change to the root of the directory where the project is located and then type the following into a terminal: truffle compile","title":"Compile Contract"},{"location":"biznet/develop/deploy_smart_contract/truffle/#config-truffle-for-biznet","text":"Go to truffle-config.js Update the truffle-config const HDWalletProvider = require('@truffle/hdwallet-provider'); const fs = require('fs'); const mnemonic = fs.readFileSync(\".secret\").toString().trim(); module.exports = { networks: { development: { host: \"127.0.0.1\", // Localhost (default: none) port: 8545, // Standard RPC port (default: none) network_id: \"*\", // Any network (default: none) }, testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, mainnet: { provider: () => new HDWalletProvider(mnemonic, `https://mainnet.bosagora.org/`), network_id: 2151, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, }, // Set default mocha options here, use special reporters etc. mocha: { // timeout: 100000 }, // Configure your compilers compilers: { solc: { version: \"^0.6.12\", // A version or constraint - Ex. \"^0.5.0\" } } } Notice, it requires mnemonic to be passed in for Provider, this is the seed phrase for the account you'd like to deploy from. Create a new .secret file in root directory and enter your 12 word mnemonic seed phrase to get started. To get the seedwords from metamask wallet you can go to Metamask Settings, then from the menu choose Security and Privacy where you will see a button that says reveal seed words.","title":"Config Truffle for BizNet"},{"location":"biznet/develop/deploy_smart_contract/truffle/#deploying-on-biznet-network","text":"Run this command in root of the project directory: $ truffle migrate --network testnet Contract will be deployed on BizNet Testnet, it look like this: 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0xaf4502198400bde2148eb4274b08d727a17080b685cd2dcd4aee13d8eb954adc > Blocks: 3 Seconds: 9 > contract address: 0x81eCD10b61978D9160428943a0c0Fb31a5460466 > block number: 3223948 > block timestamp: 1604049862 > account: 0x623ac9f6E62A8134bBD5Dc96D9B8b29b4B60e45F > balance: 6.24574114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH Pausing for 5 confirmations... ------------------------------ > confirmation number: 2 (block: 3223952) > confirmation number: 3 (block: 3223953) > confirmation number: 4 (block: 3223954) > confirmation number: 6 (block: 3223956) > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH Summary ======= > Total deployments: 1 > Final cost: 0.00383886 ETH Remember your address, transaction_hash and other details provided would differ, Above is just to provide an idea of structure. Congratulations! You have successfully deployed ERC20 Smart Contract. Now you can interact with the Smart Contract. You can check the deployment status here: https://scan.bosagora.org/ or https://testnet-scan.bosagora.org/","title":"Deploying on BizNet Network"},{"location":"biznet/develop/nft/deploy/","text":"Deploy NFTs on BizNet This work is inspired by this blog In this tutorial we will create a non-fungible token (NFT) and deploy to a public testnet. ERC721 is a standard for representing ownership of non-fungible tokens , that is, where each token is unique such as in real estate or collectibles. We will use Presets contracts in OpenZeppelin Contracts to create an ERC721 and deploy using Truffle. Setting up the Environment We begin by creating a new project. $ mkdir mynft && cd mynft $ npm init -y Then we install OpenZeppelin Contracts which has an implementation of ERC721. $ npm i --save-dev @openzeppelin/contracts Next we install a development tool for deployment, for this tutorial we will use Truffle but we could use any other tools such as Buidler, Remix or OpenZeppelin CLI . $ npm i truffle Getting the Contract Artifacts We will setup our Solidity project using truffle init to create a contracts directory and configuration to connect to a network. $ npx truffle init Starting init... ================ > Copying project files to Init successful, sweet! We are going to use Preset ERC721PresetMinterPauserAutoId which is an ERC721 that is preset so it can be minted (with auto token ID and metadata URI), paused and burned. The Preset contracts have already been compiled, so we only need to copy the artifacts to the build/contracts directory. $ mkdir -p build/contracts/ $ cp node_modules/@openzeppelin/contracts/build/contracts/* build/contracts/ Using your favorite editor create 2_deploy.js in the migrations directory with the following contents: // migrations/2_deploy.js // SPDX-License-Identifier: MIT const ERC721PresetMinterPauserAutoId = artifacts.require(\"ERC721PresetMinterPauserAutoId\"); module.exports = function(deployer) { deployer.deploy(ERC721PresetMinterPauserAutoId, \"My NFT\",\"NFT\", \"http://my-json-server.typicode.com/huangsuyu/nft/tokens\"); }; Deploy the Contract to a Local Blockchain We will use truffle develop to open a Truffle console with a development blockchain Head over to https://faucet.bosagora.org/request/boa/your-address and request test BOA $ npx truffle develop Truffle Develop started at http://127.0.0.1:9545/ Accounts: (0) 0xc7e4bbc4269fdc62f879834e363173aee7895f45 Private Keys: (0) ef424b4dc91a9c9d6c1fc4ae0a50ce80668f3a955a7e982584b45577e2c70e27 Mnemonic: mechanic cannon setup general indicate people notable frown poet friend credit true \u26a0\ufe0f Important \u26a0\ufe0f : This mnemonic was created for you by Truffle. It is not secure. Ensure you do not use it on production blockchains, or else you risk losing funds. truffle(develop)> migrate Compiling your contracts... =========================== > Compiling ./contracts/Migrations.sol > Artifacts written to /Users/Documents/work/mynft/build/contracts > Compiled successfully using: - solc: 0.5.16+commit.9c3226ce.Emscripten.clang Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567 > Blocks: 0 Seconds: 0 > contract address: 0x77409B688eA5461078a31450F3138EA8324F72C9 > block number: 1 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.99616114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH 2_deploy.js =========== Deploying 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e > Blocks: 0 Seconds: 0 > contract address: 0xEaB17D581552123695f03F12b09e378EE9463b44 > block number: 3 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.92142266 > gas used: 3694586 (0x385ffa) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.07389172 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.07389172 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07773058 ETH truffle(develop)> We can deploy our new NFT to our development blockchain using migrate. truffle(develop)> migrate Compiling your contracts... =========================== > Everything is up to date, there is nothing to compile. Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Replacing 'Migrations' ---------------------- > transaction hash: 0x5d71b0a45a0fe20e2ca645393bb44b83fbd47351c009c48be0b8b84b610fb3b7 > Blocks: 0 Seconds: 0 > contract address: 0x3797c825cAC4a1FA765F6D8cd7787fB195849555 > block number: 1 > block timestamp: 1590736865 > account: 0x0445c33BdCe670D57189158b88c0034B579f37cE > balance: 99.99671674 > gas used: 164163 (0x28143) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00328326 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00328326 ETH 2_deploy.js =========== Replacing 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0x166d7b28f4afb949585b5a0e5b4151daa54acbcb70566b202fd62ab380a6650c > Blocks: 0 Seconds: 0 > contract address: 0xDEE9411430c7Dd9b67fC6DA723DE729AdAB50AD7 > block number: 3 > block timestamp: 1590736866 > account: 0x0445c33BdCe670D57189158b88c0034B579f37cE > balance: 99.92191642 > gas used: 3697675 (0x386c0b) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.0739535 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.0739535 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07723676 ETH We can then use our deployed contract. truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed() undefined Interact With Your Token The accounts that we can use were displayed when we started truffle develop Token Metadata We can call the contract to read token metadata such as name , symbol and baseURI truffle(develop)> await nft.name() 'My NFT' truffle(develop)> await nft.symbol() 'NFT' truffle(develop)> await nft.baseURI() Mint We can send a transaction to mint tokens to a given account, from an account with the minter role. In our case we are minting from the account which deployed the token, which is given the minter role. We will mint 1 NFT with token ID 0. truffle(develop)> await nft.mint(\"0x0445c33bdce670d57189158b88c0034b579f37ce\") { tx: '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d', receipt: { transactionHash: '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d', transactionIndex: 0, blockHash: '0x3ad3cfcb26da0c969e9d5a5414a5e90a91a3a862c9e9082afc38a0ec0f1a5d00', blockNumber: 5, from: '0x0445c33bdce670d57189158b88c0034b579f37ce', to: '0xdee9411430c7dd9b67fc6da723de729adab50ad7', gasUsed: 156470, ... We can check the owner of the token and the token URI for the metadata truffle(develop)> await nft.ownerOf(1) '0x0445c33BdCe670D57189158b88c0034B579f37cE' truffle(develop)> await nft.tokenURI(1) Metadata EIP-721 2 includes an optional metadata extension with a name , symbol and for each tokenID a tokenURI with can point to a JSON file with name , description and image for the given token ID. How you create and host this metadata is up to you. I would suggest using a domain that you control to point to where you host the data so that you can move it as required. For this tutorial, we will use My JSON Server where we can store a single JSON file in a GitHub repository that we can access via a fake JSON server. Warning For production we need to store our metadata in a permanent location that can exist for the life of the token. A sample JSON for tokenID 1 is: http://my-json-server.typicode.com/huangsuyu/nft/tokens/1 Deploy to a Public Testnet Next we will deploy to BizNet testnet . To deploy, we will use the instructions for Connecting to Public Test Networks with Truffle You will need the following: RPC URL of TestNet @truffle/hdwallet-provider installed Configure truffle-config.js for TestNet A funded testnet account and mnemonic A secrets.json or another secret-management solution. Make sure you don\u2019t commit this to GitHub! My truffle-config.js has the following testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, mainnet: { provider: () => new HDWalletProvider(mnemonic, `https://mainnet.bosagora.org`), network_id: 2151, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, Deploy to BizNet Testnet $ npx truffle migrate --network testnet Compiling your contracts... =========================== > Everything is up to date, there is nothing to compile. Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567 > Blocks: 0 Seconds: 0 > contract address: 0x77409B688eA5461078a31450F3138EA8324F72C9 > block number: 1 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.99616114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH 2_deploy.js =========== Deploying 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e > Blocks: 0 Seconds: 0 > contract address: 0xEaB17D581552123695f03F12b09e378EE9463b44 > block number: 3 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.92142266 > gas used: 3694586 (0x385ffa) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.07389172 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.07389172 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07773058 ETH Mint We can send a transaction to mint tokens to a given account, from an account with the minter role. truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed() undefined In our case we are minting from the account which deployed the token, which is given the minter role. To see configured accounts run the command accounts . truffle(rinkeby)> accounts [ '0x133d144f52705ceb3f5801b63b9ebccf4102f5ed', We will mint 1 NFT with token ID 1. Specify the address that you want to be the token holder ( 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 is one of my test accounts) truffle(rinkeby)> await nft.mint(\"0x133d144f52705ceb3f5801b63b9ebccf4102f5ed\") { tx: '0x0d90d4a2a4ac3f33d5220deb11e8f65adf14a6669afd18abd4cce8ca7ab58e04', receipt: { blockHash: '0x724ba66bc1d799820c05a93ae67991b21bb769fd1e9dddd5db9f725f5f633331', blockNumber: 3333746, contractAddress: null, cumulativeGasUsed: 164785, from: '0x77737a65c296012c67f8c7f656d1df81827c9541', gasUsed: 164785, ...","title":"Delply NFT on BizNet"},{"location":"biznet/develop/nft/deploy/#deploy-nfts-on-biznet","text":"This work is inspired by this blog In this tutorial we will create a non-fungible token (NFT) and deploy to a public testnet. ERC721 is a standard for representing ownership of non-fungible tokens , that is, where each token is unique such as in real estate or collectibles. We will use Presets contracts in OpenZeppelin Contracts to create an ERC721 and deploy using Truffle.","title":"Deploy NFTs on BizNet"},{"location":"biznet/develop/nft/deploy/#setting-up-the-environment","text":"We begin by creating a new project. $ mkdir mynft && cd mynft $ npm init -y Then we install OpenZeppelin Contracts which has an implementation of ERC721. $ npm i --save-dev @openzeppelin/contracts Next we install a development tool for deployment, for this tutorial we will use Truffle but we could use any other tools such as Buidler, Remix or OpenZeppelin CLI . $ npm i truffle","title":"Setting up the Environment"},{"location":"biznet/develop/nft/deploy/#getting-the-contract-artifacts","text":"We will setup our Solidity project using truffle init to create a contracts directory and configuration to connect to a network. $ npx truffle init Starting init... ================ > Copying project files to Init successful, sweet! We are going to use Preset ERC721PresetMinterPauserAutoId which is an ERC721 that is preset so it can be minted (with auto token ID and metadata URI), paused and burned. The Preset contracts have already been compiled, so we only need to copy the artifacts to the build/contracts directory. $ mkdir -p build/contracts/ $ cp node_modules/@openzeppelin/contracts/build/contracts/* build/contracts/ Using your favorite editor create 2_deploy.js in the migrations directory with the following contents: // migrations/2_deploy.js // SPDX-License-Identifier: MIT const ERC721PresetMinterPauserAutoId = artifacts.require(\"ERC721PresetMinterPauserAutoId\"); module.exports = function(deployer) { deployer.deploy(ERC721PresetMinterPauserAutoId, \"My NFT\",\"NFT\", \"http://my-json-server.typicode.com/huangsuyu/nft/tokens\"); };","title":"Getting the Contract Artifacts"},{"location":"biznet/develop/nft/deploy/#deploy-the-contract-to-a-local-blockchain","text":"We will use truffle develop to open a Truffle console with a development blockchain Head over to https://faucet.bosagora.org/request/boa/your-address and request test BOA $ npx truffle develop Truffle Develop started at http://127.0.0.1:9545/ Accounts: (0) 0xc7e4bbc4269fdc62f879834e363173aee7895f45 Private Keys: (0) ef424b4dc91a9c9d6c1fc4ae0a50ce80668f3a955a7e982584b45577e2c70e27 Mnemonic: mechanic cannon setup general indicate people notable frown poet friend credit true \u26a0\ufe0f Important \u26a0\ufe0f : This mnemonic was created for you by Truffle. It is not secure. Ensure you do not use it on production blockchains, or else you risk losing funds. truffle(develop)> migrate Compiling your contracts... =========================== > Compiling ./contracts/Migrations.sol > Artifacts written to /Users/Documents/work/mynft/build/contracts > Compiled successfully using: - solc: 0.5.16+commit.9c3226ce.Emscripten.clang Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567 > Blocks: 0 Seconds: 0 > contract address: 0x77409B688eA5461078a31450F3138EA8324F72C9 > block number: 1 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.99616114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH 2_deploy.js =========== Deploying 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e > Blocks: 0 Seconds: 0 > contract address: 0xEaB17D581552123695f03F12b09e378EE9463b44 > block number: 3 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.92142266 > gas used: 3694586 (0x385ffa) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.07389172 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.07389172 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07773058 ETH truffle(develop)> We can deploy our new NFT to our development blockchain using migrate. truffle(develop)> migrate Compiling your contracts... =========================== > Everything is up to date, there is nothing to compile. Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Replacing 'Migrations' ---------------------- > transaction hash: 0x5d71b0a45a0fe20e2ca645393bb44b83fbd47351c009c48be0b8b84b610fb3b7 > Blocks: 0 Seconds: 0 > contract address: 0x3797c825cAC4a1FA765F6D8cd7787fB195849555 > block number: 1 > block timestamp: 1590736865 > account: 0x0445c33BdCe670D57189158b88c0034B579f37cE > balance: 99.99671674 > gas used: 164163 (0x28143) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00328326 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00328326 ETH 2_deploy.js =========== Replacing 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0x166d7b28f4afb949585b5a0e5b4151daa54acbcb70566b202fd62ab380a6650c > Blocks: 0 Seconds: 0 > contract address: 0xDEE9411430c7Dd9b67fC6DA723DE729AdAB50AD7 > block number: 3 > block timestamp: 1590736866 > account: 0x0445c33BdCe670D57189158b88c0034B579f37cE > balance: 99.92191642 > gas used: 3697675 (0x386c0b) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.0739535 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.0739535 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07723676 ETH We can then use our deployed contract. truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed() undefined","title":"Deploy the Contract to a Local Blockchain"},{"location":"biznet/develop/nft/deploy/#interact-with-your-token","text":"The accounts that we can use were displayed when we started truffle develop","title":"Interact With Your Token"},{"location":"biznet/develop/nft/deploy/#token-metadata","text":"We can call the contract to read token metadata such as name , symbol and baseURI truffle(develop)> await nft.name() 'My NFT' truffle(develop)> await nft.symbol() 'NFT' truffle(develop)> await nft.baseURI()","title":"Token Metadata"},{"location":"biznet/develop/nft/deploy/#mint","text":"We can send a transaction to mint tokens to a given account, from an account with the minter role. In our case we are minting from the account which deployed the token, which is given the minter role. We will mint 1 NFT with token ID 0. truffle(develop)> await nft.mint(\"0x0445c33bdce670d57189158b88c0034b579f37ce\") { tx: '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d', receipt: { transactionHash: '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d', transactionIndex: 0, blockHash: '0x3ad3cfcb26da0c969e9d5a5414a5e90a91a3a862c9e9082afc38a0ec0f1a5d00', blockNumber: 5, from: '0x0445c33bdce670d57189158b88c0034b579f37ce', to: '0xdee9411430c7dd9b67fc6da723de729adab50ad7', gasUsed: 156470, ... We can check the owner of the token and the token URI for the metadata truffle(develop)> await nft.ownerOf(1) '0x0445c33BdCe670D57189158b88c0034B579f37cE' truffle(develop)> await nft.tokenURI(1)","title":"Mint"},{"location":"biznet/develop/nft/deploy/#metadata","text":"EIP-721 2 includes an optional metadata extension with a name , symbol and for each tokenID a tokenURI with can point to a JSON file with name , description and image for the given token ID. How you create and host this metadata is up to you. I would suggest using a domain that you control to point to where you host the data so that you can move it as required. For this tutorial, we will use My JSON Server where we can store a single JSON file in a GitHub repository that we can access via a fake JSON server. Warning For production we need to store our metadata in a permanent location that can exist for the life of the token. A sample JSON for tokenID 1 is: http://my-json-server.typicode.com/huangsuyu/nft/tokens/1","title":"Metadata"},{"location":"biznet/develop/nft/deploy/#deploy-to-a-public-testnet","text":"Next we will deploy to BizNet testnet . To deploy, we will use the instructions for Connecting to Public Test Networks with Truffle You will need the following: RPC URL of TestNet @truffle/hdwallet-provider installed Configure truffle-config.js for TestNet A funded testnet account and mnemonic A secrets.json or another secret-management solution. Make sure you don\u2019t commit this to GitHub! My truffle-config.js has the following testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, mainnet: { provider: () => new HDWalletProvider(mnemonic, `https://mainnet.bosagora.org`), network_id: 2151, confirmations: 10, timeoutBlocks: 200, skipDryRun: true },","title":"Deploy to a Public Testnet"},{"location":"biznet/develop/nft/deploy/#deploy-to-biznet-testnet","text":"$ npx truffle migrate --network testnet Compiling your contracts... =========================== > Everything is up to date, there is nothing to compile. Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567 > Blocks: 0 Seconds: 0 > contract address: 0x77409B688eA5461078a31450F3138EA8324F72C9 > block number: 1 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.99616114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH 2_deploy.js =========== Deploying 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e > Blocks: 0 Seconds: 0 > contract address: 0xEaB17D581552123695f03F12b09e378EE9463b44 > block number: 3 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.92142266 > gas used: 3694586 (0x385ffa) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.07389172 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.07389172 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07773058 ETH","title":"Deploy to BizNet Testnet"},{"location":"biznet/develop/nft/deploy/#mint_1","text":"We can send a transaction to mint tokens to a given account, from an account with the minter role. truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed() undefined In our case we are minting from the account which deployed the token, which is given the minter role. To see configured accounts run the command accounts . truffle(rinkeby)> accounts [ '0x133d144f52705ceb3f5801b63b9ebccf4102f5ed', We will mint 1 NFT with token ID 1. Specify the address that you want to be the token holder ( 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 is one of my test accounts) truffle(rinkeby)> await nft.mint(\"0x133d144f52705ceb3f5801b63b9ebccf4102f5ed\") { tx: '0x0d90d4a2a4ac3f33d5220deb11e8f65adf14a6669afd18abd4cce8ca7ab58e04', receipt: { blockHash: '0x724ba66bc1d799820c05a93ae67991b21bb769fd1e9dddd5db9f725f5f633331', blockNumber: 3333746, contractAddress: null, cumulativeGasUsed: 164785, from: '0x77737a65c296012c67f8c7f656d1df81827c9541', gasUsed: 164785, ...","title":"Mint"},{"location":"biznet/develop/nft/metadata/","text":"NFT Metadata Standard Implementing Token URI To facilitate a marketplace on BizNet to pull in off-chain metadata for ERC721 assets, the NFT contract will need to return a URI where the metadata can be found. To find this URI, the tokenURI method in ERC721 and the uri method in ERC1155 are used to track your NFT. You should implement the function in the Contract: /** * @dev Returns an URI for a given token ID */ function tokenURI(uint256 _tokenId) public view returns (string) { return Strings.strConcat( baseTokenURI(), Strings.uint2str(_tokenId) ); } The tokenURI function in your Contract should return an HTTP or IPFS URL. When queried, this URL should in turn return a JSON blob of data with the metadata for your token. Metadata Structure Marketplaces on BizNet support metadata that is structured according to the official ERC721 metadata standard . Additionally, several properties for your items are supported, giving you all the sorting and filtering capabilities on BizeNet Marketplaces. The below metadata structure, allows the BizNet Marketplace to read and display the details about the assets which your NFTs represent. { \"name\":\"NFT Name\", \"description\":\"NFT Description\", \"image\":\"https://somedomain.com/pic/xxxx.jpg\", \"external_url\":\"https://originalsite.io/2\", \"attributes\":[...] } Here's how each of these properties work: Property Description name Name of the item. Max 200 characters. description A human-readable description of the item. Markdown is supported. Max 500 characters. image This is the URL to the image of the item. It can be just about any type of image. A 350 x 350 image is recommended. animation_url This is the URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. animation_type This is the file format of the multi-media attachment provided from animation_url. external_url This is the URL that will appear below the asset's image on the marketplace and will allow users to leave the marketplace and view the item on your site. attributes These are the attributes for the item to describe the detail of the NFT. (see array below) Attributes To present NFT traits, include the following array in the metadata: { \"attributes\":[ { \"trait_type\":\"Rarity Class\", \"value\":\"Normal\" }, { \"trait_type\":\"Type\", \"value\":\"Male\" }, { \"trait_type\":\"Face\", \"value\":\"Mole\" }, { \"trait_type\":\"Beard\", \"value\":\"Chinstrap\" }, { \"display_type\":\"boost_number\", \"trait_type\":\"Power\", \"value\":\"Power\" }, { \"display_type\":\"boost_percentage\", \"trait_type\":\"Health Increase\", \"value\":\"20\" }, { \"display_type\":\"number\", \"trait_type\":\"Generation\", \"value\":\"3\" } ] } Here trait_type is the name of the trait, value is the value of the trait, and display_type is a field indicating how you would like a numeric value should be displayed. For string traits, you don't have to worry about display_type . All traits included in the attributes will be displayed in Attribute . If you don't want to have a trait_type for a particular trait, you can include just a value in the trait and it will be set as a generic attribute. Numeric Traits There are 3 supported options for display_type : number will show the value in pure number, boost_number allows you to show the number with Plus or Minus symbol, and boost_percentage is similar to boost_number but will show a percent sign behind the number. Date Marketplace also supports date traits in date display_type . Pass in a unix timestamp as the value. { \"display_type\": \"date\", \"trait_type\": \"birthday\", \"value\": 1608490000 }","title":"NFT Metadata Standard"},{"location":"biznet/develop/nft/metadata/#nft-metadata-standard","text":"","title":"NFT Metadata Standard"},{"location":"biznet/develop/nft/metadata/#implementing-token-uri","text":"To facilitate a marketplace on BizNet to pull in off-chain metadata for ERC721 assets, the NFT contract will need to return a URI where the metadata can be found. To find this URI, the tokenURI method in ERC721 and the uri method in ERC1155 are used to track your NFT. You should implement the function in the Contract: /** * @dev Returns an URI for a given token ID */ function tokenURI(uint256 _tokenId) public view returns (string) { return Strings.strConcat( baseTokenURI(), Strings.uint2str(_tokenId) ); } The tokenURI function in your Contract should return an HTTP or IPFS URL. When queried, this URL should in turn return a JSON blob of data with the metadata for your token.","title":"Implementing Token URI"},{"location":"biznet/develop/nft/metadata/#metadata-structure","text":"Marketplaces on BizNet support metadata that is structured according to the official ERC721 metadata standard . Additionally, several properties for your items are supported, giving you all the sorting and filtering capabilities on BizeNet Marketplaces. The below metadata structure, allows the BizNet Marketplace to read and display the details about the assets which your NFTs represent. { \"name\":\"NFT Name\", \"description\":\"NFT Description\", \"image\":\"https://somedomain.com/pic/xxxx.jpg\", \"external_url\":\"https://originalsite.io/2\", \"attributes\":[...] } Here's how each of these properties work: Property Description name Name of the item. Max 200 characters. description A human-readable description of the item. Markdown is supported. Max 500 characters. image This is the URL to the image of the item. It can be just about any type of image. A 350 x 350 image is recommended. animation_url This is the URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. animation_type This is the file format of the multi-media attachment provided from animation_url. external_url This is the URL that will appear below the asset's image on the marketplace and will allow users to leave the marketplace and view the item on your site. attributes These are the attributes for the item to describe the detail of the NFT. (see array below)","title":"Metadata Structure"},{"location":"biznet/develop/nft/metadata/#attributes","text":"To present NFT traits, include the following array in the metadata: { \"attributes\":[ { \"trait_type\":\"Rarity Class\", \"value\":\"Normal\" }, { \"trait_type\":\"Type\", \"value\":\"Male\" }, { \"trait_type\":\"Face\", \"value\":\"Mole\" }, { \"trait_type\":\"Beard\", \"value\":\"Chinstrap\" }, { \"display_type\":\"boost_number\", \"trait_type\":\"Power\", \"value\":\"Power\" }, { \"display_type\":\"boost_percentage\", \"trait_type\":\"Health Increase\", \"value\":\"20\" }, { \"display_type\":\"number\", \"trait_type\":\"Generation\", \"value\":\"3\" } ] } Here trait_type is the name of the trait, value is the value of the trait, and display_type is a field indicating how you would like a numeric value should be displayed. For string traits, you don't have to worry about display_type . All traits included in the attributes will be displayed in Attribute . If you don't want to have a trait_type for a particular trait, you can include just a value in the trait and it will be set as a generic attribute.","title":"Attributes"},{"location":"biznet/develop/nft/metadata/#numeric-traits","text":"There are 3 supported options for display_type : number will show the value in pure number, boost_number allows you to show the number with Plus or Minus symbol, and boost_percentage is similar to boost_number but will show a percent sign behind the number.","title":"Numeric Traits"},{"location":"biznet/develop/nft/metadata/#date","text":"Marketplace also supports date traits in date display_type . Pass in a unix timestamp as the value. { \"display_type\": \"date\", \"trait_type\": \"birthday\", \"value\": 1608490000 }","title":"Date"},{"location":"biznet/develop/running_node/node/","text":"How to Run A Node on BizNet Nodes Functions Stores the full blockchain history on disk and can answer the data request from the network. Receives and validates the new blocks and transactions. Verifies the states of every accounts. Supported Platforms We support running a node on Mac OS X and Linux . Suggested Requirements Node VPS running recent versions of Mac OS X or Linux. IMPORTANT 2T GB of free disk space, solid-state drive(SSD), gp3, 8k IOPS, 250MB/S throughput, read latency <1ms. (if start with snap/fast sync, it will need NVMe SSD) 16 cores of CPU and 64 gigabytes of memory (RAM). Suggest m5zn.3xlarge instance type on AWS, c2-standard-16 on Google cloud. A broadband Internet connection with upload/download speeds of 5 megabyte per second Settings Common Problems With Connectivity Sometimes you just can\u2019t get synced. The most common reasons are as follows: You have started geth without the discovery protocol, you can set the --nodiscover parameter to False . You only want this if you are running node with fixed nodes. Update BootstrapNodes BootstrapNodes = [\"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\",\"enode://4c76a1996466b69bd6dc6dd9566aff175cb8aadc846241d100378bdb1d9a4ea47196d9f660d308954ed8a2c725c4f6f4616e9cf108abb5efd766ad9bc7c9af35@3.39.127.36:30303\"] Add Static nodes Geth also supports a feature called static nodes if you have certain peers you always want to connect to. Static nodes are re-connected on disconnects. You can configure permanent static nodes by putting something like the following into <datadir>/geth/static-nodes.json : [ \"enode://pubkey@ip:port\", \"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\", \"enode://844a0cbe8a98fbfc2d80c20539148c4c0862fa06e3e9580bd53ce05c7f26ac4a5cb78369adcb7ac146062273cb437a6e4dd1022cf5a42e31409e279741494a11@54.255.235.26:30303\", \"enode://5ef7a9487b4944f0eaca0ffbd36839de9cf36d871104d4ebc788d75ccf5418e3103bb73791cfc8942b80dba33aad7daa6aed709ba4ee1efa26564f7af523f9c5@54.169.187.148:30303\", \"enode://ce91817b76993736a1c01ab419597528a4084ab57928c60e43741d13d78f941396895d33a3b8ab9286cd403f8520a873af0c692151905b51b7ea7370d832d3bc@18.136.209.89:30303\", \"enode://a578d5c7c87dc293d3fa9f9176f27049dc6e5e259914202b52a15ad52b2529fd375b62e055097ff520a7f93a876d1fcbca5ef0b32dab273e474db907f33d97b3@13.215.191.60:30303\", \"enode://4c76a1996466b69bd6dc6dd9566aff175cb8aadc846241d100378bdb1d9a4ea47196d9f660d308954ed8a2c725c4f6f4616e9cf108abb5efd766ad9bc7c9af35@3.39.127.36:30303\", \"enode://9b086682cfd01ac2223700676d718eb5a7945c6200ca113d0555c4aebec3ee19a6161a88fbee50662254976d9a97c4c5b7e50f55bfbf7ed598cd8c5c078dbd7d@54.180.121.94:30303\", \"enode://b39fd722a26cf48c6b055b0eed5b49c98d420d546d3419ff6a2499ddd190aa5a4e7371343d63a0150e7695bb42387b3d6837f99a49db8f05d78fc775689e2210@15.164.170.19:30303\", \"enode://c08fdd44bc3e09267321a99c6057ec870d5bcb1e3b5ecf7ef48158881abc99d1cca2174328e80917003c1ee27908792badc148a80dc3bdee365c748fcd046723@54.180.93.83:30303\" ] You can also add static nodes at runtime via the js console using admin.addPeer(): admin.addPeer( \"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\" ) Add Trusted nodes Geth supports trusted nodes that are always allowed to reconnect, even if the peer limit is reached. They can be added permanently via a config file <datadir>/geth/trusted-nodes.json or temporary via RPC call. Sync Mode Fast Sync The default sync mode. Synchronizes a node doing a fast synchronization by downloading the entire state database, requesting the headers first, and filling in block bodies and receipts afterward. Once the fast sync reaches the best block of the BizNet network, it switches to full sync mode. Full Sync Synchronizes a node starting at genesis, verifying all blocks and executing all transactions. This mode is a bit slower than the fast sync mode but comes with increased security. Steps to Run a Node Sync From Snapshot This is being prepared. Sync From Genesis Block 1.Build from source code Make sure that you have installed Go 1.18+ and have added GOPATH to PATH environment variable git clone https://github.com/bosagora/go-ethereum # Enter the folder go-ethereum was cloned into cd go-ethereum # Compile and install go-ethereum make geth or you can download the pre-build binaries from release page or follow the instructions below: # Linux wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep linux |cut -d\\\" -f4) unzip linux.zip # MacOS wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep mac |cut -d\\\" -f4) unzip mac.zip 2.Download the config files Download genesis.json and config.toml by: ## mainet wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep mainnet |cut -d\\\" -f4) unzip mainnet.zip ## testnet wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep testnet |cut -d\\\" -f4) unzip testnet.zip 3.Write genesis state locally geth --datadir node init genesis.json You could see the following output: INFO [05-19|14:53:17.468] Allocated cache and file handles database=/Users/michael/Downloads/go-ethereum/node/geth/chaindata cache=16.00MiB handles=16 INFO [05-19|14:53:17.498] Writing custom genesis block INFO [05-19|14:53:17.501] Persisted trie from memory database nodes=21 size=56.84KiB time=357.915\u00b5s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=-574.00B INFO [05-19|14:53:17.502] Successfully wrote genesis state database=chaindata hash=7d79cc\u2026fb0d1e INFO [05-19|14:53:17.503] Allocated cache and file handles database=/Users/michael/Downloads/go-ethereum/node/geth/lightchaindata cache=16.00MiB handles=16 INFO [05-19|14:53:17.524] Writing custom genesis block INFO [05-19|14:53:17.525] Persisted trie from memory database nodes=21 size=56.84KiB time=638.396\u00b5s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=-574.00B INFO [05-19|14:53:17.528] Successfully wrote genesis state database=lightchaindata hash=7d79cc\u2026fb0d1e 4.Start your node ## start a node geth --config ./config.toml --datadir ./node Node Maintainence Binary All the clients are suggested to upgrade to the latest release. The latest version is supposed to be more stable and get better performance. Storage According to the test, the performance of a node will degrade when the storage size exceeds 1.5T. We suggest the node always keep light storage by pruning the storage. How to prune: Stop the node. Run nohup geth snapshot prune-state --datadir {the data dir of your node} & . It will take 3-5 hours to finish. Start the node once it is done. The maintainers should always have a few backup nodes. The hardware is also important, make sure the SSD meets: 2T GB of free disk space, solid-state drive(SSD), gp3, 8k IOPS, 250MB/S throughput, read latency <1ms . Upgrade Geth Please read this guide","title":"Node"},{"location":"biznet/develop/running_node/node/#how-to-run-a-node-on-biznet","text":"","title":"How to Run A Node on BizNet"},{"location":"biznet/develop/running_node/node/#nodes-functions","text":"Stores the full blockchain history on disk and can answer the data request from the network. Receives and validates the new blocks and transactions. Verifies the states of every accounts.","title":"Nodes Functions"},{"location":"biznet/develop/running_node/node/#supported-platforms","text":"We support running a node on Mac OS X and Linux .","title":"Supported Platforms"},{"location":"biznet/develop/running_node/node/#suggested-requirements","text":"","title":"Suggested Requirements"},{"location":"biznet/develop/running_node/node/#node","text":"VPS running recent versions of Mac OS X or Linux. IMPORTANT 2T GB of free disk space, solid-state drive(SSD), gp3, 8k IOPS, 250MB/S throughput, read latency <1ms. (if start with snap/fast sync, it will need NVMe SSD) 16 cores of CPU and 64 gigabytes of memory (RAM). Suggest m5zn.3xlarge instance type on AWS, c2-standard-16 on Google cloud. A broadband Internet connection with upload/download speeds of 5 megabyte per second","title":"Node"},{"location":"biznet/develop/running_node/node/#settings","text":"","title":"Settings"},{"location":"biznet/develop/running_node/node/#common-problems-with-connectivity","text":"Sometimes you just can\u2019t get synced. The most common reasons are as follows: You have started geth without the discovery protocol, you can set the --nodiscover parameter to False . You only want this if you are running node with fixed nodes. Update BootstrapNodes BootstrapNodes = [\"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\",\"enode://4c76a1996466b69bd6dc6dd9566aff175cb8aadc846241d100378bdb1d9a4ea47196d9f660d308954ed8a2c725c4f6f4616e9cf108abb5efd766ad9bc7c9af35@3.39.127.36:30303\"] Add Static nodes Geth also supports a feature called static nodes if you have certain peers you always want to connect to. Static nodes are re-connected on disconnects. You can configure permanent static nodes by putting something like the following into <datadir>/geth/static-nodes.json : [ \"enode://pubkey@ip:port\", \"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\", \"enode://844a0cbe8a98fbfc2d80c20539148c4c0862fa06e3e9580bd53ce05c7f26ac4a5cb78369adcb7ac146062273cb437a6e4dd1022cf5a42e31409e279741494a11@54.255.235.26:30303\", \"enode://5ef7a9487b4944f0eaca0ffbd36839de9cf36d871104d4ebc788d75ccf5418e3103bb73791cfc8942b80dba33aad7daa6aed709ba4ee1efa26564f7af523f9c5@54.169.187.148:30303\", \"enode://ce91817b76993736a1c01ab419597528a4084ab57928c60e43741d13d78f941396895d33a3b8ab9286cd403f8520a873af0c692151905b51b7ea7370d832d3bc@18.136.209.89:30303\", \"enode://a578d5c7c87dc293d3fa9f9176f27049dc6e5e259914202b52a15ad52b2529fd375b62e055097ff520a7f93a876d1fcbca5ef0b32dab273e474db907f33d97b3@13.215.191.60:30303\", \"enode://4c76a1996466b69bd6dc6dd9566aff175cb8aadc846241d100378bdb1d9a4ea47196d9f660d308954ed8a2c725c4f6f4616e9cf108abb5efd766ad9bc7c9af35@3.39.127.36:30303\", \"enode://9b086682cfd01ac2223700676d718eb5a7945c6200ca113d0555c4aebec3ee19a6161a88fbee50662254976d9a97c4c5b7e50f55bfbf7ed598cd8c5c078dbd7d@54.180.121.94:30303\", \"enode://b39fd722a26cf48c6b055b0eed5b49c98d420d546d3419ff6a2499ddd190aa5a4e7371343d63a0150e7695bb42387b3d6837f99a49db8f05d78fc775689e2210@15.164.170.19:30303\", \"enode://c08fdd44bc3e09267321a99c6057ec870d5bcb1e3b5ecf7ef48158881abc99d1cca2174328e80917003c1ee27908792badc148a80dc3bdee365c748fcd046723@54.180.93.83:30303\" ] You can also add static nodes at runtime via the js console using admin.addPeer(): admin.addPeer( \"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\" ) Add Trusted nodes Geth supports trusted nodes that are always allowed to reconnect, even if the peer limit is reached. They can be added permanently via a config file <datadir>/geth/trusted-nodes.json or temporary via RPC call.","title":"Common Problems With Connectivity"},{"location":"biznet/develop/running_node/node/#sync-mode","text":"Fast Sync The default sync mode. Synchronizes a node doing a fast synchronization by downloading the entire state database, requesting the headers first, and filling in block bodies and receipts afterward. Once the fast sync reaches the best block of the BizNet network, it switches to full sync mode. Full Sync Synchronizes a node starting at genesis, verifying all blocks and executing all transactions. This mode is a bit slower than the fast sync mode but comes with increased security.","title":"Sync Mode"},{"location":"biznet/develop/running_node/node/#steps-to-run-a-node","text":"","title":"Steps to Run a Node"},{"location":"biznet/develop/running_node/node/#sync-from-snapshot","text":"This is being prepared.","title":"Sync From Snapshot"},{"location":"biznet/develop/running_node/node/#sync-from-genesis-block","text":"1.Build from source code Make sure that you have installed Go 1.18+ and have added GOPATH to PATH environment variable git clone https://github.com/bosagora/go-ethereum # Enter the folder go-ethereum was cloned into cd go-ethereum # Compile and install go-ethereum make geth or you can download the pre-build binaries from release page or follow the instructions below: # Linux wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep linux |cut -d\\\" -f4) unzip linux.zip # MacOS wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep mac |cut -d\\\" -f4) unzip mac.zip 2.Download the config files Download genesis.json and config.toml by: ## mainet wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep mainnet |cut -d\\\" -f4) unzip mainnet.zip ## testnet wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep testnet |cut -d\\\" -f4) unzip testnet.zip 3.Write genesis state locally geth --datadir node init genesis.json You could see the following output: INFO [05-19|14:53:17.468] Allocated cache and file handles database=/Users/michael/Downloads/go-ethereum/node/geth/chaindata cache=16.00MiB handles=16 INFO [05-19|14:53:17.498] Writing custom genesis block INFO [05-19|14:53:17.501] Persisted trie from memory database nodes=21 size=56.84KiB time=357.915\u00b5s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=-574.00B INFO [05-19|14:53:17.502] Successfully wrote genesis state database=chaindata hash=7d79cc\u2026fb0d1e INFO [05-19|14:53:17.503] Allocated cache and file handles database=/Users/michael/Downloads/go-ethereum/node/geth/lightchaindata cache=16.00MiB handles=16 INFO [05-19|14:53:17.524] Writing custom genesis block INFO [05-19|14:53:17.525] Persisted trie from memory database nodes=21 size=56.84KiB time=638.396\u00b5s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=-574.00B INFO [05-19|14:53:17.528] Successfully wrote genesis state database=lightchaindata hash=7d79cc\u2026fb0d1e 4.Start your node ## start a node geth --config ./config.toml --datadir ./node","title":"Sync From Genesis Block"},{"location":"biznet/develop/running_node/node/#node-maintainence","text":"","title":"Node Maintainence"},{"location":"biznet/develop/running_node/node/#binary","text":"All the clients are suggested to upgrade to the latest release. The latest version is supposed to be more stable and get better performance.","title":"Binary"},{"location":"biznet/develop/running_node/node/#storage","text":"According to the test, the performance of a node will degrade when the storage size exceeds 1.5T. We suggest the node always keep light storage by pruning the storage. How to prune: Stop the node. Run nohup geth snapshot prune-state --datadir {the data dir of your node} & . It will take 3-5 hours to finish. Start the node once it is done. The maintainers should always have a few backup nodes. The hardware is also important, make sure the SSD meets: 2T GB of free disk space, solid-state drive(SSD), gp3, 8k IOPS, 250MB/S throughput, read latency <1ms .","title":"Storage"},{"location":"biznet/develop/running_node/node/#upgrade-geth","text":"Please read this guide","title":"Upgrade Geth"},{"location":"biznet/develop/running_node/upgrading/","text":"How to Upgrade Geth Updating geth is as easy as it gets. You just need to download and install the newer version of geth , shutdown your node and restart with the new software. Geth will automatically use the data of your old node and sync the latest blocks that were mined since you shut down the old software. Step 1: Compile the New Version git clone https://github.com/bosagora/go-ethereum # Enter the folder go-ethereum was cloned into cd go-ethereum # Comile and install go-ethereum make geth Step 2: Stop Geth $ pid=`ps -ef | grep geth | grep -v grep | awk '{print $2}'` $ kill $pid Step 3: Restart ## start a node geth --config ./config.toml --datadir ./node --syncmode snap","title":"Upgrading Geth"},{"location":"biznet/develop/running_node/upgrading/#how-to-upgrade-geth","text":"Updating geth is as easy as it gets. You just need to download and install the newer version of geth , shutdown your node and restart with the new software. Geth will automatically use the data of your old node and sync the latest blocks that were mined since you shut down the old software.","title":"How to Upgrade Geth"},{"location":"biznet/develop/running_node/upgrading/#step-1-compile-the-new-version","text":"git clone https://github.com/bosagora/go-ethereum # Enter the folder go-ethereum was cloned into cd go-ethereum # Comile and install go-ethereum make geth","title":"Step 1: Compile the New Version"},{"location":"biznet/develop/running_node/upgrading/#step-2-stop-geth","text":"$ pid=`ps -ef | grep geth | grep -v grep | awk '{print $2}'` $ kill $pid","title":"Step 2: Stop Geth"},{"location":"biznet/develop/running_node/upgrading/#step-3-restart","text":"## start a node geth --config ./config.toml --datadir ./node --syncmode snap","title":"Step 3: Restart"},{"location":"biznet/develop/token/intoroduction/","text":"ERC20 Token Introduction A ERC20 token must implement the interface IERC20 in IERC20.sol . This is a template contract ERC20Token.template . Users just need to fill in _name , _symbol , _decimals and _totalSupply according to their own requirements: constructor() public { _name = {{TOKEN_NAME}}; _symbol = {{TOKEN_SYMBOL}}; _decimals = {{DECIMALS}}; _totalSupply = {{TOTAL_SUPPLY}}; _balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); } Then users can use Remix IDE and Metamask to compile and deploy the ERC20 contract to BizNet. Interact with Contract with Web3 and NodeJS. Connect to BizNet's public RPC endpoint const Web3 = require('web3'); // mainnet const web3 = new Web3('https://mainnet.bosagora.org'); // testnet const web3 = new Web3('https://testnet.bosagora.org'); Create a Wallet web3.eth.accounts.create([entropy]); Output: web3.eth.accounts.create(); { address: '0x926605D0729a968266f1BB299d8Df0471C4F5367', privateKey: '0x6b4618539d95f205f33e916e89404b301dde545c0c4acc181fd0c0b42708bad3', signTransaction: [Function: signTransaction], sign: [Function: sign], encrypt: [Function: encrypt] } Recover a Wallet const account = web3.eth.accounts.privateKeyToAccount(\"0xe500f5754d761d74c3eb6c2566f4c568b81379bf5ce9c1ecd475d40efe23c577\") Check Balance web3.eth.getBalance(holder).then(console.log); Output: The balance will be bumped by e18 for BOA. 6249621999900000000 Create Transaction Parameters Object - The transaction object to send: from - String|Number: The address for the sending account. Uses the web3.eth.defaultAccount property, if not specified. Or an address or index of a local wallet in web3.eth.accounts.wallet. to - String: (optional) The destination address of the message, left undefined for a contract-creation transaction. value - Number|String|BN|BigNumber: (optional) The value transferred for the transaction in wei, also the endowment if it\u2019s a contract-creation transaction. gas - Number: (optional, default: To-Be-Determined) The amount of gas to use for the transaction (unused gas is refunded). gasPrice - Number|String|BN|BigNumber: (optional) The price of gas for this transaction in wei, defaults to web3.eth.gasPrice. data - String: (optional) Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code. nonce - Number: (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. // // Make a transaction using the promise web3.eth.sendTransaction({ from: holder, to: '0x0B75fbeB0BC7CC0e9F9880f78a245046eCBDBB0D', value: '1000000000000000000', gas: 5000000, gasPrice: 18e9, }, function(err, transactionHash) { if (err) { console.log(err); } else { console.log(transactionHash); } });","title":"Introduction"},{"location":"biznet/develop/token/intoroduction/#erc20-token-introduction","text":"A ERC20 token must implement the interface IERC20 in IERC20.sol . This is a template contract ERC20Token.template . Users just need to fill in _name , _symbol , _decimals and _totalSupply according to their own requirements: constructor() public { _name = {{TOKEN_NAME}}; _symbol = {{TOKEN_SYMBOL}}; _decimals = {{DECIMALS}}; _totalSupply = {{TOTAL_SUPPLY}}; _balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); } Then users can use Remix IDE and Metamask to compile and deploy the ERC20 contract to BizNet.","title":"ERC20 Token Introduction"},{"location":"biznet/develop/token/intoroduction/#interact-with-contract-with-web3-and-nodejs","text":"","title":"Interact with Contract with Web3 and NodeJS."},{"location":"biznet/develop/token/intoroduction/#connect-to-biznets-public-rpc-endpoint","text":"const Web3 = require('web3'); // mainnet const web3 = new Web3('https://mainnet.bosagora.org'); // testnet const web3 = new Web3('https://testnet.bosagora.org');","title":"Connect to BizNet's public RPC endpoint"},{"location":"biznet/develop/token/intoroduction/#create-a-wallet","text":"web3.eth.accounts.create([entropy]); Output: web3.eth.accounts.create(); { address: '0x926605D0729a968266f1BB299d8Df0471C4F5367', privateKey: '0x6b4618539d95f205f33e916e89404b301dde545c0c4acc181fd0c0b42708bad3', signTransaction: [Function: signTransaction], sign: [Function: sign], encrypt: [Function: encrypt] }","title":"Create a Wallet"},{"location":"biznet/develop/token/intoroduction/#recover-a-wallet","text":"const account = web3.eth.accounts.privateKeyToAccount(\"0xe500f5754d761d74c3eb6c2566f4c568b81379bf5ce9c1ecd475d40efe23c577\")","title":"Recover a Wallet"},{"location":"biznet/develop/token/intoroduction/#check-balance","text":"web3.eth.getBalance(holder).then(console.log); Output: The balance will be bumped by e18 for BOA. 6249621999900000000","title":"Check Balance"},{"location":"biznet/develop/token/intoroduction/#create-transaction","text":"Parameters Object - The transaction object to send: from - String|Number: The address for the sending account. Uses the web3.eth.defaultAccount property, if not specified. Or an address or index of a local wallet in web3.eth.accounts.wallet. to - String: (optional) The destination address of the message, left undefined for a contract-creation transaction. value - Number|String|BN|BigNumber: (optional) The value transferred for the transaction in wei, also the endowment if it\u2019s a contract-creation transaction. gas - Number: (optional, default: To-Be-Determined) The amount of gas to use for the transaction (unused gas is refunded). gasPrice - Number|String|BN|BigNumber: (optional) The price of gas for this transaction in wei, defaults to web3.eth.gasPrice. data - String: (optional) Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code. nonce - Number: (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. // // Make a transaction using the promise web3.eth.sendTransaction({ from: holder, to: '0x0B75fbeB0BC7CC0e9F9880f78a245046eCBDBB0D', value: '1000000000000000000', gas: 5000000, gasPrice: 18e9, }, function(err, transactionHash) { if (err) { console.log(err); } else { console.log(transactionHash); } });","title":"Create Transaction"},{"location":"biznet/develop/token/issue/","text":"Issue ERC20 Tokens Compile and Deploy ERC20 Contract 1.Open Remix IDE: https://remix.ethereum.org 2.Select solidity language 3.Create new contract ERC20Token.sol and copy contract code from the ERC20 token template here 4.Modify \"name\", \"symbol\", \"decimals\" and \"totalSupply\" according to your requirements. 5.Compile the ERC20 token contract Step1: Click button to switch to compile page Step2: Select \"ERC20Token\" contract Step3: Enable \"Auto compile\" and \"optimization\" Step4: Click \"ABI\" to copy the contract abi and save it. 6.Deploy the contract to BizNet Step1: Click button to switch to compile button. Step2: Select \"Injected Web3\" Step3: Select \"ERC20Token\" Step4: Client \"Deploy\" button and Metamask will pop up Step5: Client \"confirm\" button to sign and broadcast transaction to BizNet.","title":"Issue Token"},{"location":"biznet/develop/token/issue/#issue-erc20-tokens","text":"","title":"Issue ERC20 Tokens"},{"location":"biznet/develop/token/issue/#compile-and-deploy-erc20-contract","text":"1.Open Remix IDE: https://remix.ethereum.org 2.Select solidity language 3.Create new contract ERC20Token.sol and copy contract code from the ERC20 token template here 4.Modify \"name\", \"symbol\", \"decimals\" and \"totalSupply\" according to your requirements. 5.Compile the ERC20 token contract Step1: Click button to switch to compile page Step2: Select \"ERC20Token\" contract Step3: Enable \"Auto compile\" and \"optimization\" Step4: Click \"ABI\" to copy the contract abi and save it. 6.Deploy the contract to BizNet Step1: Click button to switch to compile button. Step2: Select \"Injected Web3\" Step3: Select \"ERC20Token\" Step4: Client \"Deploy\" button and Metamask will pop up Step5: Client \"confirm\" button to sign and broadcast transaction to BizNet.","title":"Compile and Deploy ERC20 Contract"},{"location":"biznet/wallet/guide/","text":"Wallet Guide What is a Wallet? A crypto wallet is a device or program used for transfer and storage of cryptocurrency. Crypto wallets can be of different types, such as paper wallets, hardware wallets, and software wallets. There are also several smartphone mobile apps and computer programs that provide a user-friendly way to create and manage wallets. Along with crytocurreny, crypto wallets store a collection of crypto keys that are used for sending, receiving, and taracking ownership of cryptocurrencies. A keypair is a cryptographically-derived securely generated private and public keys. A private key and its corresponding public key are together known as a keypair. A wallet contains a collection of one or more keypairs and provides some means to interact with them. The security of any crypto wallet depends upon how the private key is stored. The public key is known as the wallet's receiving address or simply its address. The wallet address may be shared and displayed freely. When another party is going to send some amount of cryptocurrency to a wallet, they need to know the wallet's receiving address. Depending on a blockchain's implementation, the address can also be used to view certain information about a wallet, such as viewing the balance, but has no ability to change anything about the wallet or withdraw any tokens. In order to send cryptocurrencies to another address or to make any changes to the wallet, the private key is used for digitally signing the transactions. It is important to note that the private key must never be shared and should always be kept securely. If by any means access is gained to the private key attached to a wallet, the attacker can withdraw all the tokens contained. Furthermore, if the private key for a wallet is lost, any tokens that have been sent to or stored in that wallet's address are permanently lost. If you want to be able to receive BOA and other supported tokens on the BizNet blockchain, you will first need to create a wallet and configure key management . Supported Wallets List of Wallets Supporting BizNet Number Wallet Name Website 1 MetaMask https://metamask.zendesk.com/hc/en-us","title":"Guide"},{"location":"biznet/wallet/guide/#wallet-guide","text":"","title":"Wallet Guide"},{"location":"biznet/wallet/guide/#what-is-a-wallet","text":"A crypto wallet is a device or program used for transfer and storage of cryptocurrency. Crypto wallets can be of different types, such as paper wallets, hardware wallets, and software wallets. There are also several smartphone mobile apps and computer programs that provide a user-friendly way to create and manage wallets. Along with crytocurreny, crypto wallets store a collection of crypto keys that are used for sending, receiving, and taracking ownership of cryptocurrencies. A keypair is a cryptographically-derived securely generated private and public keys. A private key and its corresponding public key are together known as a keypair. A wallet contains a collection of one or more keypairs and provides some means to interact with them. The security of any crypto wallet depends upon how the private key is stored. The public key is known as the wallet's receiving address or simply its address. The wallet address may be shared and displayed freely. When another party is going to send some amount of cryptocurrency to a wallet, they need to know the wallet's receiving address. Depending on a blockchain's implementation, the address can also be used to view certain information about a wallet, such as viewing the balance, but has no ability to change anything about the wallet or withdraw any tokens. In order to send cryptocurrencies to another address or to make any changes to the wallet, the private key is used for digitally signing the transactions. It is important to note that the private key must never be shared and should always be kept securely. If by any means access is gained to the private key attached to a wallet, the attacker can withdraw all the tokens contained. Furthermore, if the private key for a wallet is lost, any tokens that have been sent to or stored in that wallet's address are permanently lost. If you want to be able to receive BOA and other supported tokens on the BizNet blockchain, you will first need to create a wallet and configure key management .","title":"What is a Wallet?"},{"location":"biznet/wallet/guide/#supported-wallets","text":"List of Wallets Supporting BizNet Number Wallet Name Website 1 MetaMask https://metamask.zendesk.com/hc/en-us","title":"Supported Wallets"},{"location":"biznet/wallet/key-management/","text":"Key Management This article is a guide about key management strategy on client side of your Decentralised Application on BizNet Setup Web3 web3.js is a javascript library that allows our client-side application to talk to the blockchain. We configure web3 to communicate via Metamask. web3.js doc is here Connect to BizNet network // mainnet const web3 = new Web3('https://mainnet.bosagora.org'); // testnet const web3 = new Web3('https://testnet.bosagora.org'); Set up account If the installation and instantiation of web3 was successful, the following should successfully return a random account: const account = web3.eth.accounts.create(); Recover account If you have backup the private key of your account, you can use it to restore your account. const account = web3.eth.accounts.privateKeyToAccount(\"$private-key\") Full Example const Web3 = require('web3'); async function main() { const web3 = new Web3('https://mainnet.bosagora.org:443'); const loader = setupLoader({ provider: web3 }).web3; const account = web3.eth.accounts.create(); console.log(account); }","title":"Key Management"},{"location":"biznet/wallet/key-management/#key-management","text":"This article is a guide about key management strategy on client side of your Decentralised Application on BizNet","title":"Key Management"},{"location":"biznet/wallet/key-management/#setup-web3","text":"web3.js is a javascript library that allows our client-side application to talk to the blockchain. We configure web3 to communicate via Metamask. web3.js doc is here","title":"Setup Web3"},{"location":"biznet/wallet/key-management/#connect-to-biznet-network","text":"// mainnet const web3 = new Web3('https://mainnet.bosagora.org'); // testnet const web3 = new Web3('https://testnet.bosagora.org');","title":"Connect to BizNet network"},{"location":"biznet/wallet/key-management/#set-up-account","text":"If the installation and instantiation of web3 was successful, the following should successfully return a random account: const account = web3.eth.accounts.create();","title":"Set up account"},{"location":"biznet/wallet/key-management/#recover-account","text":"If you have backup the private key of your account, you can use it to restore your account. const account = web3.eth.accounts.privateKeyToAccount(\"$private-key\")","title":"Recover account"},{"location":"biznet/wallet/key-management/#full-example","text":"const Web3 = require('web3'); async function main() { const web3 = new Web3('https://mainnet.bosagora.org:443'); const loader = setupLoader({ provider: web3 }).web3; const account = web3.eth.accounts.create(); console.log(account); }","title":"Full Example"},{"location":"biznet/wallet/tutorials/metamask/","text":"Use MetaMask For BizNet Tip If you encounter any network configuration issues in MetaMask, please make sure you have the latest version running. What is it? MetaMask was created out of the needs of creating more secure and usable Ethereum-based web sites. In particular, it handles account management and connecting the user to the blockchain. It\u2019s supported in Chrome, and Safari browsers. Install Example: Install MetaMask in Chrome browser Chrome Webstore MetaMask : https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn warning Note: Make sure it\u2019s offered by metamask.io Click on \"Add to Chrome\" That\u2019s it! You have successfully installed MetaMask extension in Chrome! Tip The workflow is the same for all browsers Create an account in MetaMask for BizNet 1.Click on the \"Create a wallet\" button 2.Create Password of at least 8 characters 3.Click on \"Create\" and then write down your backup phrase. Please use paper and pen to fill it out and store it in a separate space. 4.Select each phrase in order to make sure it is correct then click \"Confirm\". Congratulations! you have creat your MetaMask account! Connect Your MetaMask With BizNet 1.Go to setting page Alternatively, click the Select Network button marked \"Ethereum Mainnet\". 2.Add a new network Mainnet RPC URLs : https://mainnet.bosagora.org ChainID: 2151 (0x867) Symbol: BOA Block Explorer : https://scan.bosagora.org Testnet RPC URLs : https://testnet.bosagora.org ChainID: 2019 (0x7E3) Symbol: BOA Block Explorer : https://testnet-scan.bosagora.org Transfer BOA to other BizNet address 1.Log in to your MetaMask 2.Click on Send button 3.Copy the receiver\u2019s address in the box 4.Input the amount 5.Confirm your transaction, then click Next 6.Click Confirm to send your transaction 7.Wait for your transaction to be included in the new block 8.Once your transaction is confirmed, check it on block explorer by clicking Details 9.Click on your account to see \"Details'' 10.Verify your transaction in Explorer: Add ERC20 Tokens 1.In MetaMask, Click on \"Import Tokens\" 2.Choose \"Custom Token\" and copy the contract address in the box 3.Click on \"Add Custom Tokens\" 4.Then you can see change of your balance Create Multiple Accounts 1.To create multiple accounts, you click on Profile icon on MetaMask and then click on Create Account 2.You can then add an account name and click on Create. 3.Then you can see a new account is created!","title":"Metamask"},{"location":"biznet/wallet/tutorials/metamask/#use-metamask-for-biznet","text":"Tip If you encounter any network configuration issues in MetaMask, please make sure you have the latest version running.","title":"Use MetaMask For BizNet"},{"location":"biznet/wallet/tutorials/metamask/#what-is-it","text":"MetaMask was created out of the needs of creating more secure and usable Ethereum-based web sites. In particular, it handles account management and connecting the user to the blockchain. It\u2019s supported in Chrome, and Safari browsers.","title":"What is it?"},{"location":"biznet/wallet/tutorials/metamask/#install","text":"Example: Install MetaMask in Chrome browser Chrome Webstore MetaMask : https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn warning Note: Make sure it\u2019s offered by metamask.io Click on \"Add to Chrome\" That\u2019s it! You have successfully installed MetaMask extension in Chrome! Tip The workflow is the same for all browsers","title":"Install"},{"location":"biznet/wallet/tutorials/metamask/#create-an-account-in-metamask-for-biznet","text":"1.Click on the \"Create a wallet\" button 2.Create Password of at least 8 characters 3.Click on \"Create\" and then write down your backup phrase. Please use paper and pen to fill it out and store it in a separate space. 4.Select each phrase in order to make sure it is correct then click \"Confirm\". Congratulations! you have creat your MetaMask account!","title":"Create an account in MetaMask for BizNet"},{"location":"biznet/wallet/tutorials/metamask/#connect-your-metamask-with-biznet","text":"1.Go to setting page Alternatively, click the Select Network button marked \"Ethereum Mainnet\". 2.Add a new network Mainnet RPC URLs : https://mainnet.bosagora.org ChainID: 2151 (0x867) Symbol: BOA Block Explorer : https://scan.bosagora.org Testnet RPC URLs : https://testnet.bosagora.org ChainID: 2019 (0x7E3) Symbol: BOA Block Explorer : https://testnet-scan.bosagora.org","title":"Connect Your MetaMask With BizNet"},{"location":"biznet/wallet/tutorials/metamask/#transfer-boa-to-other-biznet-address","text":"1.Log in to your MetaMask 2.Click on Send button 3.Copy the receiver\u2019s address in the box 4.Input the amount 5.Confirm your transaction, then click Next 6.Click Confirm to send your transaction 7.Wait for your transaction to be included in the new block 8.Once your transaction is confirmed, check it on block explorer by clicking Details 9.Click on your account to see \"Details'' 10.Verify your transaction in Explorer:","title":"Transfer BOA to other BizNet address"},{"location":"biznet/wallet/tutorials/metamask/#add-erc20-tokens","text":"1.In MetaMask, Click on \"Import Tokens\" 2.Choose \"Custom Token\" and copy the contract address in the box 3.Click on \"Add Custom Tokens\" 4.Then you can see change of your balance","title":"Add ERC20 Tokens"},{"location":"biznet/wallet/tutorials/metamask/#create-multiple-accounts","text":"1.To create multiple accounts, you click on Profile icon on MetaMask and then click on Create Account 2.You can then add an account name and click on Create. 3.Then you can see a new account is created!","title":"Create Multiple Accounts"},{"location":"boa_swap/introduction/","text":"Introduction of BOASwap What is BOASwap ? The areas provided by BOASwap can be divided into My Assets, Swap, Pool, and Bridge. First, let\u2019s explain the names used in the BOASwap. BizNet : It is a reliable BOASAGORA blockchain network composed of multiple nodes that achieve consensus with the POA consensus algorithm. Smart contracts can be executed with BizNet\u2019s Ethereum Virtual Machine (EVM) support, so compatible DApps running on Ethereum can also be contracted on BizNet. BOASwap DEX Protocol : A continuous, non-upgradable smart contract that creates an automated market maker facilitating the formation and exchange of the P2P market for ERC-20 tokens on Agora BizNet. BOASwap Bridge Protocol : An atomic swap smart contract that allows reliable swaps between Ethereum Mainnet and Agora BizNet. Coins can be swapped while fixing the supply of BOA coins through pegging and de-pegging. BOASwap Bridge relay node : It operates as a bridge relay node connected to each network of Ethereum Mainnet and Agora BizNet. It supports atomic swap of bridge protocols to run on each network. BOASwap Interfaces: Web interface that allows easy interaction with BOASwap DEX Protocol and Bridge Protocol. The interface is one of many ways to interact with BOASwap protocols. BOASwap My Assets The assets shown here show the coins and tokens that you have on the network that you are currently connected to. Tokens and points that can be displayed are tokens with the ERC-20 token standard and they can be trusted if they are managed in a separate list. In order for My Assets to display the tokens you have, your Metamask wallet must be connected to the Agora BizNet network. You must also have a trusted connection with BOASwap. Swap Token swapping in BOASwap is a simple way to exchange one ERC-20 token with another. The user selects an input token and an output token. This specifies the input amount and the protocol calculates the amount of output tokens they will receive. You can then run the swap with a single click and receive the output token in your wallet immediately. Pool The BOASwap Pool is a liquidity pool for the BOASwap DEX Protocol. Each BOASwap Liquidity Pool is a trading place for a pair of ERC20 tokens. For Pool to facilitate transactions, someone must supply the pool with an initial deposit of each token. This sets the initial price of the pool. Bridge It connects Ethereum Mainnet and BizNet blockchain and allows an intermediary transaction. Currently, BOA tokens are supported for coin transfer from Ethereum Mainnet to BizNet, and this transaction is possible for two-way transactions (two-way pegging). BOA Ethereum MainNet ERC20 BOA : 0x746DdA2ea243400D5a63e0700F190aB79f06489e It is an ERC20 smart contract token on the Ethereum network and is currently listed on the Coin Exchange. BOSAGORA BizNet BOA : It is the default currency for BizNet networks and is used for value exchange and network gas fee. Ethereum MainNet ERC20 BOA and BizNet BOA exchange rate is 1BOA = 1BOA","title":"Introduction"},{"location":"boa_swap/introduction/#introduction-of-boaswap","text":"","title":"Introduction of BOASwap"},{"location":"boa_swap/introduction/#what-is-boaswap","text":"The areas provided by BOASwap can be divided into My Assets, Swap, Pool, and Bridge. First, let\u2019s explain the names used in the BOASwap. BizNet : It is a reliable BOASAGORA blockchain network composed of multiple nodes that achieve consensus with the POA consensus algorithm. Smart contracts can be executed with BizNet\u2019s Ethereum Virtual Machine (EVM) support, so compatible DApps running on Ethereum can also be contracted on BizNet. BOASwap DEX Protocol : A continuous, non-upgradable smart contract that creates an automated market maker facilitating the formation and exchange of the P2P market for ERC-20 tokens on Agora BizNet. BOASwap Bridge Protocol : An atomic swap smart contract that allows reliable swaps between Ethereum Mainnet and Agora BizNet. Coins can be swapped while fixing the supply of BOA coins through pegging and de-pegging. BOASwap Bridge relay node : It operates as a bridge relay node connected to each network of Ethereum Mainnet and Agora BizNet. It supports atomic swap of bridge protocols to run on each network. BOASwap Interfaces: Web interface that allows easy interaction with BOASwap DEX Protocol and Bridge Protocol. The interface is one of many ways to interact with BOASwap protocols.","title":"What is BOASwap ?"},{"location":"boa_swap/introduction/#boaswap","text":"","title":"BOASwap"},{"location":"boa_swap/introduction/#my-assets","text":"The assets shown here show the coins and tokens that you have on the network that you are currently connected to. Tokens and points that can be displayed are tokens with the ERC-20 token standard and they can be trusted if they are managed in a separate list. In order for My Assets to display the tokens you have, your Metamask wallet must be connected to the Agora BizNet network. You must also have a trusted connection with BOASwap.","title":"My Assets"},{"location":"boa_swap/introduction/#swap","text":"Token swapping in BOASwap is a simple way to exchange one ERC-20 token with another. The user selects an input token and an output token. This specifies the input amount and the protocol calculates the amount of output tokens they will receive. You can then run the swap with a single click and receive the output token in your wallet immediately.","title":"Swap"},{"location":"boa_swap/introduction/#pool","text":"The BOASwap Pool is a liquidity pool for the BOASwap DEX Protocol. Each BOASwap Liquidity Pool is a trading place for a pair of ERC20 tokens. For Pool to facilitate transactions, someone must supply the pool with an initial deposit of each token. This sets the initial price of the pool.","title":"Pool"},{"location":"boa_swap/introduction/#bridge","text":"It connects Ethereum Mainnet and BizNet blockchain and allows an intermediary transaction. Currently, BOA tokens are supported for coin transfer from Ethereum Mainnet to BizNet, and this transaction is possible for two-way transactions (two-way pegging).","title":"Bridge"},{"location":"boa_swap/introduction/#boa","text":"Ethereum MainNet ERC20 BOA : 0x746DdA2ea243400D5a63e0700F190aB79f06489e It is an ERC20 smart contract token on the Ethereum network and is currently listed on the Coin Exchange. BOSAGORA BizNet BOA : It is the default currency for BizNet networks and is used for value exchange and network gas fee. Ethereum MainNet ERC20 BOA and BizNet BOA exchange rate is 1BOA = 1BOA","title":"BOA"},{"location":"boa_swap/bridge/bridge/","text":"Bridge Bridge links them between Ethereum MainNet and BizNet's respective blockchain and mediates transactions. Currently, BOA tokens are supported for coin transfer from Ethereum MainNet to BizNet, and this transaction is possible for two-way transactions (two-way pegging). Performs a complete exchange with an atomic swap algorithm. Ethereum MainNet ERC20 BOA and BizNet BOA exchange rates are 1BOA \u2248 1BOA. In each network, the issuance is pegging and defagging, and the total coin issuance is fixed. Bridge Process Flow Chart Ethereum MainNet -> BOSAGORA BizNet BOSAGORA BizNet -> Ethereum MainNet","title":"Introduction"},{"location":"boa_swap/bridge/bridge/#bridge","text":"Bridge links them between Ethereum MainNet and BizNet's respective blockchain and mediates transactions. Currently, BOA tokens are supported for coin transfer from Ethereum MainNet to BizNet, and this transaction is possible for two-way transactions (two-way pegging). Performs a complete exchange with an atomic swap algorithm. Ethereum MainNet ERC20 BOA and BizNet BOA exchange rates are 1BOA \u2248 1BOA. In each network, the issuance is pegging and defagging, and the total coin issuance is fixed. Bridge Process Flow Chart Ethereum MainNet -> BOSAGORA BizNet BOSAGORA BizNet -> Ethereum MainNet","title":"Bridge"},{"location":"boa_swap/bridge/use-bridge/","text":"How to use a Bridge BOASwap Bridge Connect to using a Chrome browser. The MetaMask (Wallet) must be installed and connected before using the Bridge. Since the bridge supports bidirectional transmission, It will first explain the scenario of transferring from Ethereum Mainnet ERC20 BOA to BOSAGORA BizNet BOA. Select the departure network first. In this case, select Ethereum Mainnet. The requirement is a small amount of gas ratio ETH and ERC20 BOA to be transmitted to Ethereum Mainnet. The bridge requires between 5 and 10 minutes to run. Do not close the browser while running the Bridge. From Confirm that network Ethreum Mainnet is selected, balance the ERC20 BOA, and enter the amount of BOA to be sent to BizNet network. The maximum input amount must be entered as much as the holding amount before transmission. Transfer amount - (Fee + Gas Tokens for use) = Amount received Please note that the exchange rate is 1 BOA = 1 BOA, but the fee will be deducted to measure the amount received by the arrival network because the Atomic swap algorithm generates gas costs in each network. Click Approve BOA to approve. This is to approve withdrawal from the smart contract. Click the \"OK\" button on the METAMASK for Approve. In BOASwap, when a transaction is confirmed, an Approved BOA message is displayed in the upper right corner. Click the \"Transfer\" button to transfer the BOA to the arrival network using the Bridge. Check the amount to be sent and the amount to be delivered, check the fee, and click the \"Confirm Bridge\" button. Click the \"OK\" button on the METAMASK to execute the Bridge Contract. \"Transaction Submitted\" Check the pop-up and wait for 5 to 10 minutes in the Pending state. Please do not move the browser address during the Pending state and wait. BOASwap needs to generate and submit a secret key, check the Bridge relay node, and run the Bridge protocol. If the Close button is visible, this process is complete. Click the \"Close\" button. Go to the MyAssets menu and change to BizNet network. Check if your BOSAGORA BOA has been deposited well.","title":"How to use Bridge"},{"location":"boa_swap/bridge/use-bridge/#how-to-use-a-bridge","text":"BOASwap Bridge Connect to using a Chrome browser. The MetaMask (Wallet) must be installed and connected before using the Bridge. Since the bridge supports bidirectional transmission, It will first explain the scenario of transferring from Ethereum Mainnet ERC20 BOA to BOSAGORA BizNet BOA. Select the departure network first. In this case, select Ethereum Mainnet. The requirement is a small amount of gas ratio ETH and ERC20 BOA to be transmitted to Ethereum Mainnet. The bridge requires between 5 and 10 minutes to run. Do not close the browser while running the Bridge. From Confirm that network Ethreum Mainnet is selected, balance the ERC20 BOA, and enter the amount of BOA to be sent to BizNet network. The maximum input amount must be entered as much as the holding amount before transmission. Transfer amount - (Fee + Gas Tokens for use) = Amount received Please note that the exchange rate is 1 BOA = 1 BOA, but the fee will be deducted to measure the amount received by the arrival network because the Atomic swap algorithm generates gas costs in each network. Click Approve BOA to approve. This is to approve withdrawal from the smart contract. Click the \"OK\" button on the METAMASK for Approve. In BOASwap, when a transaction is confirmed, an Approved BOA message is displayed in the upper right corner. Click the \"Transfer\" button to transfer the BOA to the arrival network using the Bridge. Check the amount to be sent and the amount to be delivered, check the fee, and click the \"Confirm Bridge\" button. Click the \"OK\" button on the METAMASK to execute the Bridge Contract. \"Transaction Submitted\" Check the pop-up and wait for 5 to 10 minutes in the Pending state. Please do not move the browser address during the Pending state and wait. BOASwap needs to generate and submit a secret key, check the Bridge relay node, and run the Bridge protocol. If the Close button is visible, this process is complete. Click the \"Close\" button. Go to the MyAssets menu and change to BizNet network. Check if your BOSAGORA BOA has been deposited well.","title":"How to use a Bridge"},{"location":"boa_swap/myassets/myassets/","text":"My Assets Displays the trusted token list and point holding balance in BOASwap. The information displayed at the top shows the address of your wallet. Token lists are displayed separately by network chain. The Token List is listed here. https://github.com/bosagora/token-list","title":"Introduction"},{"location":"boa_swap/myassets/myassets/#my-assets","text":"Displays the trusted token list and point holding balance in BOASwap. The information displayed at the top shows the address of your wallet. Token lists are displayed separately by network chain. The Token List is listed here. https://github.com/bosagora/token-list","title":"My Assets"},{"location":"boa_swap/pool/pool/","text":"Pool The BOASwap Pool is a liquidity pool for the BOASwap DEX Protocol. Each BOASwap Liquidity Pool is a trading place for a pair of ERC20 tokens. For Pool to facilitate transactions, someone must supply the pool with an initial deposit of each token. This sets the initial price of the pool. Pool is a smart contract operated by a user invoking a function and invokes the function 'deposit' when providing liquidity. When other liquidity providers add to an existing pool, they must deposit pair tokens in proportion to the current price. Otherwise, the added liquidity also risks arbitrage. If you decide that the current price is not correct, you can make a profitable profit and add liquidity to that price.","title":"Introduction"},{"location":"boa_swap/pool/pool/#pool","text":"The BOASwap Pool is a liquidity pool for the BOASwap DEX Protocol. Each BOASwap Liquidity Pool is a trading place for a pair of ERC20 tokens. For Pool to facilitate transactions, someone must supply the pool with an initial deposit of each token. This sets the initial price of the pool. Pool is a smart contract operated by a user invoking a function and invokes the function 'deposit' when providing liquidity. When other liquidity providers add to an existing pool, they must deposit pair tokens in proportion to the current price. Otherwise, the added liquidity also risks arbitrage. If you decide that the current price is not correct, you can make a profitable profit and add liquidity to that price.","title":"Pool"},{"location":"boa_swap/swap/swap/","text":"Swap Guide Token swapping in BOASwap is a simple way to exchange one ERC-20 token with another. The user selects an input token and an output token. This specifies the input amount and the protocol calculates the amount of output tokens they will receive. Then, run the swap with one click and immediately receive the output token in your wallet. BOASwap does not use orders to indicate liquidity or determine prices. BOASwap uses an automated market maker mechanism to provide instant feedback on exchange rates and Sleepy. Each pair of BOASwap is actually supported by a pool of liquidity. A liquidity pool is a smart contract that holds the balance of two unique tokens and enforces the rules associated with depositing and withdrawing them. BOASwap DEX Protocol Overview Our BOASwap DEX Protocol basically follows Uniswap V2. BOASwap Protocol is a binary smart contract system. BOASwap Interfaces allow you to interact with the BOASwap DEX Protocol directly with smart contracts without relying on intermediaries or requiring permissions. Fees The token exchange fees is 1.5%. This fees is split to the liquidity providers in proportion to their contributions to the liquidity reserve. The exchange fees is immediately deposited to the liquidity reserve, which increases the value of the liquidity token and is used as a payment to all liquidity providers proportional to their share of the pool. The liquidity provider fees are collected by burning liquidity tokens and eliminating a proportional share of the underlying reserve. A protocol fees of 0.5% per transaction is applied to the liquidity providers. This is 1/3 of the token exchange fee. This fees does not affect the fees paid by traders, but it does affect the amount received by the liquidity providers. The protocol fees is calculated when liquidity is added or removed instead of calculating swap costs that can significantly increase gas costs for all users.","title":"Introduction"},{"location":"boa_swap/swap/swap/#swap-guide","text":"Token swapping in BOASwap is a simple way to exchange one ERC-20 token with another. The user selects an input token and an output token. This specifies the input amount and the protocol calculates the amount of output tokens they will receive. Then, run the swap with one click and immediately receive the output token in your wallet. BOASwap does not use orders to indicate liquidity or determine prices. BOASwap uses an automated market maker mechanism to provide instant feedback on exchange rates and Sleepy. Each pair of BOASwap is actually supported by a pool of liquidity. A liquidity pool is a smart contract that holds the balance of two unique tokens and enforces the rules associated with depositing and withdrawing them.","title":"Swap Guide"},{"location":"boa_swap/swap/swap/#boaswap-dex-protocol-overview","text":"Our BOASwap DEX Protocol basically follows Uniswap V2. BOASwap Protocol is a binary smart contract system. BOASwap Interfaces allow you to interact with the BOASwap DEX Protocol directly with smart contracts without relying on intermediaries or requiring permissions.","title":"BOASwap DEX Protocol Overview"},{"location":"boa_swap/swap/swap/#fees","text":"The token exchange fees is 1.5%. This fees is split to the liquidity providers in proportion to their contributions to the liquidity reserve. The exchange fees is immediately deposited to the liquidity reserve, which increases the value of the liquidity token and is used as a payment to all liquidity providers proportional to their share of the pool. The liquidity provider fees are collected by burning liquidity tokens and eliminating a proportional share of the underlying reserve. A protocol fees of 0.5% per transaction is applied to the liquidity providers. This is 1/3 of the token exchange fee. This fees does not affect the fees paid by traders, but it does affect the amount received by the liquidity providers. The protocol fees is calculated when liquidity is added or removed instead of calculating swap costs that can significantly increase gas costs for all users.","title":"Fees"},{"location":"boa_swap/swap/use-swap/","text":"How to use a Swap BOASwap Swap Connect to using a Chrome browser. Before using BOASwap, the MetaMask (Wallet) must be installed and connected. Explain the scenario of exchanging a BOSAGORA BizNet BOA for a demo token (ETK) in BOASwap. The current screenshot image is the situation of BizTestNet. The actual run must be run on BizNet. First, verify that the network is selected as BizNet and connected. The requirement is BOA from BizNet. The process is similar to the experience of using UNISwap. First, select the token that you want to exchange. Whether tokens are interchangeable or not can be different for each token and point. Non-exchangeable tokens are deactivated. Enter the amount to be exchanged. If you enter the input token amount amount at the top, the amount of tokens you will receive is determined by the liquidity price curve of the BOASwap DEX Protocol. The fees is measured at 1.5%, which is the sum of the liquidity provider fee and the protocol fee. Approve runs when swapping, and a small amount of network gas cost is required for swapping. The settings pop-up lets you set up Slippage Tolerance and Transaction Deadline. Slippage Tolerance represents the difference between the expected output and the actual output at the time the transaction was executed. If the price changes above the set slipage limit, the transaction will be canceled. Transaction deadline sets the default transaction closing to 20 minutes to prevent users from executing transactions at bad prices after significant price changes. If the gas price is not set high enough, the transaction may reach deadline. Check the transaction details again. Please check the amount of tokens to be exchanged. Price Impact indicates the impact of this transaction on the market price of the transaction pair. Once confirmed, click \"Swap Anyway\" to execute the swap. Check the gas bill for the swap transaction in the wallet and press the \"OK\" button to transfer the transaction. Your transaction has been submitted. Click \"Close\" to close the pop-up. You can check the swap results with a message in the upper right corner. You can check the token balance of the target you swapped from the My Assets menu.","title":"How to use Swap"},{"location":"boa_swap/swap/use-swap/#how-to-use-a-swap","text":"BOASwap Swap Connect to using a Chrome browser. Before using BOASwap, the MetaMask (Wallet) must be installed and connected. Explain the scenario of exchanging a BOSAGORA BizNet BOA for a demo token (ETK) in BOASwap. The current screenshot image is the situation of BizTestNet. The actual run must be run on BizNet. First, verify that the network is selected as BizNet and connected. The requirement is BOA from BizNet. The process is similar to the experience of using UNISwap. First, select the token that you want to exchange. Whether tokens are interchangeable or not can be different for each token and point. Non-exchangeable tokens are deactivated. Enter the amount to be exchanged. If you enter the input token amount amount at the top, the amount of tokens you will receive is determined by the liquidity price curve of the BOASwap DEX Protocol. The fees is measured at 1.5%, which is the sum of the liquidity provider fee and the protocol fee. Approve runs when swapping, and a small amount of network gas cost is required for swapping. The settings pop-up lets you set up Slippage Tolerance and Transaction Deadline. Slippage Tolerance represents the difference between the expected output and the actual output at the time the transaction was executed. If the price changes above the set slipage limit, the transaction will be canceled. Transaction deadline sets the default transaction closing to 20 minutes to prevent users from executing transactions at bad prices after significant price changes. If the gas price is not set high enough, the transaction may reach deadline. Check the transaction details again. Please check the amount of tokens to be exchanged. Price Impact indicates the impact of this transaction on the market price of the transaction pair. Once confirmed, click \"Swap Anyway\" to execute the swap. Check the gas bill for the swap transaction in the wallet and press the \"OK\" button to transfer the transaction. Your transaction has been submitted. Click \"Close\" to close the pop-up. You can check the swap results with a message in the upper right corner. You can check the token balance of the target you swapped from the My Assets menu.","title":"How to use a Swap"},{"location":"boa_swap/wallet/connectwallet/","text":"Connecting to a Wallet BOASwap Interfaces provides a UI to easily use BOASwap BOASwap supports MetaMask Wallet by default. MetaMask currently supports Chrome, Firefox, Edge, and more. BOASwap requires an extension plug-in installed in your PC browser by default. An upgrade is in progress for the current version to be available on the mobile web. You must add a BizNet network to the Metamask. You can add a network manually by pressing the Add Network button, or you can add it by automatically approving it as an add network notification in BOASwap. When adding an automatic network Click Connect to a wallet to connect your wallet. Click the Approve button. Click the Switch network button. About adding a manual network Network Name : BizNet New RPC URL : https://mainnet.bosagora.org Chain ID : 2151 Currency Symbol : BOA Block Explorer URL(Optional) : https://scan.bosagora.org The Metamask Wallet connects to BOASwap and the network connects to BizNet.","title":"Connecting to a Wallet"},{"location":"boa_swap/wallet/connectwallet/#connecting-to-a-wallet","text":"BOASwap Interfaces provides a UI to easily use BOASwap BOASwap supports MetaMask Wallet by default. MetaMask currently supports Chrome, Firefox, Edge, and more. BOASwap requires an extension plug-in installed in your PC browser by default. An upgrade is in progress for the current version to be available on the mobile web. You must add a BizNet network to the Metamask. You can add a network manually by pressing the Add Network button, or you can add it by automatically approving it as an add network notification in BOASwap. When adding an automatic network Click Connect to a wallet to connect your wallet. Click the Approve button. Click the Switch network button. About adding a manual network Network Name : BizNet New RPC URL : https://mainnet.bosagora.org Chain ID : 2151 Currency Symbol : BOA Block Explorer URL(Optional) : https://scan.bosagora.org The Metamask Wallet connects to BOASwap and the network connects to BizNet.","title":"Connecting to a Wallet"}]}