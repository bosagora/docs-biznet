{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"biznet/consensus/","text":"\ucee8\uc13c\uc11c\uc2a4 \uc5d4\uc9c4 \uc6b0\ub9ac\ub294 BizNet\uc758 \ucee8\uc13c\uc11c\uc2a4 \uc5d4\uc9c4\uc744 \uc124\uacc4\ud558\uc5ec \ub2e4\uc74c \ubaa9\ud45c\ub97c \ub2ec\uc131\ud558\ub294 \uac83\uc744 \ubaa9\ud45c\ub85c \ud569\ub2c8\ub2e4. \ube14\ub85d\uc758 \ud655\uc778\uc744 \uc704\ud574 \uba87 \ube14\ub85d\uc744 \uae30\ub2e4\ub9ac\uc2ed\uc2dc\uc624(Ethereum 1.0\ubcf4\ub2e4 \uc791\uc544\uc57c \ud568). \ube14\ub85d\uc0dd\uc131 \uc8fc\uae30\ub294 \uc774\ub354\ub9ac\uc6c0 \ub124\ud2b8\uc6cc\ud06c\uc640 \uac19\uc544\uc57c \ud569\ub2c8\ub2e4. \uc778\ud50c\ub808\uc774\uc158\uc740 \uc5c6\uace0, \ube14\ub85d \uc0dd\uc131\uc758 \ubcf4\uc0c1\uc740 \uac70\ub798 \uac00\uc2a4 \uc218\uc218\ub8cc\uc785\ub2c8\ub2e4. \uc774\ub354\ub9ac\uc6c0\ub9cc\ud07c \ud638\ud658\ub429\ub2c8\ub2e4. \ube14\ub85d\uccb4\uc778 \ub124\ud2b8\uc6cc\ud06c \uac70\ubc84\ub10c\uc2a4\ub97c \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c\ub294 POA\ub85c \uc2dc\uc791\ud558\uc5ec \uc810\ucc28 POS\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4.","title":"\ucee8\uc13c\uc11c\uc2a4"},{"location":"biznet/consensus/#_1","text":"\uc6b0\ub9ac\ub294 BizNet\uc758 \ucee8\uc13c\uc11c\uc2a4 \uc5d4\uc9c4\uc744 \uc124\uacc4\ud558\uc5ec \ub2e4\uc74c \ubaa9\ud45c\ub97c \ub2ec\uc131\ud558\ub294 \uac83\uc744 \ubaa9\ud45c\ub85c \ud569\ub2c8\ub2e4. \ube14\ub85d\uc758 \ud655\uc778\uc744 \uc704\ud574 \uba87 \ube14\ub85d\uc744 \uae30\ub2e4\ub9ac\uc2ed\uc2dc\uc624(Ethereum 1.0\ubcf4\ub2e4 \uc791\uc544\uc57c \ud568). \ube14\ub85d\uc0dd\uc131 \uc8fc\uae30\ub294 \uc774\ub354\ub9ac\uc6c0 \ub124\ud2b8\uc6cc\ud06c\uc640 \uac19\uc544\uc57c \ud569\ub2c8\ub2e4. \uc778\ud50c\ub808\uc774\uc158\uc740 \uc5c6\uace0, \ube14\ub85d \uc0dd\uc131\uc758 \ubcf4\uc0c1\uc740 \uac70\ub798 \uac00\uc2a4 \uc218\uc218\ub8cc\uc785\ub2c8\ub2e4. \uc774\ub354\ub9ac\uc6c0\ub9cc\ud07c \ud638\ud658\ub429\ub2c8\ub2e4. \ube14\ub85d\uccb4\uc778 \ub124\ud2b8\uc6cc\ud06c \uac70\ubc84\ub10c\uc2a4\ub97c \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c\ub294 POA\ub85c \uc2dc\uc791\ud558\uc5ec \uc810\ucc28 POS\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4.","title":"\ucee8\uc13c\uc11c\uc2a4 \uc5d4\uc9c4"},{"location":"biznet/introduction/","text":"BizNet \uc18c\uac1c BizNet\uc740 \ud504\ub85c\uadf8\ub7a8 \uac00\ub2a5\uc131\uacfc \uc0c1\ud638 \uc6b4\uc6a9\uc131\uc744 \uc81c\uacf5\ud558\ub294 \ud601\uc2e0\uc801\uc778 \uc194\ub8e8\uc158\uc785\ub2c8\ub2e4. BizNet\uc740 \uc9e7\uc740 \ube14\ub85d \uc2dc\uac04\uacfc \ub0ae\uc740 \uc218\uc218\ub8cc\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\ub294 POA(Proof of Authority) \ucee8\uc13c\uc11c\uc2a4\ub97c \uac00\uc9c4 9\uba85\uc758 \ud65c\uc131 \uac80\uc99d\uc790 \uc2dc\uc2a4\ud15c\uc5d0 \uc758\uc874\ud55c\ub2e4. \ube44\uc988\ub137\uc740 \ub610\ud55c EVM \ud638\ud658 \uc2a4\ub9c8\ud2b8 \uacc4\uc57d\uacfc \ud504\ub85c\ud1a0\ucf5c\uc744 \uc9c0\uc6d0\ud55c\ub2e4.","title":"\uc18c\uac1c"},{"location":"biznet/introduction/#biznet","text":"BizNet\uc740 \ud504\ub85c\uadf8\ub7a8 \uac00\ub2a5\uc131\uacfc \uc0c1\ud638 \uc6b4\uc6a9\uc131\uc744 \uc81c\uacf5\ud558\ub294 \ud601\uc2e0\uc801\uc778 \uc194\ub8e8\uc158\uc785\ub2c8\ub2e4. BizNet\uc740 \uc9e7\uc740 \ube14\ub85d \uc2dc\uac04\uacfc \ub0ae\uc740 \uc218\uc218\ub8cc\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\ub294 POA(Proof of Authority) \ucee8\uc13c\uc11c\uc2a4\ub97c \uac00\uc9c4 9\uba85\uc758 \ud65c\uc131 \uac80\uc99d\uc790 \uc2dc\uc2a4\ud15c\uc5d0 \uc758\uc874\ud55c\ub2e4. \ube44\uc988\ub137\uc740 \ub610\ud55c EVM \ud638\ud658 \uc2a4\ub9c8\ud2b8 \uacc4\uc57d\uacfc \ud504\ub85c\ud1a0\ucf5c\uc744 \uc9c0\uc6d0\ud55c\ub2e4.","title":"BizNet \uc18c\uac1c"},{"location":"biznet/develop/explorers/","text":"BizNet \ube14\ub85d\ud0d0\uc0c9\uae30 \ube44\uc988\ub137 \uc775\uc2a4\ud50c\ub85c\ub7ec\ub294 \uc0ac\uc6a9\uc790\uac00 \ube14\ub85d\uccb4\uc778\uacfc \uc0c1\ud638\uc791\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4\ub41c \uadf8\ub798\ud53d \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\uc785\ub2c8\ub2e4. \uc0ac\uc6a9\uc790\ub294 \uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \ube14\ub85d\uccb4\uc778\uc5d0 \ucd94\uac00\ub41c \ube14\ub85d \uc815\ubcf4, \ube14\ub85d\uccb4\uc778\uc5d0 \ubc1c\uc0dd\ud55c \ud2b8\ub79c\uc7ad\uc158 \uc815\ubcf4, \uc9c0\uac11 \uc794\uc561, BOA \uc815\ubcf4 \ub4f1\uc744 \ucc3e\uc544\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ube44\uc988\ub137\uc740 \uba54\uc778\ub137\uacfc \ud14c\uc2a4\ud2b8\ub137\uc744 \uc704\ud55c \ud0d0\uc0c9\uae30\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uba54\uc778\ub137\uc758 \ube14\ub85d\ud0d0\uc0c9\uae30 BOASCAN - https://scan.bosagora.org/ \ud14c\uc2a4\ud2b8\ub137\uc758 \ube14\ub85d\ud0d0\uc0c9\uae30 BOASCAN - https://testnet-scan.bosagora.org/","title":"BizNet \ube14\ub85d\ud0d0\uc0c9\uae30"},{"location":"biznet/develop/explorers/#biznet","text":"\ube44\uc988\ub137 \uc775\uc2a4\ud50c\ub85c\ub7ec\ub294 \uc0ac\uc6a9\uc790\uac00 \ube14\ub85d\uccb4\uc778\uacfc \uc0c1\ud638\uc791\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4\ub41c \uadf8\ub798\ud53d \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\uc785\ub2c8\ub2e4. \uc0ac\uc6a9\uc790\ub294 \uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \ube14\ub85d\uccb4\uc778\uc5d0 \ucd94\uac00\ub41c \ube14\ub85d \uc815\ubcf4, \ube14\ub85d\uccb4\uc778\uc5d0 \ubc1c\uc0dd\ud55c \ud2b8\ub79c\uc7ad\uc158 \uc815\ubcf4, \uc9c0\uac11 \uc794\uc561, BOA \uc815\ubcf4 \ub4f1\uc744 \ucc3e\uc544\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ube44\uc988\ub137\uc740 \uba54\uc778\ub137\uacfc \ud14c\uc2a4\ud2b8\ub137\uc744 \uc704\ud55c \ud0d0\uc0c9\uae30\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"BizNet \ube14\ub85d\ud0d0\uc0c9\uae30"},{"location":"biznet/develop/explorers/#_1","text":"BOASCAN - https://scan.bosagora.org/","title":"\uba54\uc778\ub137\uc758 \ube14\ub85d\ud0d0\uc0c9\uae30"},{"location":"biznet/develop/explorers/#_2","text":"BOASCAN - https://testnet-scan.bosagora.org/","title":"\ud14c\uc2a4\ud2b8\ub137\uc758 \ube14\ub85d\ud0d0\uc0c9\uae30"},{"location":"biznet/develop/mainnet/","text":"BizNet \uba54\uc778\ub137 \uba54\uc778\ub137\uc774\ub780? \uba54\uc778\ub137\uc740 \ube14\ub85d\uccb4\uc778 \ud504\ub85c\ud1a0\ucf5c\uc774 \uc644\uc804\ud788 \uac1c\ubc1c\u00b7\ubc30\uce58\ub418\ub294 \uc2dc\uae30\ub97c \uc77c\uceeb\ub294 \uc6a9\uc5b4\ub85c, \uc554\ud638\ud654\ud3d0 \uac70\ub798\uac00 \ubd84\uc0b0\uc6d0\uc7a5\uae30\uc220(\ube14\ub85d\uccb4\uc778)\uc5d0 \uc804\ub2ec\u00b7\uac80\uc99d\u00b7\uae30\ub85d\ub418\uace0 \uc788\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ube44\uc988\ub137\uc758 \uba54\uc778\ub137\uc740 \ube44\uc988\ub137 \ube14\ub85d\uccb4\uc778\uc5d0 \uc2e4\uc81c dApp\uc744 \ubc30\ud3ec\ud558\uace0 \uc2e4\uc81c \uac70\ub798\ub97c \uc218\ud589\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc774 \uc2e4\uc81c \ub124\ud2b8\uc6cc\ud06c\uc774\uae30 \ub54c\ubb38\uc5d0 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud558\ub824\uba74 \uc2e4\uc81c BOA \ud1a0\ud070\uc744 \uad6c\uc785\ud574\uc57c \ud569\ub2c8\ub2e4. BizNet\uc5d0 \uc5f0\uacb0\ud558\ub294 \ubc29\ubc95 BizNet\uc758 \uba54\uc778\ub137\uc5d0 \uc5f0\uacb0\ud558\ub294 \ubc29\ubc95\uc740 \uc5ec\ub7ec \uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud55c \uac00\uc9c0 \uac00\ub2a5\ud55c \ubc29\ubc95\uc740 \uba54\uc778\ub137\uc758 \ub178\ub4dc \ub85c \ucc38\uc5ec\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc9c0\uc815\ub41c RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8(rpc.md)\uc744 \uc0ac\uc6a9\ud558\uc5ec \uba54\uc778\ub137\uc5d0 \uc5f0\uacb0\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub294 HTTP \ub610\ub294 \uc6f9 \uc18c\ucf13\uc744 \ud1b5\ud574 \ub178\ub4dc\uc640 \uc9c1\uc811 \uc0c1\ud638 \uc791\uc6a9\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. RPC\ub97c \uc0ac\uc6a9\ud558\uc5ec ABCI \ucffc\ub9ac \uc2e4\ud589, \ub124\ud2b8\uc6cc\ud06c/\ud569\uc758 \uc0c1\ud0dc \ubcf4\uae30 \ub610\ub294 \ud2b8\ub79c\uc7ad\uc158 \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\uc640 \uac19\uc740 \ud558\uc704 \uc218\uc900 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc6f9 \uc9c0\uac11 MetaMask \uc5d0\uc11c BizNet\uc758 \uba54\uc778\ub137\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. BizNet\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95 BizNet\uc5d0\uc11c \uc2a4\ub9c8\ud2b8\ucee8\ud2b8\ub799\ud2b8 \ub97c \ubc30\ud3ec\ud558\uace0, NFTs , ERC20 \ud1a0\ud070 \uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"BizNet \uba54\uc778\ub137"},{"location":"biznet/develop/mainnet/#biznet","text":"","title":"BizNet \uba54\uc778\ub137"},{"location":"biznet/develop/mainnet/#_1","text":"\uba54\uc778\ub137\uc740 \ube14\ub85d\uccb4\uc778 \ud504\ub85c\ud1a0\ucf5c\uc774 \uc644\uc804\ud788 \uac1c\ubc1c\u00b7\ubc30\uce58\ub418\ub294 \uc2dc\uae30\ub97c \uc77c\uceeb\ub294 \uc6a9\uc5b4\ub85c, \uc554\ud638\ud654\ud3d0 \uac70\ub798\uac00 \ubd84\uc0b0\uc6d0\uc7a5\uae30\uc220(\ube14\ub85d\uccb4\uc778)\uc5d0 \uc804\ub2ec\u00b7\uac80\uc99d\u00b7\uae30\ub85d\ub418\uace0 \uc788\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ube44\uc988\ub137\uc758 \uba54\uc778\ub137\uc740 \ube44\uc988\ub137 \ube14\ub85d\uccb4\uc778\uc5d0 \uc2e4\uc81c dApp\uc744 \ubc30\ud3ec\ud558\uace0 \uc2e4\uc81c \uac70\ub798\ub97c \uc218\ud589\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc774 \uc2e4\uc81c \ub124\ud2b8\uc6cc\ud06c\uc774\uae30 \ub54c\ubb38\uc5d0 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud558\ub824\uba74 \uc2e4\uc81c BOA \ud1a0\ud070\uc744 \uad6c\uc785\ud574\uc57c \ud569\ub2c8\ub2e4.","title":"\uba54\uc778\ub137\uc774\ub780?"},{"location":"biznet/develop/mainnet/#biznet_1","text":"BizNet\uc758 \uba54\uc778\ub137\uc5d0 \uc5f0\uacb0\ud558\ub294 \ubc29\ubc95\uc740 \uc5ec\ub7ec \uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud55c \uac00\uc9c0 \uac00\ub2a5\ud55c \ubc29\ubc95\uc740 \uba54\uc778\ub137\uc758 \ub178\ub4dc \ub85c \ucc38\uc5ec\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc9c0\uc815\ub41c RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8(rpc.md)\uc744 \uc0ac\uc6a9\ud558\uc5ec \uba54\uc778\ub137\uc5d0 \uc5f0\uacb0\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub294 HTTP \ub610\ub294 \uc6f9 \uc18c\ucf13\uc744 \ud1b5\ud574 \ub178\ub4dc\uc640 \uc9c1\uc811 \uc0c1\ud638 \uc791\uc6a9\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. RPC\ub97c \uc0ac\uc6a9\ud558\uc5ec ABCI \ucffc\ub9ac \uc2e4\ud589, \ub124\ud2b8\uc6cc\ud06c/\ud569\uc758 \uc0c1\ud0dc \ubcf4\uae30 \ub610\ub294 \ud2b8\ub79c\uc7ad\uc158 \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\uc640 \uac19\uc740 \ud558\uc704 \uc218\uc900 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc6f9 \uc9c0\uac11 MetaMask \uc5d0\uc11c BizNet\uc758 \uba54\uc778\ub137\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"BizNet\uc5d0 \uc5f0\uacb0\ud558\ub294 \ubc29\ubc95"},{"location":"biznet/develop/mainnet/#biznet_2","text":"BizNet\uc5d0\uc11c \uc2a4\ub9c8\ud2b8\ucee8\ud2b8\ub799\ud2b8 \ub97c \ubc30\ud3ec\ud558\uace0, NFTs , ERC20 \ud1a0\ud070 \uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"BizNet\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95"},{"location":"biznet/develop/rpc/","text":"JSON-RPC Endpoint \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub9ac\uc18c\uc2a4 \uba54\uc778\ub137(ChainID 0x867, 10\uc9c4\uc218\ub85c 2151) BizNet RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8: !!! \uc8fc\uc758 \ucd5c\ub300 5K \ube14\ub85d \ubc94\uc704\uc5d0\uc11c 'eth_getLogs' \uc694\uccad\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub85c\uadf8\ub97c \uc790\uc8fc \uac00\uc838\uc640\uc57c \ud558\ub294 \uacbd\uc6b0 \uc0c8 \ub85c\uadf8\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \ub54c WebSocket\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. https://mainnet.bosagora.org/ Testnet(ChainID 0x7E3, 10\uc9c4\uc218\ub85c 2019) BizNet RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8: https://testnet.bosagora.org/ JSON-RPC \ud568\uc218\ub4e4 \uc774 \uc704\ud0a4 \ud398\uc774\uc9c0 \ub97c \ucc38\uc870\ud558\uc2ed\uc2dc\uc624.","title":"RPC"},{"location":"biznet/develop/rpc/#json-rpc-endpoint","text":"","title":"JSON-RPC Endpoint"},{"location":"biznet/develop/rpc/#_1","text":"","title":"\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub9ac\uc18c\uc2a4"},{"location":"biznet/develop/rpc/#chainid-0x867-10-2151","text":"BizNet RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8: !!! \uc8fc\uc758 \ucd5c\ub300 5K \ube14\ub85d \ubc94\uc704\uc5d0\uc11c 'eth_getLogs' \uc694\uccad\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub85c\uadf8\ub97c \uc790\uc8fc \uac00\uc838\uc640\uc57c \ud558\ub294 \uacbd\uc6b0 \uc0c8 \ub85c\uadf8\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \ub54c WebSocket\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. https://mainnet.bosagora.org/","title":"\uba54\uc778\ub137(ChainID 0x867, 10\uc9c4\uc218\ub85c 2151)"},{"location":"biznet/develop/rpc/#testnetchainid-0x7e3-10-2019","text":"BizNet RPC \uc5d4\ub4dc\ud3ec\uc778\ud2b8: https://testnet.bosagora.org/","title":"Testnet(ChainID 0x7E3, 10\uc9c4\uc218\ub85c 2019)"},{"location":"biznet/develop/rpc/#json-rpc","text":"\uc774 \uc704\ud0a4 \ud398\uc774\uc9c0 \ub97c \ucc38\uc870\ud558\uc2ed\uc2dc\uc624.","title":"JSON-RPC \ud568\uc218\ub4e4"},{"location":"biznet/develop/testnet/","text":"BizNet \ud14c\uc2a4\ud2b8\ub137 \ud14c\uc2a4\ud2b8\ub137\uc774\ub780? \ud14c\uc2a4\ud2b8\ub137\uc740 \uac1c\ubc1c\uc790\uc5d0\uac8c \uac1c\ubc29\ub41c \ube44\uc988\ub137 \ub124\ud2b8\uc6cc\ud06c\uc758 \ud14c\uc2a4\ud2b8 \ud658\uacbd\uc785\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\ub137\uc758 \ub178\ub4dc\ub294 \uac1c\ubc1c\ud300\uc5d0 \uc758\ud574 \uc6b4\uc601\ub429\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\ub137\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc5bb\uc744 \uc218 \uc788\ub294 \uc774\uc810 \ud14c\uc2a4\ud2b8 \uc8fc\uc18c\ub97c \ub9cc\ub4e4\uace0 \ud14c\uc2a4\ud2b8\ub137 BOA\uc744 \ubc1b\uc73c\uc2ed\uc2dc\uc624. \uc790\uc2e0\uc758 \uc790\uc0b0\uc744 \uc783\uc744 \uac00\ub2a5\uc131 \uc5c6\uc774 BizNet\uc5d0\uc11c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\uace0 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 BizNet\uacfc \ube44\uad50\ud558\uc5ec \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud37c\ube14\ub9ad \ub124\ud2b8\uc6cc\ud06c\uc5d0 \ube44\ud574 \uaddc\ubaa8\uac00 \uc791\uc740 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\uc11c \ube14\ub85d\uccb4\uc778 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\ub137 BOA\ub97c \uc5bb\ub294 \ubc29\ubc95 \ube44\uc988\ub137\uc758 \uc218\ub3c4\uaf2d\uc9c0 \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub97c \uc0ac\uc6a9\ud558\uba74 \ud14c\uc2a4\ud2b8\ub137\uc758 \ubcf4\uc544\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. https://faucet.bosagora.org/request/boa/:address \ud14c\uc2a4\ud2b8\ub137 BOA\ub97c \uc694\uccad\ud558\ub294 \ubc29\ubc95: MetaMask \ub97c \uc0ac\uc6a9\ud558\uc5ec BizNet\uc758 \uc0c8 Wallet \ub9cc\ub4e4\uae30 \ud14c\uc2a4\ud2b8\ub137 BOA \uc5bb\uae30: https://faucet.bosagora.org/request/boa/:address \ud14c\uc2a4\ud2b8\ub137\uc758 \ube14\ub85d\ud0d0\uc0c9\uae30 * BOASCAN - https://testnet-scan.bosagora.org/","title":"BizNet \ud14c\uc2a4\ud2b8\ub137"},{"location":"biznet/develop/testnet/#biznet","text":"","title":"BizNet \ud14c\uc2a4\ud2b8\ub137"},{"location":"biznet/develop/testnet/#_1","text":"\ud14c\uc2a4\ud2b8\ub137\uc740 \uac1c\ubc1c\uc790\uc5d0\uac8c \uac1c\ubc29\ub41c \ube44\uc988\ub137 \ub124\ud2b8\uc6cc\ud06c\uc758 \ud14c\uc2a4\ud2b8 \ud658\uacbd\uc785\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\ub137\uc758 \ub178\ub4dc\ub294 \uac1c\ubc1c\ud300\uc5d0 \uc758\ud574 \uc6b4\uc601\ub429\ub2c8\ub2e4.","title":"\ud14c\uc2a4\ud2b8\ub137\uc774\ub780?"},{"location":"biznet/develop/testnet/#_2","text":"\ud14c\uc2a4\ud2b8 \uc8fc\uc18c\ub97c \ub9cc\ub4e4\uace0 \ud14c\uc2a4\ud2b8\ub137 BOA\uc744 \ubc1b\uc73c\uc2ed\uc2dc\uc624. \uc790\uc2e0\uc758 \uc790\uc0b0\uc744 \uc783\uc744 \uac00\ub2a5\uc131 \uc5c6\uc774 BizNet\uc5d0\uc11c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\uace0 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 BizNet\uacfc \ube44\uad50\ud558\uc5ec \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud37c\ube14\ub9ad \ub124\ud2b8\uc6cc\ud06c\uc5d0 \ube44\ud574 \uaddc\ubaa8\uac00 \uc791\uc740 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\uc11c \ube14\ub85d\uccb4\uc778 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud14c\uc2a4\ud2b8\ub137\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc5bb\uc744 \uc218 \uc788\ub294 \uc774\uc810"},{"location":"biznet/develop/testnet/#boa","text":"\ube44\uc988\ub137\uc758 \uc218\ub3c4\uaf2d\uc9c0 \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub97c \uc0ac\uc6a9\ud558\uba74 \ud14c\uc2a4\ud2b8\ub137\uc758 \ubcf4\uc544\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. https://faucet.bosagora.org/request/boa/:address \ud14c\uc2a4\ud2b8\ub137 BOA\ub97c \uc694\uccad\ud558\ub294 \ubc29\ubc95: MetaMask \ub97c \uc0ac\uc6a9\ud558\uc5ec BizNet\uc758 \uc0c8 Wallet \ub9cc\ub4e4\uae30 \ud14c\uc2a4\ud2b8\ub137 BOA \uc5bb\uae30: https://faucet.bosagora.org/request/boa/:address","title":"\ud14c\uc2a4\ud2b8\ub137 BOA\ub97c \uc5bb\ub294 \ubc29\ubc95"},{"location":"biznet/develop/testnet/#_3","text":"* BOASCAN - https://testnet-scan.bosagora.org/","title":"\ud14c\uc2a4\ud2b8\ub137\uc758 \ube14\ub85d\ud0d0\uc0c9\uae30"},{"location":"biznet/develop/deploy_smart_contract/hardhat/","text":"Using Hardhat What is Hardhat Hardhat is a development environment to compile, deploy, test, and debug your smart contract. Setting up the development environment There are a few technical requirements before we start. Please install the following: Requirements: Installing There are a few technical requirements before we start. Please install the following: Requirements: Windows, Linux or Mac OS X Node.js v8.9.4 LTS or later Git First, you need to create an empty project npm init --yes Once your project is ready, you should run npm install --save-dev hardhat It's recommeded to install some dependencies. npm install --save-dev @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers To use your local installation of Hardhat, you need to use npx to run it (i.e. npx hardhat ). Create A Project To create your Hardhat project run npx hardhat in your project folder: mkdir MegaCoin cd MegaCoin Intialize your project: $ npx hardhat 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 8888888888 8888b. 888d888 .d88888 88888b. 8888b. 888888 888 888 \"88b 888P\" d88\" 888 888 \"88b \"88b 888 888 888 .d888888 888 888 888 888 888 .d888888 888 888 888 888 888 888 Y88b 888 888 888 888 888 Y88b. 888 888 \"Y888888 888 \"Y88888 888 888 \"Y888888 \"Y888 Welcome to Hardhat v2.0.8 ? What do you want to do? \u2026 \u276f Create a sample project Create an empty hardhat.config.js Quit Once this project is initialized, you'll now have a project structure with the following items: contracts/: Directory for Solidity contracts scripts/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts hardhat-config.js: Hardhat configuration file Create Contract You can write your own smart contract or download the ERC20 token smart contract template . Config Hardhat for BizNet Go to hardhat.config.js Update the config require(\"@nomiclabs/hardhat-waffle\"); require('@nomiclabs/hardhat-ethers'); const { mnemonic } = require('./secrets.json'); // This is a sample Hardhat task. To learn how to create your own go to // https://hardhat.org/guides/create-task.html task(\"accounts\", \"Prints the list of accounts\", async () => { const accounts = await ethers.getSigners(); for (const account of accounts) { console.log(account.address); } }); // You need to export an object to set up your config // Go to https://hardhat.org/config/ to learn more /** * @type import('hardhat/config').HardhatUserConfig */ module.exports = { defaultNetwork: \"mainnet\", networks: { localhost: { url: \"http://127.0.0.1:8545\" }, hardhat: { }, testnet: { url: \"https://testnet.bosagora.org/\", chainId: 2019, gasPrice: 20000000000, accounts: {mnemonic: mnemonic} }, mainnet: { url: \"https://mainnet.bosagora.org/\", chainId: 2152, gasPrice: 20000000000, accounts: {mnemonic: mnemonic} } }, solidity: { version: \"0.5.16\", settings: { optimizer: { enabled: true } } }, paths: { sources: \"./contracts\", tests: \"./test\", cache: \"./cache\", artifacts: \"./artifacts\" }, mocha: { timeout: 20000 } }; !!! Note It requires mnemonic to be passed in for Provider, this is the seed phrase for the account you'd like to deploy from. Create a new .secret file in root directory and enter your 12 word mnemonic seed phrase to get started. To get the seedwords from metamask wallet you can go to Metamask Settings, then from the menu choose Security and Privacy where you will see a button that says reveal seed words. Compile Contract To compile a Hardhat project, change to the root of the directory where the project is located and then type the following into a terminal: npx hardhat compile Deploying on BizNet Network Run this command in root of the project directory: $ npx hardhat run --network testnet scripts/deploy.js Remember your address, transaction_hash and other details provided would differ, Above is just to provide an idea of structure. Congratulations! You have successfully deployed ERC20 Smart Contract. Now you can interact with the Smart Contract. You can check the deployment status here: https://scan.bosagora.org/ or https://testnet-scan.bosagora.org/","title":"Hardhat"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#using-hardhat","text":"","title":"Using Hardhat"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#what-is-hardhat","text":"Hardhat is a development environment to compile, deploy, test, and debug your smart contract.","title":"What is Hardhat"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#setting-up-the-development-environment","text":"There are a few technical requirements before we start. Please install the following: Requirements:","title":"Setting up the development environment"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#installing","text":"There are a few technical requirements before we start. Please install the following: Requirements: Windows, Linux or Mac OS X Node.js v8.9.4 LTS or later Git First, you need to create an empty project npm init --yes Once your project is ready, you should run npm install --save-dev hardhat It's recommeded to install some dependencies. npm install --save-dev @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers To use your local installation of Hardhat, you need to use npx to run it (i.e. npx hardhat ).","title":"Installing"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#create-a-project","text":"To create your Hardhat project run npx hardhat in your project folder: mkdir MegaCoin cd MegaCoin Intialize your project: $ npx hardhat 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 8888888888 8888b. 888d888 .d88888 88888b. 8888b. 888888 888 888 \"88b 888P\" d88\" 888 888 \"88b \"88b 888 888 888 .d888888 888 888 888 888 888 .d888888 888 888 888 888 888 888 Y88b 888 888 888 888 888 Y88b. 888 888 \"Y888888 888 \"Y88888 888 888 \"Y888888 \"Y888 Welcome to Hardhat v2.0.8 ? What do you want to do? \u2026 \u276f Create a sample project Create an empty hardhat.config.js Quit Once this project is initialized, you'll now have a project structure with the following items: contracts/: Directory for Solidity contracts scripts/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts hardhat-config.js: Hardhat configuration file","title":"Create A Project"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#create-contract","text":"You can write your own smart contract or download the ERC20 token smart contract template .","title":"Create Contract"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#config-hardhat-for-biznet","text":"Go to hardhat.config.js Update the config require(\"@nomiclabs/hardhat-waffle\"); require('@nomiclabs/hardhat-ethers'); const { mnemonic } = require('./secrets.json'); // This is a sample Hardhat task. To learn how to create your own go to // https://hardhat.org/guides/create-task.html task(\"accounts\", \"Prints the list of accounts\", async () => { const accounts = await ethers.getSigners(); for (const account of accounts) { console.log(account.address); } }); // You need to export an object to set up your config // Go to https://hardhat.org/config/ to learn more /** * @type import('hardhat/config').HardhatUserConfig */ module.exports = { defaultNetwork: \"mainnet\", networks: { localhost: { url: \"http://127.0.0.1:8545\" }, hardhat: { }, testnet: { url: \"https://testnet.bosagora.org/\", chainId: 2019, gasPrice: 20000000000, accounts: {mnemonic: mnemonic} }, mainnet: { url: \"https://mainnet.bosagora.org/\", chainId: 2152, gasPrice: 20000000000, accounts: {mnemonic: mnemonic} } }, solidity: { version: \"0.5.16\", settings: { optimizer: { enabled: true } } }, paths: { sources: \"./contracts\", tests: \"./test\", cache: \"./cache\", artifacts: \"./artifacts\" }, mocha: { timeout: 20000 } }; !!! Note It requires mnemonic to be passed in for Provider, this is the seed phrase for the account you'd like to deploy from. Create a new .secret file in root directory and enter your 12 word mnemonic seed phrase to get started. To get the seedwords from metamask wallet you can go to Metamask Settings, then from the menu choose Security and Privacy where you will see a button that says reveal seed words.","title":"Config Hardhat for BizNet"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#compile-contract","text":"To compile a Hardhat project, change to the root of the directory where the project is located and then type the following into a terminal: npx hardhat compile","title":"Compile Contract"},{"location":"biznet/develop/deploy_smart_contract/hardhat/#deploying-on-biznet-network","text":"Run this command in root of the project directory: $ npx hardhat run --network testnet scripts/deploy.js Remember your address, transaction_hash and other details provided would differ, Above is just to provide an idea of structure. Congratulations! You have successfully deployed ERC20 Smart Contract. Now you can interact with the Smart Contract. You can check the deployment status here: https://scan.bosagora.org/ or https://testnet-scan.bosagora.org/","title":"Deploying on BizNet Network"},{"location":"biznet/develop/deploy_smart_contract/remix/","text":"Using Remix Deploys a ERC20 smart contract with a message, and renders it in the front-end. You can interact with the smart contract easily! This dapp implements a \"Hello World\" style application that echoes a message passed to the contract to the front end. This tutorial is intended to be followed using the online IDE available at Remix IDE . Setting Up Remix IDE Remix is an online IDE to develop smart contracts. You need to choose Solidity Compiler and Deploy and Run Transactions. Go to File Explorers, And Create a new file, Name it MegaCoin.sol Copy/Paste the Smart contract below into the newly created file MegaCoin.sol Writing the Smart Contract Create new contract ERC20Token.sol and copy contract code from the bep20 token template here Modify \u201cname\u201d, \u201csymbol\u201d, \u201cdecimals\u201d and \u201ctotalSupply\u201d according to your requirements. The first line, pragma solidity ^0.5.16 specifies that the source code is for a Solidity version greater than 0.5.16. Pragmas are common instructions for compilers about how to treat the source code (e.g., pragma once). A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. Learn more about the constructor and memory in the docs. Compile Smart Contract Step1: Click button to switch to compile page Step2: Select \u201cBEP20Token\u201d contract Step3: Enable \u201cAuto compile\u201d and \u201coptimization\u201d Step4: Click \u201cABI\u201d to copy the contract abi and save it. Now, We have to deploy our smart contract on BizNet Network. For that, we have to connect to web3 world, this can be done my many services like Metamask, Brave, Portis etc. We will be using Metamask. Please follow this tutorial to setup a Metamask Account . Open Metamask and select Custom RPC from the networks dropdown Go to setting page Add a new network Testnet RPC URLs ChainID: 2019 Symbol: BOA Block Explorer: https://testnet.bosagora.org/ Mainnet RPC URLs ChainID: 2151 Symbol: BOA Block Explorer: https://mainnet.bosagora.org/ Go ahead and click save Copy your address from Metamask Head over to Faucet - https://faucet.bosagora.org/request/boa/your-address and request test BOA Now, let's Deploy the Smart Contract on BizNet Testnet Select Injected Web3 in the Environment dropdown and your contract Accept the Connection Request! Once Metamask is connected to Remix, the \u2018Deploy\u2019 transaction would generate another metamask popup that requires transaction confirmation. Congratulations! You have successfully deployed a ERC20 Contract. Now you can interact with the Smart Contract. Check the deployment status here: https://testnet.bscscan.com/","title":"Remix IDE"},{"location":"biznet/develop/deploy_smart_contract/remix/#using-remix","text":"Deploys a ERC20 smart contract with a message, and renders it in the front-end. You can interact with the smart contract easily! This dapp implements a \"Hello World\" style application that echoes a message passed to the contract to the front end. This tutorial is intended to be followed using the online IDE available at Remix IDE .","title":"Using Remix"},{"location":"biznet/develop/deploy_smart_contract/remix/#setting-up-remix-ide","text":"Remix is an online IDE to develop smart contracts. You need to choose Solidity Compiler and Deploy and Run Transactions. Go to File Explorers, And Create a new file, Name it MegaCoin.sol Copy/Paste the Smart contract below into the newly created file MegaCoin.sol","title":"Setting Up Remix IDE"},{"location":"biznet/develop/deploy_smart_contract/remix/#writing-the-smart-contract","text":"Create new contract ERC20Token.sol and copy contract code from the bep20 token template here Modify \u201cname\u201d, \u201csymbol\u201d, \u201cdecimals\u201d and \u201ctotalSupply\u201d according to your requirements. The first line, pragma solidity ^0.5.16 specifies that the source code is for a Solidity version greater than 0.5.16. Pragmas are common instructions for compilers about how to treat the source code (e.g., pragma once). A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. Learn more about the constructor and memory in the docs.","title":"Writing the Smart Contract"},{"location":"biznet/develop/deploy_smart_contract/remix/#compile-smart-contract","text":"Step1: Click button to switch to compile page Step2: Select \u201cBEP20Token\u201d contract Step3: Enable \u201cAuto compile\u201d and \u201coptimization\u201d Step4: Click \u201cABI\u201d to copy the contract abi and save it. Now, We have to deploy our smart contract on BizNet Network. For that, we have to connect to web3 world, this can be done my many services like Metamask, Brave, Portis etc. We will be using Metamask. Please follow this tutorial to setup a Metamask Account . Open Metamask and select Custom RPC from the networks dropdown Go to setting page Add a new network Testnet RPC URLs ChainID: 2019 Symbol: BOA Block Explorer: https://testnet.bosagora.org/ Mainnet RPC URLs ChainID: 2151 Symbol: BOA Block Explorer: https://mainnet.bosagora.org/ Go ahead and click save Copy your address from Metamask Head over to Faucet - https://faucet.bosagora.org/request/boa/your-address and request test BOA Now, let's Deploy the Smart Contract on BizNet Testnet Select Injected Web3 in the Environment dropdown and your contract Accept the Connection Request! Once Metamask is connected to Remix, the \u2018Deploy\u2019 transaction would generate another metamask popup that requires transaction confirmation. Congratulations! You have successfully deployed a ERC20 Contract. Now you can interact with the Smart Contract. Check the deployment status here: https://testnet.bscscan.com/","title":"Compile Smart Contract"},{"location":"biznet/develop/deploy_smart_contract/truffle/","text":"Using Truffle Setting up the development environment Requirements There are a few technical requirements before we start. Please install the following: Requirements: Windows, Linux or Mac OS X Node.js v8.9.4 LTS or later Git Recommendations for Windows If you're running Truffle on Windows, you may encounter some naming conflicts that could prevent Truffle from executing properly. Please see the section on resolving naming conflicts for solutions. Installing Truffle Once we have those installed, we only need one command to install Truffle: npm install -g truffle To verify that Truffle is installed properly, type truffle version on a terminal. If you see an error, make sure that your npm modules are added to your path. Project Creation, Compilation, and Configuration The first step is to create a Truffle project. We'll use the *MegaCoin as an example, which creates a token that can be transferred between accounts: Create a new directory for your Truffle project mkdir MegaCoin cd MegaCoin Intialize your project: To initialize your project use the following command truffle init Once this operation is completed, you'll now have a project structure with the following items: contracts/: Directory for Solidity contracts migrations/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts truffle-config.js: Truffle configuration file Create Contract You can write your own smart contract or download the ERC20 token smart contract template. Compile Contract To compile a Truffle project, change to the root of the directory where the project is located and then type the following into a terminal: truffle compile Config Truffle for BizNet Go to truffle-config.js Update the truffle-config const HDWalletProvider = require('@truffle/hdwallet-provider'); const fs = require('fs'); const mnemonic = fs.readFileSync(\".secret\").toString().trim(); module.exports = { networks: { development: { host: \"127.0.0.1\", // Localhost (default: none) port: 8545, // Standard RPC port (default: none) network_id: \"*\", // Any network (default: none) }, testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, bsc: { provider: () => new HDWalletProvider(mnemonic, `https://mainnet.bosagora.org/`), network_id: 2151, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, }, // Set default mocha options here, use special reporters etc. mocha: { // timeout: 100000 }, // Configure your compilers compilers: { solc: { version: \"^0.6.12\", // A version or constraint - Ex. \"^0.5.0\" } } } Notice, it requires mnemonic to be passed in for Provider, this is the seed phrase for the account you'd like to deploy from. Create a new .secret file in root directory and enter your 12 word mnemonic seed phrase to get started. To get the seedwords from metamask wallet you can go to Metamask Settings, then from the menu choose Security and Privacy where you will see a button that says reveal seed words. Deploying on BizNet Network Run this command in root of the project directory: $ truffle migrate --network testnet Contract will be deployed on BizNet Testnet, it look like this: 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0xaf4502198400bde2148eb4274b08d727a17080b685cd2dcd4aee13d8eb954adc > Blocks: 3 Seconds: 9 > contract address: 0x81eCD10b61978D9160428943a0c0Fb31a5460466 > block number: 3223948 > block timestamp: 1604049862 > account: 0x623ac9f6E62A8134bBD5Dc96D9B8b29b4B60e45F > balance: 6.24574114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH Pausing for 5 confirmations... ------------------------------ > confirmation number: 2 (block: 3223952) > confirmation number: 3 (block: 3223953) > confirmation number: 4 (block: 3223954) > confirmation number: 6 (block: 3223956) > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH Summary ======= > Total deployments: 1 > Final cost: 0.00383886 ETH Remember your address, transaction_hash and other details provided would differ, Above is just to provide an idea of structure. Congratulations! You have successfully deployed ERC20 Smart Contract. Now you can interact with the Smart Contract. You can check the deployment status here: https://bscscan.com/ or https://testnet.bscscan.com/ Verify Your Contract on BscScan The recommended way to verify a smart contract is using plugin. It is easier to read, imports are maintained, licenses are maintained. Verified using Truffle Example: https://testnet.bscscan.com/token/0x68D2E27940CA48109Fa3DaD0D2C8B27E64a0c6cf GitHub Project: https://github.com/huangsuyu/verify-example BscSCAN plugin for Truffle Truffle has an BscScan plugin: truffle-plugin-verify You need to deploy with Truffle to verify with the Truffle verify plugin. Get API key: https://bscscan.com/myapikey Install the plugin npm install -D truffle-plugin-verify Configure the plugin Configure the plugin in truffle-config.js using the following command const HDWalletProvider = require(\"@truffle/hdwallet-provider\"); // const infuraKey = \"fj4jll3k.....\"; // const { mnemonic } = require('./env.json'); module.exports = { plugins: [ 'truffle-plugin-verify' ], networks: { testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, timeoutBlocks: 200, confirmations: 5, production: true // Treats this network as if it was a public net. (default: false) } }, // Set default mocha options here, use special reporters etc. mocha: { timeout: 100000 }, // Configure your compilers compilers: { solc: { version: \"0.5.16\", // Fetch exact version from solc-bin (default: truffle's version) // docker: true, // Use \"0.5.1\" you've installed locally with docker (default: false) settings: { // See the solidity docs for advice about optimization and evmVersion optimizer: { enabled: false, runs: 200 }, evmVersion: \"byzantium\" } }, }, };","title":"Truffle"},{"location":"biznet/develop/deploy_smart_contract/truffle/#using-truffle","text":"","title":"Using Truffle"},{"location":"biznet/develop/deploy_smart_contract/truffle/#setting-up-the-development-environment","text":"","title":"Setting up the development environment"},{"location":"biznet/develop/deploy_smart_contract/truffle/#requirements","text":"There are a few technical requirements before we start. Please install the following: Requirements: Windows, Linux or Mac OS X Node.js v8.9.4 LTS or later Git Recommendations for Windows If you're running Truffle on Windows, you may encounter some naming conflicts that could prevent Truffle from executing properly. Please see the section on resolving naming conflicts for solutions.","title":"Requirements"},{"location":"biznet/develop/deploy_smart_contract/truffle/#installing-truffle","text":"Once we have those installed, we only need one command to install Truffle: npm install -g truffle To verify that Truffle is installed properly, type truffle version on a terminal. If you see an error, make sure that your npm modules are added to your path.","title":"Installing Truffle"},{"location":"biznet/develop/deploy_smart_contract/truffle/#project-creation-compilation-and-configuration","text":"The first step is to create a Truffle project. We'll use the *MegaCoin as an example, which creates a token that can be transferred between accounts:","title":"Project Creation, Compilation, and Configuration"},{"location":"biznet/develop/deploy_smart_contract/truffle/#create-a-new-directory-for-your-truffle-project","text":"mkdir MegaCoin cd MegaCoin","title":"Create a new directory for your Truffle project"},{"location":"biznet/develop/deploy_smart_contract/truffle/#intialize-your-project","text":"To initialize your project use the following command truffle init Once this operation is completed, you'll now have a project structure with the following items: contracts/: Directory for Solidity contracts migrations/: Directory for scriptable deployment files test/: Directory for test files for testing your application and contracts truffle-config.js: Truffle configuration file","title":"Intialize your project:"},{"location":"biznet/develop/deploy_smart_contract/truffle/#create-contract","text":"You can write your own smart contract or download the ERC20 token smart contract template.","title":"Create Contract"},{"location":"biznet/develop/deploy_smart_contract/truffle/#compile-contract","text":"To compile a Truffle project, change to the root of the directory where the project is located and then type the following into a terminal: truffle compile","title":"Compile Contract"},{"location":"biznet/develop/deploy_smart_contract/truffle/#config-truffle-for-biznet","text":"Go to truffle-config.js Update the truffle-config const HDWalletProvider = require('@truffle/hdwallet-provider'); const fs = require('fs'); const mnemonic = fs.readFileSync(\".secret\").toString().trim(); module.exports = { networks: { development: { host: \"127.0.0.1\", // Localhost (default: none) port: 8545, // Standard RPC port (default: none) network_id: \"*\", // Any network (default: none) }, testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, bsc: { provider: () => new HDWalletProvider(mnemonic, `https://mainnet.bosagora.org/`), network_id: 2151, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, }, // Set default mocha options here, use special reporters etc. mocha: { // timeout: 100000 }, // Configure your compilers compilers: { solc: { version: \"^0.6.12\", // A version or constraint - Ex. \"^0.5.0\" } } } Notice, it requires mnemonic to be passed in for Provider, this is the seed phrase for the account you'd like to deploy from. Create a new .secret file in root directory and enter your 12 word mnemonic seed phrase to get started. To get the seedwords from metamask wallet you can go to Metamask Settings, then from the menu choose Security and Privacy where you will see a button that says reveal seed words.","title":"Config Truffle for BizNet"},{"location":"biznet/develop/deploy_smart_contract/truffle/#deploying-on-biznet-network","text":"Run this command in root of the project directory: $ truffle migrate --network testnet Contract will be deployed on BizNet Testnet, it look like this: 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0xaf4502198400bde2148eb4274b08d727a17080b685cd2dcd4aee13d8eb954adc > Blocks: 3 Seconds: 9 > contract address: 0x81eCD10b61978D9160428943a0c0Fb31a5460466 > block number: 3223948 > block timestamp: 1604049862 > account: 0x623ac9f6E62A8134bBD5Dc96D9B8b29b4B60e45F > balance: 6.24574114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH Pausing for 5 confirmations... ------------------------------ > confirmation number: 2 (block: 3223952) > confirmation number: 3 (block: 3223953) > confirmation number: 4 (block: 3223954) > confirmation number: 6 (block: 3223956) > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH Summary ======= > Total deployments: 1 > Final cost: 0.00383886 ETH Remember your address, transaction_hash and other details provided would differ, Above is just to provide an idea of structure. Congratulations! You have successfully deployed ERC20 Smart Contract. Now you can interact with the Smart Contract. You can check the deployment status here: https://bscscan.com/ or https://testnet.bscscan.com/","title":"Deploying on BizNet Network"},{"location":"biznet/develop/deploy_smart_contract/truffle/#verify-your-contract-on-bscscan","text":"The recommended way to verify a smart contract is using plugin. It is easier to read, imports are maintained, licenses are maintained. Verified using Truffle Example: https://testnet.bscscan.com/token/0x68D2E27940CA48109Fa3DaD0D2C8B27E64a0c6cf GitHub Project: https://github.com/huangsuyu/verify-example","title":"Verify Your Contract on BscScan"},{"location":"biznet/develop/deploy_smart_contract/truffle/#bscscan-plugin-for-truffle","text":"Truffle has an BscScan plugin: truffle-plugin-verify You need to deploy with Truffle to verify with the Truffle verify plugin. Get API key: https://bscscan.com/myapikey","title":"BscSCAN plugin for Truffle"},{"location":"biznet/develop/deploy_smart_contract/truffle/#install-the-plugin","text":"npm install -D truffle-plugin-verify","title":"Install the plugin"},{"location":"biznet/develop/deploy_smart_contract/truffle/#configure-the-plugin","text":"Configure the plugin in truffle-config.js using the following command const HDWalletProvider = require(\"@truffle/hdwallet-provider\"); // const infuraKey = \"fj4jll3k.....\"; // const { mnemonic } = require('./env.json'); module.exports = { plugins: [ 'truffle-plugin-verify' ], networks: { testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, timeoutBlocks: 200, confirmations: 5, production: true // Treats this network as if it was a public net. (default: false) } }, // Set default mocha options here, use special reporters etc. mocha: { timeout: 100000 }, // Configure your compilers compilers: { solc: { version: \"0.5.16\", // Fetch exact version from solc-bin (default: truffle's version) // docker: true, // Use \"0.5.1\" you've installed locally with docker (default: false) settings: { // See the solidity docs for advice about optimization and evmVersion optimizer: { enabled: false, runs: 200 }, evmVersion: \"byzantium\" } }, }, };","title":"Configure the plugin"},{"location":"biznet/develop/deploy_smart_contract/verify/","text":"","title":"Verify"},{"location":"biznet/develop/nft/deploy/","text":"Deploy NFTs on BizNet This work is inspired by this blog In this tutorial we will create a non-fungible token (NFT) and deploy to a public testnet. ERC721 is a standard for representing ownership of non-fungible tokens , that is, where each token is unique such as in real estate or collectibles. We will use Presets contracts in OpenZeppelin Contracts to create an ERC721 and deploy using Truffle. Setting up the Environment We begin by creating a new project. $ mkdir mynft && cd mynft $ npm init -y Then we install OpenZeppelin Contracts which has an implementation of ERC721. $ npm i --save-dev @openzeppelin/contracts Next we install a development tool for deployment, for this tutorial we will use Truffle but we could use any other tools such as Buidler, Remix or OpenZeppelin CLI . $ npm i truffle Getting the Contract Artifacts We will setup our Solidity project using truffle init to create a contracts directory and configuration to connect to a network. $ npx truffle init Starting init... ================ > Copying project files to Init successful, sweet! We are going to use Preset ERC721PresetMinterPauserAutoId which is an ERC721 that is preset so it can be minted (with auto token ID and metadata URI), paused and burned. The Preset contracts have already been compiled, so we only need to copy the artifacts to the build/contracts directory. $ mkdir -p build/contracts/ $ cp node_modules/@openzeppelin/contracts/build/contracts/* build/contracts/ Using your favorite editor create 2_deploy.js in the migrations directory with the following contents: // migrations/2_deploy.js // SPDX-License-Identifier: MIT const ERC721PresetMinterPauserAutoId = artifacts.require(\"ERC721PresetMinterPauserAutoId\"); module.exports = function(deployer) { deployer.deploy(ERC721PresetMinterPauserAutoId, \"My NFT\",\"NFT\", \"http://my-json-server.typicode.com/huangsuyu/nft/tokens\"); }; Deploy the Contract to a Local Blockchain We will use truffle develop to open a Truffle console with a development blockchain Head over to https://faucet.bosagora.org/request/boa/your-address and request test BOA $ npx truffle develop Truffle Develop started at http://127.0.0.1:9545/ Accounts: (0) 0xc7e4bbc4269fdc62f879834e363173aee7895f45 Private Keys: (0) ef424b4dc91a9c9d6c1fc4ae0a50ce80668f3a955a7e982584b45577e2c70e27 Mnemonic: mechanic cannon setup general indicate people notable frown poet friend credit true \u26a0\ufe0f Important \u26a0\ufe0f : This mnemonic was created for you by Truffle. It is not secure. Ensure you do not use it on production blockchains, or else you risk losing funds. truffle(develop)> migrate Compiling your contracts... =========================== > Compiling ./contracts/Migrations.sol > Artifacts written to /Users/Documents/work/mynft/build/contracts > Compiled successfully using: - solc: 0.5.16+commit.9c3226ce.Emscripten.clang Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567 > Blocks: 0 Seconds: 0 > contract address: 0x77409B688eA5461078a31450F3138EA8324F72C9 > block number: 1 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.99616114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH 2_deploy.js =========== Deploying 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e > Blocks: 0 Seconds: 0 > contract address: 0xEaB17D581552123695f03F12b09e378EE9463b44 > block number: 3 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.92142266 > gas used: 3694586 (0x385ffa) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.07389172 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.07389172 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07773058 ETH truffle(develop)> We can deploy our new NFT to our development blockchain using migrate. truffle(develop)> migrate Compiling your contracts... =========================== > Everything is up to date, there is nothing to compile. Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Replacing 'Migrations' ---------------------- > transaction hash: 0x5d71b0a45a0fe20e2ca645393bb44b83fbd47351c009c48be0b8b84b610fb3b7 > Blocks: 0 Seconds: 0 > contract address: 0x3797c825cAC4a1FA765F6D8cd7787fB195849555 > block number: 1 > block timestamp: 1590736865 > account: 0x0445c33BdCe670D57189158b88c0034B579f37cE > balance: 99.99671674 > gas used: 164163 (0x28143) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00328326 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00328326 ETH 2_deploy.js =========== Replacing 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0x166d7b28f4afb949585b5a0e5b4151daa54acbcb70566b202fd62ab380a6650c > Blocks: 0 Seconds: 0 > contract address: 0xDEE9411430c7Dd9b67fC6DA723DE729AdAB50AD7 > block number: 3 > block timestamp: 1590736866 > account: 0x0445c33BdCe670D57189158b88c0034B579f37cE > balance: 99.92191642 > gas used: 3697675 (0x386c0b) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.0739535 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.0739535 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07723676 ETH We can then use our deployed contract. truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed() undefined Interact With Your Token The accounts that we can use were displayed when we started truffle develop Token Metadata We can call the contract to read token metadata such as name , symbol and baseURI truffle(develop)> await nft.name() 'My NFT' truffle(develop)> await nft.symbol() 'NFT' truffle(develop)> await nft.baseURI() Mint We can send a transaction to mint tokens to a given account, from an account with the minter role. In our case we are minting from the account which deployed the token, which is given the minter role. We will mint 1 NFT with token ID 0. truffle(develop)> await nft.mint(\"0x0445c33bdce670d57189158b88c0034b579f37ce\") { tx: '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d', receipt: { transactionHash: '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d', transactionIndex: 0, blockHash: '0x3ad3cfcb26da0c969e9d5a5414a5e90a91a3a862c9e9082afc38a0ec0f1a5d00', blockNumber: 5, from: '0x0445c33bdce670d57189158b88c0034b579f37ce', to: '0xdee9411430c7dd9b67fc6da723de729adab50ad7', gasUsed: 156470, ... We can check the owner of the token and the token URI for the metadata truffle(develop)> await nft.ownerOf(1) '0x0445c33BdCe670D57189158b88c0034B579f37cE' truffle(develop)> await nft.tokenURI(1) Metadata EIP-721 2 includes an optional metadata extension with a name , symbol and for each tokenID a tokenURI with can point to a JSON file with name , description and image for the given token ID. How you create and host this metadata is up to you. I would suggest using a domain that you control to point to where you host the data so that you can move it as required. For this tutorial, we will use My JSON Server where we can store a single JSON file in a GitHub repository that we can access via a fake JSON server. For production we need to store our metadata in a permanent location that can exist for the life of the token. A sample JSON for tokenID 1 is: http://my-json-server.typicode.com/huangsuyu/nft/tokens/1 Deploy to a Public Testnet Next we will deploy to BizNet testnet . To deploy, we will use the instructions for Connecting to Public Test Networks with Truffle You will need the following: An Infura project ID (or a public node provider of your choice) @truffle/hdwallet-provider installed Configure truffle-config.js for Rinkeby network A funded testnet account and mnemonic A secrets.json or another secret-management solution. Make sure you don\u2019t commit this to GitHub! My truffle-config.js has the following rinkeby configuration: testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, mainnet: { provider: () => new HDWalletProvider(mnemonic, `https://mainnet.bosagora.org`), network_id: 2151, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, Deploy to BizNet Testnet $ npx truffle migrate --network testnet Compiling your contracts... =========================== > Everything is up to date, there is nothing to compile. Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567 > Blocks: 0 Seconds: 0 > contract address: 0x77409B688eA5461078a31450F3138EA8324F72C9 > block number: 1 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.99616114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH 2_deploy.js =========== Deploying 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e > Blocks: 0 Seconds: 0 > contract address: 0xEaB17D581552123695f03F12b09e378EE9463b44 > block number: 3 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.92142266 > gas used: 3694586 (0x385ffa) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.07389172 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.07389172 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07773058 ETH Mint We can send a transaction to mint tokens to a given account, from an account with the minter role. truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed() undefined In our case we are minting from the account which deployed the token, which is given the minter role. To see configured accounts run the command accounts . truffle(rinkeby)> accounts [ '0x133d144f52705ceb3f5801b63b9ebccf4102f5ed', We will mint 1 NFT with token ID 1. Specify the address that you want to be the token holder ( 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 is one of my test accounts) truffle(rinkeby)> await nft.mint(\"0x133d144f52705ceb3f5801b63b9ebccf4102f5ed\") { tx: '0x0d90d4a2a4ac3f33d5220deb11e8f65adf14a6669afd18abd4cce8ca7ab58e04', receipt: { blockHash: '0x724ba66bc1d799820c05a93ae67991b21bb769fd1e9dddd5db9f725f5f633331', blockNumber: 3333746, contractAddress: null, cumulativeGasUsed: 164785, from: '0x77737a65c296012c67f8c7f656d1df81827c9541', gasUsed: 164785, ...","title":"NFT \ubc30\ud3ec"},{"location":"biznet/develop/nft/deploy/#deploy-nfts-on-biznet","text":"This work is inspired by this blog In this tutorial we will create a non-fungible token (NFT) and deploy to a public testnet. ERC721 is a standard for representing ownership of non-fungible tokens , that is, where each token is unique such as in real estate or collectibles. We will use Presets contracts in OpenZeppelin Contracts to create an ERC721 and deploy using Truffle.","title":"Deploy NFTs on BizNet"},{"location":"biznet/develop/nft/deploy/#setting-up-the-environment","text":"We begin by creating a new project. $ mkdir mynft && cd mynft $ npm init -y Then we install OpenZeppelin Contracts which has an implementation of ERC721. $ npm i --save-dev @openzeppelin/contracts Next we install a development tool for deployment, for this tutorial we will use Truffle but we could use any other tools such as Buidler, Remix or OpenZeppelin CLI . $ npm i truffle","title":"Setting up the Environment"},{"location":"biznet/develop/nft/deploy/#getting-the-contract-artifacts","text":"We will setup our Solidity project using truffle init to create a contracts directory and configuration to connect to a network. $ npx truffle init Starting init... ================ > Copying project files to Init successful, sweet! We are going to use Preset ERC721PresetMinterPauserAutoId which is an ERC721 that is preset so it can be minted (with auto token ID and metadata URI), paused and burned. The Preset contracts have already been compiled, so we only need to copy the artifacts to the build/contracts directory. $ mkdir -p build/contracts/ $ cp node_modules/@openzeppelin/contracts/build/contracts/* build/contracts/ Using your favorite editor create 2_deploy.js in the migrations directory with the following contents: // migrations/2_deploy.js // SPDX-License-Identifier: MIT const ERC721PresetMinterPauserAutoId = artifacts.require(\"ERC721PresetMinterPauserAutoId\"); module.exports = function(deployer) { deployer.deploy(ERC721PresetMinterPauserAutoId, \"My NFT\",\"NFT\", \"http://my-json-server.typicode.com/huangsuyu/nft/tokens\"); };","title":"Getting the Contract Artifacts"},{"location":"biznet/develop/nft/deploy/#deploy-the-contract-to-a-local-blockchain","text":"We will use truffle develop to open a Truffle console with a development blockchain Head over to https://faucet.bosagora.org/request/boa/your-address and request test BOA $ npx truffle develop Truffle Develop started at http://127.0.0.1:9545/ Accounts: (0) 0xc7e4bbc4269fdc62f879834e363173aee7895f45 Private Keys: (0) ef424b4dc91a9c9d6c1fc4ae0a50ce80668f3a955a7e982584b45577e2c70e27 Mnemonic: mechanic cannon setup general indicate people notable frown poet friend credit true \u26a0\ufe0f Important \u26a0\ufe0f : This mnemonic was created for you by Truffle. It is not secure. Ensure you do not use it on production blockchains, or else you risk losing funds. truffle(develop)> migrate Compiling your contracts... =========================== > Compiling ./contracts/Migrations.sol > Artifacts written to /Users/Documents/work/mynft/build/contracts > Compiled successfully using: - solc: 0.5.16+commit.9c3226ce.Emscripten.clang Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567 > Blocks: 0 Seconds: 0 > contract address: 0x77409B688eA5461078a31450F3138EA8324F72C9 > block number: 1 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.99616114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH 2_deploy.js =========== Deploying 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e > Blocks: 0 Seconds: 0 > contract address: 0xEaB17D581552123695f03F12b09e378EE9463b44 > block number: 3 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.92142266 > gas used: 3694586 (0x385ffa) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.07389172 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.07389172 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07773058 ETH truffle(develop)> We can deploy our new NFT to our development blockchain using migrate. truffle(develop)> migrate Compiling your contracts... =========================== > Everything is up to date, there is nothing to compile. Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Replacing 'Migrations' ---------------------- > transaction hash: 0x5d71b0a45a0fe20e2ca645393bb44b83fbd47351c009c48be0b8b84b610fb3b7 > Blocks: 0 Seconds: 0 > contract address: 0x3797c825cAC4a1FA765F6D8cd7787fB195849555 > block number: 1 > block timestamp: 1590736865 > account: 0x0445c33BdCe670D57189158b88c0034B579f37cE > balance: 99.99671674 > gas used: 164163 (0x28143) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00328326 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00328326 ETH 2_deploy.js =========== Replacing 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0x166d7b28f4afb949585b5a0e5b4151daa54acbcb70566b202fd62ab380a6650c > Blocks: 0 Seconds: 0 > contract address: 0xDEE9411430c7Dd9b67fC6DA723DE729AdAB50AD7 > block number: 3 > block timestamp: 1590736866 > account: 0x0445c33BdCe670D57189158b88c0034B579f37cE > balance: 99.92191642 > gas used: 3697675 (0x386c0b) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.0739535 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.0739535 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07723676 ETH We can then use our deployed contract. truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed() undefined","title":"Deploy the Contract to a Local Blockchain"},{"location":"biznet/develop/nft/deploy/#interact-with-your-token","text":"The accounts that we can use were displayed when we started truffle develop","title":"Interact With Your Token"},{"location":"biznet/develop/nft/deploy/#token-metadata","text":"We can call the contract to read token metadata such as name , symbol and baseURI truffle(develop)> await nft.name() 'My NFT' truffle(develop)> await nft.symbol() 'NFT' truffle(develop)> await nft.baseURI()","title":"Token Metadata"},{"location":"biznet/develop/nft/deploy/#mint","text":"We can send a transaction to mint tokens to a given account, from an account with the minter role. In our case we are minting from the account which deployed the token, which is given the minter role. We will mint 1 NFT with token ID 0. truffle(develop)> await nft.mint(\"0x0445c33bdce670d57189158b88c0034b579f37ce\") { tx: '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d', receipt: { transactionHash: '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d', transactionIndex: 0, blockHash: '0x3ad3cfcb26da0c969e9d5a5414a5e90a91a3a862c9e9082afc38a0ec0f1a5d00', blockNumber: 5, from: '0x0445c33bdce670d57189158b88c0034b579f37ce', to: '0xdee9411430c7dd9b67fc6da723de729adab50ad7', gasUsed: 156470, ... We can check the owner of the token and the token URI for the metadata truffle(develop)> await nft.ownerOf(1) '0x0445c33BdCe670D57189158b88c0034B579f37cE' truffle(develop)> await nft.tokenURI(1)","title":"Mint"},{"location":"biznet/develop/nft/deploy/#metadata","text":"EIP-721 2 includes an optional metadata extension with a name , symbol and for each tokenID a tokenURI with can point to a JSON file with name , description and image for the given token ID. How you create and host this metadata is up to you. I would suggest using a domain that you control to point to where you host the data so that you can move it as required. For this tutorial, we will use My JSON Server where we can store a single JSON file in a GitHub repository that we can access via a fake JSON server. For production we need to store our metadata in a permanent location that can exist for the life of the token. A sample JSON for tokenID 1 is: http://my-json-server.typicode.com/huangsuyu/nft/tokens/1","title":"Metadata"},{"location":"biznet/develop/nft/deploy/#deploy-to-a-public-testnet","text":"Next we will deploy to BizNet testnet . To deploy, we will use the instructions for Connecting to Public Test Networks with Truffle You will need the following: An Infura project ID (or a public node provider of your choice) @truffle/hdwallet-provider installed Configure truffle-config.js for Rinkeby network A funded testnet account and mnemonic A secrets.json or another secret-management solution. Make sure you don\u2019t commit this to GitHub! My truffle-config.js has the following rinkeby configuration: testnet: { provider: () => new HDWalletProvider(mnemonic, `https://testnet.bosagora.org`), network_id: 2019, confirmations: 10, timeoutBlocks: 200, skipDryRun: true }, mainnet: { provider: () => new HDWalletProvider(mnemonic, `https://mainnet.bosagora.org`), network_id: 2151, confirmations: 10, timeoutBlocks: 200, skipDryRun: true },","title":"Deploy to a Public Testnet"},{"location":"biznet/develop/nft/deploy/#deploy-to-biznet-testnet","text":"$ npx truffle migrate --network testnet Compiling your contracts... =========================== > Everything is up to date, there is nothing to compile. Starting migrations... ====================== > Network name: 'develop' > Network id: 5777 > Block gas limit: 6721975 (0x6691b7) 1_initial_migration.js ====================== Deploying 'Migrations' ---------------------- > transaction hash: 0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567 > Blocks: 0 Seconds: 0 > contract address: 0x77409B688eA5461078a31450F3138EA8324F72C9 > block number: 1 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.99616114 > gas used: 191943 (0x2edc7) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.00383886 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.00383886 ETH 2_deploy.js =========== Deploying 'ERC721PresetMinterPauserAutoId' ------------------------------------------ > transaction hash: 0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e > Blocks: 0 Seconds: 0 > contract address: 0xEaB17D581552123695f03F12b09e378EE9463b44 > block number: 3 > block timestamp: 1604387655 > account: 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 > balance: 99.92142266 > gas used: 3694586 (0x385ffa) > gas price: 20 gwei > value sent: 0 ETH > total cost: 0.07389172 ETH > Saving migration to chain. > Saving artifacts ------------------------------------- > Total cost: 0.07389172 ETH Summary ======= > Total deployments: 2 > Final cost: 0.07773058 ETH","title":"Deploy to BizNet Testnet"},{"location":"biznet/develop/nft/deploy/#mint_1","text":"We can send a transaction to mint tokens to a given account, from an account with the minter role. truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed() undefined In our case we are minting from the account which deployed the token, which is given the minter role. To see configured accounts run the command accounts . truffle(rinkeby)> accounts [ '0x133d144f52705ceb3f5801b63b9ebccf4102f5ed', We will mint 1 NFT with token ID 1. Specify the address that you want to be the token holder ( 0xc7e4bBc4269fdC62F879834E363173aeE7895F45 is one of my test accounts) truffle(rinkeby)> await nft.mint(\"0x133d144f52705ceb3f5801b63b9ebccf4102f5ed\") { tx: '0x0d90d4a2a4ac3f33d5220deb11e8f65adf14a6669afd18abd4cce8ca7ab58e04', receipt: { blockHash: '0x724ba66bc1d799820c05a93ae67991b21bb769fd1e9dddd5db9f725f5f633331', blockNumber: 3333746, contractAddress: null, cumulativeGasUsed: 164785, from: '0x77737a65c296012c67f8c7f656d1df81827c9541', gasUsed: 164785, ...","title":"Mint"},{"location":"biznet/develop/nft/metadata/","text":"NFT Metadata Standard Implementing Token URI To facilitate a marketplace on BizNet to pull in off-chain metadata for ERC721 assets, the NFT contract will need to return a URI where the metadata can be found. To find this URI, the tokenURI method in ERC721 and the uri method in ERC1155 are used to track your NFT. You should implement the function in the Contract: /** * @dev Returns an URI for a given token ID */ function tokenURI(uint256 _tokenId) public view returns (string) { return Strings.strConcat( baseTokenURI(), Strings.uint2str(_tokenId) ); } The tokenURI function in your Contract should return an HTTP or IPFS URL. When queried, this URL should in turn return a JSON blob of data with the metadata for your token. Metadata Structure Marketplaces on BizNet support metadata that is structured according to the official ERC721 metadata standard . Additionally, several properties for your items are supported, giving you all the sorting and filtering capabilities on BSC Marketplaces. The below metadata structure, allows the BizNet Marketplace to read and display the details about the assets which your NFTs represent. { \"name\":\"NFT Name\", \"description\":\"NFT Description\", \"image\":\"https://somedomain.com/pic/xxxx.jpg\", \"external_url\":\"https://originalsite.io/2\", \"attributes\":[...] } Here's how each of these properties work: Property Description name Name of the item. Max 200 characters. description A human-readable description of the item. Markdown is supported. Max 500 characters. image This is the URL to the image of the item. It can be just about any type of image. A 350 x 350 image is recommended. animation_url This is the URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. animation_type This is the file format of the multi-media attachment provided from animation_url. external_url This is the URL that will appear below the asset's image on the marketplace and will allow users to leave the marketplace and view the item on your site. attributes These are the attributes for the item to describe the detail of the NFT. (see array below) Attributes To present NFT traits, include the following array in the metadata: { \"attributes\":[ { \"trait_type\":\"Rarity Class\", \"value\":\"Normal\" }, { \"trait_type\":\"Type\", \"value\":\"Male\" }, { \"trait_type\":\"Face\", \"value\":\"Mole\" }, { \"trait_type\":\"Beard\", \"value\":\"Chinstrap\" }, { \"display_type\":\"boost_number\", \"trait_type\":\"Power\", \"value\":\"Power\" }, { \"display_type\":\"boost_percentage\", \"trait_type\":\"Health Increase\", \"value\":\"20\" }, { \"display_type\":\"number\", \"trait_type\":\"Generation\", \"value\":\"3\" } ] } Here trait_type is the name of the trait, value is the value of the trait, and display_type is a field indicating how you would like a numeric value should be displayed. For string traits, you don't have to worry about display_type . All traits included in the attributes will be displayed in Attribute . If you don't want to have a trait_type for a particular trait, you can include just a value in the trait and it will be set as a generic attribute. Numeric Traits There are 3 supported options for display_type : number will show the value in pure number, boost_number allows you to show the number with Plus or Minus symbol, and boost_percentage is similar to boost_number but will show a percent sign behind the number. Date Marketplace also supports date traits in date display_type . Pass in a unix timestamp as the value. { \"display_type\": \"date\", \"trait_type\": \"birthday\", \"value\": 1608490000 }","title":"NFT \ud45c\uc900 \ub9e4\ud0c0\ub370\uc544\ud0c0"},{"location":"biznet/develop/nft/metadata/#nft-metadata-standard","text":"","title":"NFT Metadata Standard"},{"location":"biznet/develop/nft/metadata/#implementing-token-uri","text":"To facilitate a marketplace on BizNet to pull in off-chain metadata for ERC721 assets, the NFT contract will need to return a URI where the metadata can be found. To find this URI, the tokenURI method in ERC721 and the uri method in ERC1155 are used to track your NFT. You should implement the function in the Contract: /** * @dev Returns an URI for a given token ID */ function tokenURI(uint256 _tokenId) public view returns (string) { return Strings.strConcat( baseTokenURI(), Strings.uint2str(_tokenId) ); } The tokenURI function in your Contract should return an HTTP or IPFS URL. When queried, this URL should in turn return a JSON blob of data with the metadata for your token.","title":"Implementing Token URI"},{"location":"biznet/develop/nft/metadata/#metadata-structure","text":"Marketplaces on BizNet support metadata that is structured according to the official ERC721 metadata standard . Additionally, several properties for your items are supported, giving you all the sorting and filtering capabilities on BSC Marketplaces. The below metadata structure, allows the BizNet Marketplace to read and display the details about the assets which your NFTs represent. { \"name\":\"NFT Name\", \"description\":\"NFT Description\", \"image\":\"https://somedomain.com/pic/xxxx.jpg\", \"external_url\":\"https://originalsite.io/2\", \"attributes\":[...] } Here's how each of these properties work: Property Description name Name of the item. Max 200 characters. description A human-readable description of the item. Markdown is supported. Max 500 characters. image This is the URL to the image of the item. It can be just about any type of image. A 350 x 350 image is recommended. animation_url This is the URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. animation_type This is the file format of the multi-media attachment provided from animation_url. external_url This is the URL that will appear below the asset's image on the marketplace and will allow users to leave the marketplace and view the item on your site. attributes These are the attributes for the item to describe the detail of the NFT. (see array below)","title":"Metadata Structure"},{"location":"biznet/develop/nft/metadata/#attributes","text":"To present NFT traits, include the following array in the metadata: { \"attributes\":[ { \"trait_type\":\"Rarity Class\", \"value\":\"Normal\" }, { \"trait_type\":\"Type\", \"value\":\"Male\" }, { \"trait_type\":\"Face\", \"value\":\"Mole\" }, { \"trait_type\":\"Beard\", \"value\":\"Chinstrap\" }, { \"display_type\":\"boost_number\", \"trait_type\":\"Power\", \"value\":\"Power\" }, { \"display_type\":\"boost_percentage\", \"trait_type\":\"Health Increase\", \"value\":\"20\" }, { \"display_type\":\"number\", \"trait_type\":\"Generation\", \"value\":\"3\" } ] } Here trait_type is the name of the trait, value is the value of the trait, and display_type is a field indicating how you would like a numeric value should be displayed. For string traits, you don't have to worry about display_type . All traits included in the attributes will be displayed in Attribute . If you don't want to have a trait_type for a particular trait, you can include just a value in the trait and it will be set as a generic attribute.","title":"Attributes"},{"location":"biznet/develop/nft/metadata/#numeric-traits","text":"There are 3 supported options for display_type : number will show the value in pure number, boost_number allows you to show the number with Plus or Minus symbol, and boost_percentage is similar to boost_number but will show a percent sign behind the number.","title":"Numeric Traits"},{"location":"biznet/develop/nft/metadata/#date","text":"Marketplace also supports date traits in date display_type . Pass in a unix timestamp as the value. { \"display_type\": \"date\", \"trait_type\": \"birthday\", \"value\": 1608490000 }","title":"Date"},{"location":"biznet/develop/running_node/node/","text":"\ub178\ub4dc\ub97c \uc6b4\uc601\ud558\ub294 \ubc29\ubc95 \ub178\ub4dc\uc758 \uae30\ub2a5\ub4e4 \uc804\uccb4 \ube14\ub85d\uccb4\uc778 \uae30\ub85d\uc744 \ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\ud558\uace0 \ub124\ud2b8\uc6cc\ud06c\uc758 \ub370\uc774\ud130 \uc694\uccad\uc5d0 \uc751\ub2f5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8 \ube14\ub85d \ubc0f \ud2b8\ub79c\uc7ad\uc158\uc744 \uc218\uc2e0\ud558\uace0 \uc720\ud6a8\uc131\uc744 \uac80\uc0ac\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \uacc4\uc815\uc758 \uc0c1\ud0dc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. \uc9c0\uc6d0\ub418\ub294 \ud50c\ub7ab\ud3fc Mac OS X \uc640 Linux \uc5d0\uc11c \ub178\ub4dc \uc2e4\ud589\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc81c\uc548\ub41c \uc694\uad6c \uc0ac\ud56d \ub178\ub4dc \ucd5c\uc2e0 \ubc84\uc804\uc758 Mac OS X \ub610\ub294 Linux\ub97c \uc2e4\ud589\ud558\ub294 VPS. \uc911\uc694 2T GB\uc758 \uc5ec\uc720 \ub514\uc2a4\ud06c \uacf5\uac04, \uc194\ub9ac\ub4dc \uc2a4\ud14c\uc774\ud2b8 \ub4dc\ub77c\uc774\ube0c(SSD), gp3, 8k IOPS, 250MB/S \ucc98\ub9ac\ub7c9, \uc77d\uae30 \uc9c0\uc5f0 \uc2dc\uac04 <1ms. (\uc2a4\ub0c5/\ube60\ub978 \ub3d9\uae30\ud654\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0 NVMe SSD\uac00 \ud544\uc694\ud569\ub2c8\ub2e4) 16\ucf54\uc5b4 CPU\uc640 64GB \uba54\ubaa8\ub9ac(RAM). AWS\uc5d0\uc11c\ub294 m5zn.3xlarge \uc778\uc2a4\ud134\uc2a4 \uc720\ud615, Google \ud074\ub77c\uc6b0\ub4dc\uc5d0\uc11c\ub294 c2-standard-16\uc744 \uc81c\uc548\ud569\ub2c8\ub2e4. \uc5c5\ub85c\ub4dc/\ub2e4\uc6b4\ub85c\ub4dc \uc18d\ub3c4\uac00 \ucd08\ub2f9 5MB\uc778 \uad11\ub300\uc5ed \uc778\ud130\ub137 \uc5f0\uacb0 \uc124\uc815 \uc5f0\uacb0\uacfc \uad00\ub828\ub41c \uc77c\ubc18\uc801\uc778 \ubb38\uc81c \uac00\ub054 \ub3d9\uae30\ud654\uac00 \uc548\ub420 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. geth \ub97c \uac80\uc0c9 \ud504\ub85c\ud1a0\ucf5c \uc5c6\uc774 \uc2dc\uc791 \ud588\uc73c\uba70 --nodiscover \ub9e4\uac1c\ubcc0\uc218\ub97c False \ub85c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uace0\uc815 \ub178\ub4dc\ub85c \uc804\uccb4 \ub178\ub4dc\ub97c \uc2e4\ud589\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc694. BootstrapNodes \ub97c \uc5c5\ub370\uc774\ud2b8 BootstrapNodes = [\"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\",\"enode://4c76a1996466b69bd6dc6dd9566aff175cb8aadc846241d100378bdb1d9a4ea47196d9f660d308954ed8a2c725c4f6f4616e9cf108abb5efd766ad9bc7c9af35@3.39.127.36:30303\"] Static nodes \ub97c \ucd94\uac00 Geth\ub294 \ub610\ud55c \ud56d\uc0c1 \uc5f0\uacb0\ud558\uace0 \uc2f6\uc740 \ud2b9\uc815 \ud53c\uc5b4\uac00 \uc788\ub294 \uacbd\uc6b0 \uc815\uc801 \ub178\ub4dc\ub77c\ub294 \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uace0\uc815 \ub178\ub4dc\ub294 \uc5f0\uacb0\uc774 \ub04a\uae38 \ub54c \ub2e4\uc2dc \uc5f0\uacb0\ub429\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc6a9\uc744 \ud30c\uc77c\uc5d0 <datadir>/geth/static-nodes.json \uc544\ub798 \ub0b4\uc6a9\uc744 \ub123\uc5b4 \uc601\uad6c \uc815\uc801 \ub178\ub4dc\ub97c \uad6c\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 [ \"enode://pubkey@ip:port\", \"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\", \"enode://844a0cbe8a98fbfc2d80c20539148c4c0862fa06e3e9580bd53ce05c7f26ac4a5cb78369adcb7ac146062273cb437a6e4dd1022cf5a42e31409e279741494a11@54.255.235.26:30303\", \"enode://5ef7a9487b4944f0eaca0ffbd36839de9cf36d871104d4ebc788d75ccf5418e3103bb73791cfc8942b80dba33aad7daa6aed709ba4ee1efa26564f7af523f9c5@54.169.187.148:30303\", \"enode://ce91817b76993736a1c01ab419597528a4084ab57928c60e43741d13d78f941396895d33a3b8ab9286cd403f8520a873af0c692151905b51b7ea7370d832d3bc@18.136.209.89:30303\", \"enode://a578d5c7c87dc293d3fa9f9176f27049dc6e5e259914202b52a15ad52b2529fd375b62e055097ff520a7f93a876d1fcbca5ef0b32dab273e474db907f33d97b3@13.215.191.60:30303\", \"enode://4c76a1996466b69bd6dc6dd9566aff175cb8aadc846241d100378bdb1d9a4ea47196d9f660d308954ed8a2c725c4f6f4616e9cf108abb5efd766ad9bc7c9af35@3.39.127.36:30303\", \"enode://9b086682cfd01ac2223700676d718eb5a7945c6200ca113d0555c4aebec3ee19a6161a88fbee50662254976d9a97c4c5b7e50f55bfbf7ed598cd8c5c078dbd7d@54.180.121.94:30303\", \"enode://b39fd722a26cf48c6b055b0eed5b49c98d420d546d3419ff6a2499ddd190aa5a4e7371343d63a0150e7695bb42387b3d6837f99a49db8f05d78fc775689e2210@15.164.170.19:30303\", \"enode://c08fdd44bc3e09267321a99c6057ec870d5bcb1e3b5ecf7ef48158881abc99d1cca2174328e80917003c1ee27908792badc148a80dc3bdee365c748fcd046723@54.180.93.83:30303\" ] admin.addPeer() \ub97c \uc0ac\uc6a9\ud558\uc5ec js \ucf58\uc194\uc744 \ud1b5\ud574 \ub7f0\ud0c0\uc784\uc5d0 \uc815\uc801 \ub178\ub4dc\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. admin.addPeer( \"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\" ) Trusted nodes \ub97c \ucd94\uac00 Geth\ub294 \ud53c\uc5b4 \uc81c\ud55c\uc5d0 \ub3c4\ub2ec\ud55c \uacbd\uc6b0\uc5d0\ub3c4 \ud56d\uc0c1 \ub2e4\uc2dc \uc5f0\uacb0\ud560 \uc218 \uc788\ub294 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ub178\ub4dc\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uad6c\uc131 \ud30c\uc77c\uc744 \ud1b5\ud574 \uc601\uad6c\uc801\uc73c\ub85c \ucd94\uac00\ud558\uac70\ub098 RPC \ud638\ucd9c\uc744 \ud1b5\ud574 \uc784\uc2dc\ub85c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uad6c\uc131\ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. /geth/trusted-nodes.json \ub3d9\uae30\ud654 \ubaa8\ub4dc \ube60\ub978 \ub3d9\uae30\ud654 \uae30\ubcf8 \ub3d9\uae30\ud654 \ubaa8\ub4dc\uc785\ub2c8\ub2e4 . \uc804\uccb4 \uc0c1\ud0dc \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 \ud5e4\ub354\ub97c \uba3c\uc800 \uc694\uccad\ud558\uace0 \ub098\uc911\uc5d0 \ube14\ub85d \ubcf8\ubb38\uacfc \uc601\uc218\uc99d\uc744 \uc791\uc131\ud558\uc5ec \ube60\ub978 \ub3d9\uae30\ud654\ub97c \uc218\ud589\ud558\ub294 \ub178\ub4dc\ub97c \ub3d9\uae30\ud654\ud569\ub2c8\ub2e4. \ube60\ub978 \ub3d9\uae30\ud654\uac00 BizNet \ub124\ud2b8\uc6cc\ud06c\uc758 \ucd5c\uc0c1\uc758 \ube14\ub85d\uc5d0 \ub3c4\ub2ec\ud558\uba74 \uc804\uccb4 \ub3d9\uae30\ud654 \ubaa8\ub4dc\ub85c \uc804\ud658\ub429\ub2c8\ub2e4. \uc804\uccb4 \ub3d9\uae30\ud654 \uc81c\ub124\uc2dc\uc2a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \ubaa8\ub4e0 \ube14\ub85d\uc744 \ud655\uc778\ud558\uace0 \ubaa8\ub4e0 \ud2b8\ub79c\uc7ad\uc158\uc744 \uc2e4\ud589\ud558\ub294 \ub178\ub4dc\ub97c \ub3d9\uae30\ud654\ud569\ub2c8\ub2e4. \uc774 \ubaa8\ub4dc\ub294 \ube60\ub978 \ub3d9\uae30\ud654 \ubaa8\ub4dc\ubcf4\ub2e4 \uc57d\uac04 \ub290\ub9ac\uc9c0\ub9cc \ubcf4\uc548\uc774 \uac15\ud654\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub178\ub4dc\ub97c \uc2e4\ud589\ud558\ub294 \ub2e8\uacc4 \uc2a4\ub0c5\uc0f7\uc5d0\uc11c \ub3d9\uae30\ud654 \uc900\ube44 \uc911\uc785\ub2c8\ub2e4. \uc81c\ub124\uc2dc\uc2a4 \ube14\ub85d\uc5d0\uc11c \ub3d9\uae30\ud654 \uc18c\uc2a4 \ucf54\ub4dc\ub85c \ube4c\ub4dc Go 1.13+ \ub97c \uc124\uce58\ud558\uace0, PATH \uc5d0 GOPATH \ub97c \ucd94\uac00\ud588\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624 git clone https://github.com/bosagora/go-ethereum # Enter the folder go-ethereum was cloned into cd go-ethereum # Compile and install go-ethereum make geth \ub610\ub294 \ub9b4\ub9ac\uc2a4 \ud398\uc774\uc9c0 \uc5d0\uc11c \uc774\ubbf8 \ube4c\ub4dc\ub41c \ubc14\uc774\ub108\ub9ac\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ud558\uac70\ub098 \uc544\ub798 \uc9c0\uce68\uc744 \ub530\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4. # Linux wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep linux |cut -d\\\" -f4) unzip linux.zip # MacOS wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep mac |cut -d\\\" -f4) unzip mac.zip \uad6c\uc131 \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc \ub2e4\uc6b4\ub85c\ub4dc genesis.json \ubc0f config.toml : ## mainet wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep mainnet |cut -d\\\" -f4) unzip mainnet.zip ## testnet wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep testnet |cut -d\\\" -f4) unzip testnet.zip \ub85c\uceec\uc5d0\uc11c \uc81c\ub124\uc2dc\uc2a4 \uc0c1\ud0dc \uc0dd\uc131\ud558\uae30 geth --datadir node init genesis.json \ub2e4\uc74c \ucd9c\ub825\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. INFO [05-19|14:53:17.468] Allocated cache and file handles database=/Users/michael/Downloads/go-ethereum/node/geth/chaindata cache=16.00MiB handles=16 INFO [05-19|14:53:17.498] Writing custom genesis block INFO [05-19|14:53:17.501] Persisted trie from memory database nodes=21 size=56.84KiB time=357.915\u00b5s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=-574.00B INFO [05-19|14:53:17.502] Successfully wrote genesis state database=chaindata hash=7d79cc\u2026fb0d1e INFO [05-19|14:53:17.503] Allocated cache and file handles database=/Users/michael/Downloads/go-ethereum/node/geth/lightchaindata cache=16.00MiB handles=16 INFO [05-19|14:53:17.524] Writing custom genesis block INFO [05-19|14:53:17.525] Persisted trie from memory database nodes=21 size=56.84KiB time=638.396\u00b5s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=-574.00B INFO [05-19|14:53:17.528] Successfully wrote genesis state database=lightchaindata hash=7d79cc\u2026fb0d1e \ub178\ub4dc \uc2dc\uc791 ## start a node geth --config ./config.toml --datadir ./node \ub178\ub4dc \uc720\uc9c0 \uad00\ub9ac \ubc14\uc774\ub108\ub9ac \ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ucd5c\uc2e0 \ub9b4\ub9ac\uc2a4\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \ucd5c\uc2e0 \ubc84\uc804 \uc740 \ub354 \uc548\uc815\uc801\uc774\uace0 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc2a4\ud1a0\ub9ac\uc9c0 \ud14c\uc2a4\ud2b8\uc5d0 \ub530\ub974\uba74 \uc2a4\ud1a0\ub9ac\uc9c0 \ud06c\uae30\uac00 1.5T\ub97c \ucd08\uacfc\ud558\uba74 \ub178\ub4dc\uc758 \uc131\ub2a5\uc774 \uc800\ud558\ub429\ub2c8\ub2e4. \ub178\ub4dc\ub294 \ud56d\uc0c1 \uc2a4\ud1a0\ub9ac\uc9c0\ub97c \uc815\ub9ac\ud558\uc5ec \uac00\ubcbc\uc6b4 \uc2a4\ud1a0\ub9ac\uc9c0\ub97c \uc720\uc9c0\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc2a4\ud1a0\ub9ac\uc9c0 \uc815\ub9ac \ubc29\ubc95: \ub178\ub4dc\ub97c \uc911\uc9c0\ud569\ub2c8\ub2e4. \uc2e4\ud589 nohup geth snapshot prune-state --datadir {the data dir of your node} & . \uc644\ub8cc\ud558\ub294 \ub370 3-5\uc2dc\uac04\uc774 \uac78\ub9bd\ub2c8\ub2e4. \uc644\ub8cc\ub418\uba74 \ub178\ub4dc\ub97c \uc2dc\uc791\ud558\uc2ed\uc2dc\uc624. \uc720\uc9c0 \uad00\ub9ac\uc790\ub294 \ud56d\uc0c1 \uba87 \uac1c\uc758 \ubc31\uc5c5 \ub178\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud558\ub4dc\uc6e8\uc5b4\ub3c4 \uc911\uc694 \ud558\ubbc0\ub85c SSD\uac00 2T GB\uc758 \uc5ec\uc720 \ub514\uc2a4\ud06c \uacf5\uac04, \uc194\ub9ac\ub4dc \uc2a4\ud14c\uc774\ud2b8 \ub4dc\ub77c\uc774\ube0c(SSD), gp3, 8k IOPS, 250MB/S \ucc98\ub9ac\ub7c9, \uc77d\uae30 \uc9c0\uc5f0 \uc2dc\uac04 <1ms\ub97c \ucda9\uc871\ud558\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624 . \uac00\ubcbc\uc6b4 \uc2a4\ud1a0\ub9ac\uc9c0 \ub178\ub4dc\uac00 \ucda9\ub3cc\ud558\uac70\ub098 \uac15\uc81c \uc885\ub8cc\ub418\uba74 \ub178\ub4dc\ub294 \uba87 \ubd84 \ub610\ub294 \uba87 \uc2dc\uac04 \uc804\uc758 \ube14\ub85d\uc5d0\uc11c \ub3d9\uae30\ud654\ub429\ub2c8\ub2e4. \uc774\ub294 \uba54\ubaa8\ub9ac\uc758 \uc0c1\ud0dc\uac00 \uc2e4\uc2dc\uac04\uc73c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc720\uc9c0\ub418\uc9c0 \uc54a\uace0 \ub178\ub4dc\uac00 \uc2dc\uc791\ub418\uba74 \ub9c8\uc9c0\ub9c9 \uccb4\ud06c\ud3ec\uc778\ud2b8\ubd80\ud130 \ube14\ub85d\uc744 \uc7ac\uc0dd\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. TrieTimeout \uc7ac\uc0dd \uc2dc\uac04 \uc740 config.toml \uc758 \uad6c\uc131\uc5d0 \ub530\ub77c \ub2e4\ub985\ub2c8\ub2e4. \ub178\ub4dc\uac00 \uac00\ubcbc\uc6b4 \uc2a4\ud1a0\ub9ac\uc9c0\ub97c \uc720\uc9c0\ud560 \uc218 \uc788\ub3c4\ub85d \uae34 \uc7ac\uc0dd \uc2dc\uac04\uc744 \uacac\ub51c \uc218 \uc788\ub2e4\uba74 \uc62c\ub9ac\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. Geth \uc5c5\uadf8\ub808\uc774\ub4dc \uc774 \uac00\uc774\ub4dc \ub97c \uc77d\uc73c\uc2ed\uc2dc\uc624","title":"\ub178\ub4dc"},{"location":"biznet/develop/running_node/node/#_1","text":"","title":"\ub178\ub4dc\ub97c \uc6b4\uc601\ud558\ub294 \ubc29\ubc95"},{"location":"biznet/develop/running_node/node/#_2","text":"\uc804\uccb4 \ube14\ub85d\uccb4\uc778 \uae30\ub85d\uc744 \ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\ud558\uace0 \ub124\ud2b8\uc6cc\ud06c\uc758 \ub370\uc774\ud130 \uc694\uccad\uc5d0 \uc751\ub2f5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8 \ube14\ub85d \ubc0f \ud2b8\ub79c\uc7ad\uc158\uc744 \uc218\uc2e0\ud558\uace0 \uc720\ud6a8\uc131\uc744 \uac80\uc0ac\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \uacc4\uc815\uc758 \uc0c1\ud0dc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.","title":"\ub178\ub4dc\uc758 \uae30\ub2a5\ub4e4"},{"location":"biznet/develop/running_node/node/#_3","text":"Mac OS X \uc640 Linux \uc5d0\uc11c \ub178\ub4dc \uc2e4\ud589\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4.","title":"\uc9c0\uc6d0\ub418\ub294 \ud50c\ub7ab\ud3fc"},{"location":"biznet/develop/running_node/node/#_4","text":"","title":"\uc81c\uc548\ub41c \uc694\uad6c \uc0ac\ud56d"},{"location":"biznet/develop/running_node/node/#_5","text":"\ucd5c\uc2e0 \ubc84\uc804\uc758 Mac OS X \ub610\ub294 Linux\ub97c \uc2e4\ud589\ud558\ub294 VPS. \uc911\uc694 2T GB\uc758 \uc5ec\uc720 \ub514\uc2a4\ud06c \uacf5\uac04, \uc194\ub9ac\ub4dc \uc2a4\ud14c\uc774\ud2b8 \ub4dc\ub77c\uc774\ube0c(SSD), gp3, 8k IOPS, 250MB/S \ucc98\ub9ac\ub7c9, \uc77d\uae30 \uc9c0\uc5f0 \uc2dc\uac04 <1ms. (\uc2a4\ub0c5/\ube60\ub978 \ub3d9\uae30\ud654\ub85c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0 NVMe SSD\uac00 \ud544\uc694\ud569\ub2c8\ub2e4) 16\ucf54\uc5b4 CPU\uc640 64GB \uba54\ubaa8\ub9ac(RAM). AWS\uc5d0\uc11c\ub294 m5zn.3xlarge \uc778\uc2a4\ud134\uc2a4 \uc720\ud615, Google \ud074\ub77c\uc6b0\ub4dc\uc5d0\uc11c\ub294 c2-standard-16\uc744 \uc81c\uc548\ud569\ub2c8\ub2e4. \uc5c5\ub85c\ub4dc/\ub2e4\uc6b4\ub85c\ub4dc \uc18d\ub3c4\uac00 \ucd08\ub2f9 5MB\uc778 \uad11\ub300\uc5ed \uc778\ud130\ub137 \uc5f0\uacb0","title":"\ub178\ub4dc"},{"location":"biznet/develop/running_node/node/#_6","text":"","title":"\uc124\uc815"},{"location":"biznet/develop/running_node/node/#_7","text":"\uac00\ub054 \ub3d9\uae30\ud654\uac00 \uc548\ub420 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. geth \ub97c \uac80\uc0c9 \ud504\ub85c\ud1a0\ucf5c \uc5c6\uc774 \uc2dc\uc791 \ud588\uc73c\uba70 --nodiscover \ub9e4\uac1c\ubcc0\uc218\ub97c False \ub85c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uace0\uc815 \ub178\ub4dc\ub85c \uc804\uccb4 \ub178\ub4dc\ub97c \uc2e4\ud589\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc694. BootstrapNodes \ub97c \uc5c5\ub370\uc774\ud2b8 BootstrapNodes = [\"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\",\"enode://4c76a1996466b69bd6dc6dd9566aff175cb8aadc846241d100378bdb1d9a4ea47196d9f660d308954ed8a2c725c4f6f4616e9cf108abb5efd766ad9bc7c9af35@3.39.127.36:30303\"] Static nodes \ub97c \ucd94\uac00 Geth\ub294 \ub610\ud55c \ud56d\uc0c1 \uc5f0\uacb0\ud558\uace0 \uc2f6\uc740 \ud2b9\uc815 \ud53c\uc5b4\uac00 \uc788\ub294 \uacbd\uc6b0 \uc815\uc801 \ub178\ub4dc\ub77c\ub294 \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uace0\uc815 \ub178\ub4dc\ub294 \uc5f0\uacb0\uc774 \ub04a\uae38 \ub54c \ub2e4\uc2dc \uc5f0\uacb0\ub429\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc6a9\uc744 \ud30c\uc77c\uc5d0 <datadir>/geth/static-nodes.json \uc544\ub798 \ub0b4\uc6a9\uc744 \ub123\uc5b4 \uc601\uad6c \uc815\uc801 \ub178\ub4dc\ub97c \uad6c\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 [ \"enode://pubkey@ip:port\", \"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\", \"enode://844a0cbe8a98fbfc2d80c20539148c4c0862fa06e3e9580bd53ce05c7f26ac4a5cb78369adcb7ac146062273cb437a6e4dd1022cf5a42e31409e279741494a11@54.255.235.26:30303\", \"enode://5ef7a9487b4944f0eaca0ffbd36839de9cf36d871104d4ebc788d75ccf5418e3103bb73791cfc8942b80dba33aad7daa6aed709ba4ee1efa26564f7af523f9c5@54.169.187.148:30303\", \"enode://ce91817b76993736a1c01ab419597528a4084ab57928c60e43741d13d78f941396895d33a3b8ab9286cd403f8520a873af0c692151905b51b7ea7370d832d3bc@18.136.209.89:30303\", \"enode://a578d5c7c87dc293d3fa9f9176f27049dc6e5e259914202b52a15ad52b2529fd375b62e055097ff520a7f93a876d1fcbca5ef0b32dab273e474db907f33d97b3@13.215.191.60:30303\", \"enode://4c76a1996466b69bd6dc6dd9566aff175cb8aadc846241d100378bdb1d9a4ea47196d9f660d308954ed8a2c725c4f6f4616e9cf108abb5efd766ad9bc7c9af35@3.39.127.36:30303\", \"enode://9b086682cfd01ac2223700676d718eb5a7945c6200ca113d0555c4aebec3ee19a6161a88fbee50662254976d9a97c4c5b7e50f55bfbf7ed598cd8c5c078dbd7d@54.180.121.94:30303\", \"enode://b39fd722a26cf48c6b055b0eed5b49c98d420d546d3419ff6a2499ddd190aa5a4e7371343d63a0150e7695bb42387b3d6837f99a49db8f05d78fc775689e2210@15.164.170.19:30303\", \"enode://c08fdd44bc3e09267321a99c6057ec870d5bcb1e3b5ecf7ef48158881abc99d1cca2174328e80917003c1ee27908792badc148a80dc3bdee365c748fcd046723@54.180.93.83:30303\" ] admin.addPeer() \ub97c \uc0ac\uc6a9\ud558\uc5ec js \ucf58\uc194\uc744 \ud1b5\ud574 \ub7f0\ud0c0\uc784\uc5d0 \uc815\uc801 \ub178\ub4dc\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. admin.addPeer( \"enode://b072533c8d72501816f1bc07e12f4703778697abfef305800c3ee178b63439e537c4570b5b4b491582e901cb176616826ed071539cbbf26fe46ee8571992293a@13.228.4.203:30303\" ) Trusted nodes \ub97c \ucd94\uac00 Geth\ub294 \ud53c\uc5b4 \uc81c\ud55c\uc5d0 \ub3c4\ub2ec\ud55c \uacbd\uc6b0\uc5d0\ub3c4 \ud56d\uc0c1 \ub2e4\uc2dc \uc5f0\uacb0\ud560 \uc218 \uc788\ub294 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ub178\ub4dc\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uad6c\uc131 \ud30c\uc77c\uc744 \ud1b5\ud574 \uc601\uad6c\uc801\uc73c\ub85c \ucd94\uac00\ud558\uac70\ub098 RPC \ud638\ucd9c\uc744 \ud1b5\ud574 \uc784\uc2dc\ub85c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uad6c\uc131\ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. /geth/trusted-nodes.json","title":"\uc5f0\uacb0\uacfc \uad00\ub828\ub41c \uc77c\ubc18\uc801\uc778 \ubb38\uc81c"},{"location":"biznet/develop/running_node/node/#_8","text":"\ube60\ub978 \ub3d9\uae30\ud654 \uae30\ubcf8 \ub3d9\uae30\ud654 \ubaa8\ub4dc\uc785\ub2c8\ub2e4 . \uc804\uccb4 \uc0c1\ud0dc \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 \ud5e4\ub354\ub97c \uba3c\uc800 \uc694\uccad\ud558\uace0 \ub098\uc911\uc5d0 \ube14\ub85d \ubcf8\ubb38\uacfc \uc601\uc218\uc99d\uc744 \uc791\uc131\ud558\uc5ec \ube60\ub978 \ub3d9\uae30\ud654\ub97c \uc218\ud589\ud558\ub294 \ub178\ub4dc\ub97c \ub3d9\uae30\ud654\ud569\ub2c8\ub2e4. \ube60\ub978 \ub3d9\uae30\ud654\uac00 BizNet \ub124\ud2b8\uc6cc\ud06c\uc758 \ucd5c\uc0c1\uc758 \ube14\ub85d\uc5d0 \ub3c4\ub2ec\ud558\uba74 \uc804\uccb4 \ub3d9\uae30\ud654 \ubaa8\ub4dc\ub85c \uc804\ud658\ub429\ub2c8\ub2e4. \uc804\uccb4 \ub3d9\uae30\ud654 \uc81c\ub124\uc2dc\uc2a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \ubaa8\ub4e0 \ube14\ub85d\uc744 \ud655\uc778\ud558\uace0 \ubaa8\ub4e0 \ud2b8\ub79c\uc7ad\uc158\uc744 \uc2e4\ud589\ud558\ub294 \ub178\ub4dc\ub97c \ub3d9\uae30\ud654\ud569\ub2c8\ub2e4. \uc774 \ubaa8\ub4dc\ub294 \ube60\ub978 \ub3d9\uae30\ud654 \ubaa8\ub4dc\ubcf4\ub2e4 \uc57d\uac04 \ub290\ub9ac\uc9c0\ub9cc \ubcf4\uc548\uc774 \uac15\ud654\ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"\ub3d9\uae30\ud654 \ubaa8\ub4dc"},{"location":"biznet/develop/running_node/node/#_9","text":"","title":"\ub178\ub4dc\ub97c \uc2e4\ud589\ud558\ub294 \ub2e8\uacc4"},{"location":"biznet/develop/running_node/node/#_10","text":"\uc900\ube44 \uc911\uc785\ub2c8\ub2e4.","title":"\uc2a4\ub0c5\uc0f7\uc5d0\uc11c \ub3d9\uae30\ud654"},{"location":"biznet/develop/running_node/node/#_11","text":"\uc18c\uc2a4 \ucf54\ub4dc\ub85c \ube4c\ub4dc Go 1.13+ \ub97c \uc124\uce58\ud558\uace0, PATH \uc5d0 GOPATH \ub97c \ucd94\uac00\ud588\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624 git clone https://github.com/bosagora/go-ethereum # Enter the folder go-ethereum was cloned into cd go-ethereum # Compile and install go-ethereum make geth \ub610\ub294 \ub9b4\ub9ac\uc2a4 \ud398\uc774\uc9c0 \uc5d0\uc11c \uc774\ubbf8 \ube4c\ub4dc\ub41c \ubc14\uc774\ub108\ub9ac\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ud558\uac70\ub098 \uc544\ub798 \uc9c0\uce68\uc744 \ub530\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4. # Linux wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep linux |cut -d\\\" -f4) unzip linux.zip # MacOS wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep mac |cut -d\\\" -f4) unzip mac.zip \uad6c\uc131 \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc \ub2e4\uc6b4\ub85c\ub4dc genesis.json \ubc0f config.toml : ## mainet wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep mainnet |cut -d\\\" -f4) unzip mainnet.zip ## testnet wget $(curl -s https://api.github.com/repos/bosagora/go-ethereum/releases/latest |grep browser_ |grep testnet |cut -d\\\" -f4) unzip testnet.zip \ub85c\uceec\uc5d0\uc11c \uc81c\ub124\uc2dc\uc2a4 \uc0c1\ud0dc \uc0dd\uc131\ud558\uae30 geth --datadir node init genesis.json \ub2e4\uc74c \ucd9c\ub825\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. INFO [05-19|14:53:17.468] Allocated cache and file handles database=/Users/michael/Downloads/go-ethereum/node/geth/chaindata cache=16.00MiB handles=16 INFO [05-19|14:53:17.498] Writing custom genesis block INFO [05-19|14:53:17.501] Persisted trie from memory database nodes=21 size=56.84KiB time=357.915\u00b5s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=-574.00B INFO [05-19|14:53:17.502] Successfully wrote genesis state database=chaindata hash=7d79cc\u2026fb0d1e INFO [05-19|14:53:17.503] Allocated cache and file handles database=/Users/michael/Downloads/go-ethereum/node/geth/lightchaindata cache=16.00MiB handles=16 INFO [05-19|14:53:17.524] Writing custom genesis block INFO [05-19|14:53:17.525] Persisted trie from memory database nodes=21 size=56.84KiB time=638.396\u00b5s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=-574.00B INFO [05-19|14:53:17.528] Successfully wrote genesis state database=lightchaindata hash=7d79cc\u2026fb0d1e \ub178\ub4dc \uc2dc\uc791 ## start a node geth --config ./config.toml --datadir ./node","title":"\uc81c\ub124\uc2dc\uc2a4 \ube14\ub85d\uc5d0\uc11c \ub3d9\uae30\ud654"},{"location":"biznet/develop/running_node/node/#_12","text":"","title":"\ub178\ub4dc \uc720\uc9c0 \uad00\ub9ac"},{"location":"biznet/develop/running_node/node/#_13","text":"\ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ucd5c\uc2e0 \ub9b4\ub9ac\uc2a4\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \ucd5c\uc2e0 \ubc84\uc804 \uc740 \ub354 \uc548\uc815\uc801\uc774\uace0 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"\ubc14\uc774\ub108\ub9ac"},{"location":"biznet/develop/running_node/node/#_14","text":"\ud14c\uc2a4\ud2b8\uc5d0 \ub530\ub974\uba74 \uc2a4\ud1a0\ub9ac\uc9c0 \ud06c\uae30\uac00 1.5T\ub97c \ucd08\uacfc\ud558\uba74 \ub178\ub4dc\uc758 \uc131\ub2a5\uc774 \uc800\ud558\ub429\ub2c8\ub2e4. \ub178\ub4dc\ub294 \ud56d\uc0c1 \uc2a4\ud1a0\ub9ac\uc9c0\ub97c \uc815\ub9ac\ud558\uc5ec \uac00\ubcbc\uc6b4 \uc2a4\ud1a0\ub9ac\uc9c0\ub97c \uc720\uc9c0\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc2a4\ud1a0\ub9ac\uc9c0 \uc815\ub9ac \ubc29\ubc95: \ub178\ub4dc\ub97c \uc911\uc9c0\ud569\ub2c8\ub2e4. \uc2e4\ud589 nohup geth snapshot prune-state --datadir {the data dir of your node} & . \uc644\ub8cc\ud558\ub294 \ub370 3-5\uc2dc\uac04\uc774 \uac78\ub9bd\ub2c8\ub2e4. \uc644\ub8cc\ub418\uba74 \ub178\ub4dc\ub97c \uc2dc\uc791\ud558\uc2ed\uc2dc\uc624. \uc720\uc9c0 \uad00\ub9ac\uc790\ub294 \ud56d\uc0c1 \uba87 \uac1c\uc758 \ubc31\uc5c5 \ub178\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud558\ub4dc\uc6e8\uc5b4\ub3c4 \uc911\uc694 \ud558\ubbc0\ub85c SSD\uac00 2T GB\uc758 \uc5ec\uc720 \ub514\uc2a4\ud06c \uacf5\uac04, \uc194\ub9ac\ub4dc \uc2a4\ud14c\uc774\ud2b8 \ub4dc\ub77c\uc774\ube0c(SSD), gp3, 8k IOPS, 250MB/S \ucc98\ub9ac\ub7c9, \uc77d\uae30 \uc9c0\uc5f0 \uc2dc\uac04 <1ms\ub97c \ucda9\uc871\ud558\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624 .","title":"\uc2a4\ud1a0\ub9ac\uc9c0"},{"location":"biznet/develop/running_node/node/#_15","text":"\ub178\ub4dc\uac00 \ucda9\ub3cc\ud558\uac70\ub098 \uac15\uc81c \uc885\ub8cc\ub418\uba74 \ub178\ub4dc\ub294 \uba87 \ubd84 \ub610\ub294 \uba87 \uc2dc\uac04 \uc804\uc758 \ube14\ub85d\uc5d0\uc11c \ub3d9\uae30\ud654\ub429\ub2c8\ub2e4. \uc774\ub294 \uba54\ubaa8\ub9ac\uc758 \uc0c1\ud0dc\uac00 \uc2e4\uc2dc\uac04\uc73c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc720\uc9c0\ub418\uc9c0 \uc54a\uace0 \ub178\ub4dc\uac00 \uc2dc\uc791\ub418\uba74 \ub9c8\uc9c0\ub9c9 \uccb4\ud06c\ud3ec\uc778\ud2b8\ubd80\ud130 \ube14\ub85d\uc744 \uc7ac\uc0dd\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. TrieTimeout \uc7ac\uc0dd \uc2dc\uac04 \uc740 config.toml \uc758 \uad6c\uc131\uc5d0 \ub530\ub77c \ub2e4\ub985\ub2c8\ub2e4. \ub178\ub4dc\uac00 \uac00\ubcbc\uc6b4 \uc2a4\ud1a0\ub9ac\uc9c0\ub97c \uc720\uc9c0\ud560 \uc218 \uc788\ub3c4\ub85d \uae34 \uc7ac\uc0dd \uc2dc\uac04\uc744 \uacac\ub51c \uc218 \uc788\ub2e4\uba74 \uc62c\ub9ac\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.","title":"\uac00\ubcbc\uc6b4 \uc2a4\ud1a0\ub9ac\uc9c0"},{"location":"biznet/develop/running_node/node/#geth","text":"\uc774 \uac00\uc774\ub4dc \ub97c \uc77d\uc73c\uc2ed\uc2dc\uc624","title":"Geth \uc5c5\uadf8\ub808\uc774\ub4dc"},{"location":"biznet/develop/running_node/upgrading/","text":"Geth \uc5c5\uadf8\ub808\uc774\ub4dc \ubc29\ubc95 geth \ub97c \uc5c5\ub370\uc774\ud2b8\ud558\uae30 \uc704\ud574 \uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc740 \ucd5c\uc2e0\ubc84\uc804\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. geth \uc758 \ucd5c\uc2e0 \ubc84\uc804\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uc5ec \uc124\uce58\ud558\uace0 geth\ub178\ub4dc\ub97c \uc885\ub8cc\ud558\uace0 \uc0c8 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub85c \ub2e4\uc2dc \uc2dc\uc791\ud558\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. Geth\ub294 \uc790\ub3d9\uc73c\ub85c \uc774\uc804 \ub178\ub4dc\uc758 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uace0 \uc774\uc804 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \uc885\ub8cc\ud55c \ud6c4 \ucc44\uad74\ub41c \ucd5c\uc2e0 \ube14\ub85d\uc744 \ub3d9\uae30\ud654\ud569\ub2c8\ub2e4. 1\ub2e8\uacc4: \uc0c8 \ubc84\uc804 \ucef4\ud30c\uc77c git clone https://github.com/bosagora/go-ethereum # Enter the folder go-ethereum was cloned into cd go-ethereum # Comile and install go-ethereum make geth 2\ub2e8\uacc4: Geth \uc911\uc9c0 $ pid=`ps -ef | grep geth | grep -v grep | awk '{print $2}'` $ kill $pid 3\ub2e8\uacc4: \ub2e4\uc2dc \uc2dc\uc791 ## start a node geth --config ./config.toml --datadir ./node --syncmode snap","title":"\uc5c5\uadf8\ub808\uc774\ub4dc"},{"location":"biznet/develop/running_node/upgrading/#geth","text":"geth \ub97c \uc5c5\ub370\uc774\ud2b8\ud558\uae30 \uc704\ud574 \uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc740 \ucd5c\uc2e0\ubc84\uc804\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. geth \uc758 \ucd5c\uc2e0 \ubc84\uc804\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uc5ec \uc124\uce58\ud558\uace0 geth\ub178\ub4dc\ub97c \uc885\ub8cc\ud558\uace0 \uc0c8 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub85c \ub2e4\uc2dc \uc2dc\uc791\ud558\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. Geth\ub294 \uc790\ub3d9\uc73c\ub85c \uc774\uc804 \ub178\ub4dc\uc758 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uace0 \uc774\uc804 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \uc885\ub8cc\ud55c \ud6c4 \ucc44\uad74\ub41c \ucd5c\uc2e0 \ube14\ub85d\uc744 \ub3d9\uae30\ud654\ud569\ub2c8\ub2e4.","title":"Geth \uc5c5\uadf8\ub808\uc774\ub4dc \ubc29\ubc95"},{"location":"biznet/develop/running_node/upgrading/#1","text":"git clone https://github.com/bosagora/go-ethereum # Enter the folder go-ethereum was cloned into cd go-ethereum # Comile and install go-ethereum make geth","title":"1\ub2e8\uacc4: \uc0c8 \ubc84\uc804 \ucef4\ud30c\uc77c"},{"location":"biznet/develop/running_node/upgrading/#2-geth","text":"$ pid=`ps -ef | grep geth | grep -v grep | awk '{print $2}'` $ kill $pid","title":"2\ub2e8\uacc4: Geth \uc911\uc9c0"},{"location":"biznet/develop/running_node/upgrading/#3","text":"## start a node geth --config ./config.toml --datadir ./node --syncmode snap","title":"3\ub2e8\uacc4: \ub2e4\uc2dc \uc2dc\uc791"},{"location":"biznet/develop/token/intoroduction/","text":"ERC20 Token Introduction A ERC20 token must implement the interface IERC20 in IERC20.sol . This is a template contract ERC20Token.template . Users just need to fill in _name , _symbol , _decimals and _totalSupply according to their own requirements: constructor() public { _name = {{TOKEN_NAME}}; _symbol = {{TOKEN_SYMBOL}}; _decimals = {{DECIMALS}}; _totalSupply = {{TOTAL_SUPPLY}}; _balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); } Then users can use Remix IDE and Metamask to compile and deploy the ERC20 contract to BSC. Interact with Contract with Web3 and NodeJS. Connect to BizNet's public RPC endpoint const Web3 = require('web3'); // mainnet const web3 = new Web3('https://mainnet.bosagora.org'); // testnet const web3 = new Web3('https://testnet.bosagora.org'); Create a Wallet web3.eth.accounts.create([entropy]); Output: web3.eth.accounts.create(); { address: '0x926605D0729a968266f1BB299d8Df0471C4F5367', privateKey: '0x6b4618539d95f205f33e916e89404b301dde545c0c4acc181fd0c0b42708bad3', signTransaction: [Function: signTransaction], sign: [Function: sign], encrypt: [Function: encrypt] } Recover a Wallet const account = web3.eth.accounts.privateKeyToAccount(\"0xe500f5754d761d74c3eb6c2566f4c568b81379bf5ce9c1ecd475d40efe23c577\") Check Balance web3.eth.getBalance(holder).then(console.log); Output: The balance will be bumped by e18 for BOA. 6249621999900000000 Create Transaction Parameters Object - The transaction object to send: from - String|Number: The address for the sending account. Uses the web3.eth.defaultAccount property, if not specified. Or an address or index of a local wallet in web3.eth.accounts.wallet. to - String: (optional) The destination address of the message, left undefined for a contract-creation transaction. value - Number|String|BN|BigNumber: (optional) The value transferred for the transaction in wei, also the endowment if it\u2019s a contract-creation transaction. gas - Number: (optional, default: To-Be-Determined) The amount of gas to use for the transaction (unused gas is refunded). gasPrice - Number|String|BN|BigNumber: (optional) The price of gas for this transaction in wei, defaults to web3.eth.gasPrice. data - String: (optional) Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code. nonce - Number: (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. // // Make a transaction using the promise web3.eth.sendTransaction({ from: holder, to: '0x0B75fbeB0BC7CC0e9F9880f78a245046eCBDBB0D', value: '1000000000000000000', gas: 5000000, gasPrice: 18e9, }, function(err, transactionHash) { if (err) { console.log(err); } else { console.log(transactionHash); } });","title":"Introduction"},{"location":"biznet/develop/token/intoroduction/#erc20-token-introduction","text":"A ERC20 token must implement the interface IERC20 in IERC20.sol . This is a template contract ERC20Token.template . Users just need to fill in _name , _symbol , _decimals and _totalSupply according to their own requirements: constructor() public { _name = {{TOKEN_NAME}}; _symbol = {{TOKEN_SYMBOL}}; _decimals = {{DECIMALS}}; _totalSupply = {{TOTAL_SUPPLY}}; _balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); } Then users can use Remix IDE and Metamask to compile and deploy the ERC20 contract to BSC.","title":"ERC20 Token Introduction"},{"location":"biznet/develop/token/intoroduction/#interact-with-contract-with-web3-and-nodejs","text":"","title":"Interact with Contract with Web3 and NodeJS."},{"location":"biznet/develop/token/intoroduction/#connect-to-biznets-public-rpc-endpoint","text":"const Web3 = require('web3'); // mainnet const web3 = new Web3('https://mainnet.bosagora.org'); // testnet const web3 = new Web3('https://testnet.bosagora.org');","title":"Connect to BizNet's public RPC endpoint"},{"location":"biznet/develop/token/intoroduction/#create-a-wallet","text":"web3.eth.accounts.create([entropy]); Output: web3.eth.accounts.create(); { address: '0x926605D0729a968266f1BB299d8Df0471C4F5367', privateKey: '0x6b4618539d95f205f33e916e89404b301dde545c0c4acc181fd0c0b42708bad3', signTransaction: [Function: signTransaction], sign: [Function: sign], encrypt: [Function: encrypt] }","title":"Create a Wallet"},{"location":"biznet/develop/token/intoroduction/#recover-a-wallet","text":"const account = web3.eth.accounts.privateKeyToAccount(\"0xe500f5754d761d74c3eb6c2566f4c568b81379bf5ce9c1ecd475d40efe23c577\")","title":"Recover a Wallet"},{"location":"biznet/develop/token/intoroduction/#check-balance","text":"web3.eth.getBalance(holder).then(console.log); Output: The balance will be bumped by e18 for BOA. 6249621999900000000","title":"Check Balance"},{"location":"biznet/develop/token/intoroduction/#create-transaction","text":"Parameters Object - The transaction object to send: from - String|Number: The address for the sending account. Uses the web3.eth.defaultAccount property, if not specified. Or an address or index of a local wallet in web3.eth.accounts.wallet. to - String: (optional) The destination address of the message, left undefined for a contract-creation transaction. value - Number|String|BN|BigNumber: (optional) The value transferred for the transaction in wei, also the endowment if it\u2019s a contract-creation transaction. gas - Number: (optional, default: To-Be-Determined) The amount of gas to use for the transaction (unused gas is refunded). gasPrice - Number|String|BN|BigNumber: (optional) The price of gas for this transaction in wei, defaults to web3.eth.gasPrice. data - String: (optional) Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code. nonce - Number: (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. // // Make a transaction using the promise web3.eth.sendTransaction({ from: holder, to: '0x0B75fbeB0BC7CC0e9F9880f78a245046eCBDBB0D', value: '1000000000000000000', gas: 5000000, gasPrice: 18e9, }, function(err, transactionHash) { if (err) { console.log(err); } else { console.log(transactionHash); } });","title":"Create Transaction"},{"location":"biznet/develop/token/issue/","text":"Issue ERC20 Tokens Compile and Deploy ERC20 Contract Open Remix IDE: https://remix.ethereum.org Select solidity language Create new contract ERC20Token.sol and copy contract code from the ERC20 token template here Modify \u201cname\u201d, \u201csymbol\u201d, \u201cdecimals\u201d and \u201ctotalSupply\u201d according to your requirements. Compile the ERC20 token contract a. Step1: Click button to switch to compile page b. Step2: Select \u201cERC20Token\u201d contract c. Step3: Enable \u201cAuto compile\u201d and \u201coptimization\u201d d. Step4: Click \u201cABI\u201d to copy the contract abi and save it. Deploy the contract to BizNet a. Step1: Click button to switch to compile button. b. Step2: Select \u201cInjected Web3\u201d c. Step3: Select \u201cERC20Token\u201d d. Step4: Client \u201cDeploy\u201d button and Metamask will pop up e. Client \u201cconfirm\u201d button to sign and broadcast transaction to BizNet.","title":"Issue Token"},{"location":"biznet/develop/token/issue/#issue-erc20-tokens","text":"","title":"Issue ERC20 Tokens"},{"location":"biznet/develop/token/issue/#compile-and-deploy-erc20-contract","text":"Open Remix IDE: https://remix.ethereum.org Select solidity language Create new contract ERC20Token.sol and copy contract code from the ERC20 token template here Modify \u201cname\u201d, \u201csymbol\u201d, \u201cdecimals\u201d and \u201ctotalSupply\u201d according to your requirements. Compile the ERC20 token contract a. Step1: Click button to switch to compile page b. Step2: Select \u201cERC20Token\u201d contract c. Step3: Enable \u201cAuto compile\u201d and \u201coptimization\u201d d. Step4: Click \u201cABI\u201d to copy the contract abi and save it. Deploy the contract to BizNet a. Step1: Click button to switch to compile button. b. Step2: Select \u201cInjected Web3\u201d c. Step3: Select \u201cERC20Token\u201d d. Step4: Client \u201cDeploy\u201d button and Metamask will pop up e. Client \u201cconfirm\u201d button to sign and broadcast transaction to BizNet.","title":"Compile and Deploy ERC20 Contract"},{"location":"biznet/wallet/guide/","text":"Wallet Guide What is a Wallet? A crypto wallet is a device or program used for transfer and storage of cryptocurrency. Crypto wallets can be of different types, such as paper wallets, hardware wallets, and software wallets. There are also several smartphone mobile apps and computer programs that provide a user-friendly way to create and manage wallets. Along with crytocurreny, crypto wallets store a collection of crypto keys that are used for sending, receiving, and taracking ownership of cryptocurrencies. A keypair is a cryptographically-derived securely generated private and public keys. A private key and its corresponding public key are together known as a keypair. A wallet contains a collection of one or more keypairs and provides some means to interact with them. The security of any crypto wallet depends upon how the private key is stored. The public key is known as the wallet's receiving address or simply its address. The wallet address may be shared and displayed freely. When another party is going to send some amount of cryptocurrency to a wallet, they need to know the wallet's receiving address. Depending on a blockchain's implementation, the address can also be used to view certain information about a wallet, such as viewing the balance, but has no ability to change anything about the wallet or withdraw any tokens. In order to send cryptocurrencies to another address or to make any changes to the wallet, the private key is used for digitally signing the transactions. It is important to note that the private key must never be shared and should always be kept securely. If by any means access is gained to the private key attached to a wallet, the attacker can withdraw all the tokens contained. Furthermore, if the private key for a wallet is lost, any tokens that have been sent to or stored in that wallet's address are permanently lost. Different wallet solutions offer different approaches to keypair security, interacting with the keypair, and signing transactions to use/spend the tokens. Some are easier to use than others. Some store and back up private keys more securely. BizNet supports several wallets, giving its users the right to choose the right wallet for their required security and convenience. If you want to be able to receive BOA and other supported tokens on the BizNet blockchain, you will first need to create a wallet and configure key management . Supported Wallets List of Wallets Supporting BizNet Number Wallet Name Website 1 MetaMask https://metamask.zendesk.com/hc/en-us","title":"\uac00\uc774\ub4dc"},{"location":"biznet/wallet/guide/#wallet-guide","text":"","title":"Wallet Guide"},{"location":"biznet/wallet/guide/#what-is-a-wallet","text":"A crypto wallet is a device or program used for transfer and storage of cryptocurrency. Crypto wallets can be of different types, such as paper wallets, hardware wallets, and software wallets. There are also several smartphone mobile apps and computer programs that provide a user-friendly way to create and manage wallets. Along with crytocurreny, crypto wallets store a collection of crypto keys that are used for sending, receiving, and taracking ownership of cryptocurrencies. A keypair is a cryptographically-derived securely generated private and public keys. A private key and its corresponding public key are together known as a keypair. A wallet contains a collection of one or more keypairs and provides some means to interact with them. The security of any crypto wallet depends upon how the private key is stored. The public key is known as the wallet's receiving address or simply its address. The wallet address may be shared and displayed freely. When another party is going to send some amount of cryptocurrency to a wallet, they need to know the wallet's receiving address. Depending on a blockchain's implementation, the address can also be used to view certain information about a wallet, such as viewing the balance, but has no ability to change anything about the wallet or withdraw any tokens. In order to send cryptocurrencies to another address or to make any changes to the wallet, the private key is used for digitally signing the transactions. It is important to note that the private key must never be shared and should always be kept securely. If by any means access is gained to the private key attached to a wallet, the attacker can withdraw all the tokens contained. Furthermore, if the private key for a wallet is lost, any tokens that have been sent to or stored in that wallet's address are permanently lost. Different wallet solutions offer different approaches to keypair security, interacting with the keypair, and signing transactions to use/spend the tokens. Some are easier to use than others. Some store and back up private keys more securely. BizNet supports several wallets, giving its users the right to choose the right wallet for their required security and convenience. If you want to be able to receive BOA and other supported tokens on the BizNet blockchain, you will first need to create a wallet and configure key management .","title":"What is a Wallet?"},{"location":"biznet/wallet/guide/#supported-wallets","text":"List of Wallets Supporting BizNet Number Wallet Name Website 1 MetaMask https://metamask.zendesk.com/hc/en-us","title":"Supported Wallets"},{"location":"biznet/wallet/key-management/","text":"Key Management This article is a guide about key management strategy on client side of your Decentralised Application on BizNet Setup Web3 web3.js is a javascript library that allows our client-side application to talk to the blockchain. We configure web3 to communicate via Metamask. web3.js doc is here Connect to BizNet network // mainnet const web3 = new Web3('https://mainnet.bosagora.org'); // testnet const web3 = new Web3('https://testnet.bosagora.org'); Set up account If the installation and instantiation of web3 was successful, the following should successfully return a random account: const account = web3.eth.accounts.create(); Recover account If you have backup the private key of your account, you can use it to restore your account. const account = web3.eth.accounts.privateKeyToAccount(\"$private-key\") Full Example const Web3 = require('web3'); async function main() { const web3 = new Web3('https://mainnet.bosagora.org:443'); const loader = setupLoader({ provider: web3 }).web3; const account = web3.eth.accounts.create(); console.log(account); }","title":"\ud0a4\uad00\ub9ac"},{"location":"biznet/wallet/key-management/#key-management","text":"This article is a guide about key management strategy on client side of your Decentralised Application on BizNet","title":"Key Management"},{"location":"biznet/wallet/key-management/#setup-web3","text":"web3.js is a javascript library that allows our client-side application to talk to the blockchain. We configure web3 to communicate via Metamask. web3.js doc is here","title":"Setup Web3"},{"location":"biznet/wallet/key-management/#connect-to-biznet-network","text":"// mainnet const web3 = new Web3('https://mainnet.bosagora.org'); // testnet const web3 = new Web3('https://testnet.bosagora.org');","title":"Connect to BizNet network"},{"location":"biznet/wallet/key-management/#set-up-account","text":"If the installation and instantiation of web3 was successful, the following should successfully return a random account: const account = web3.eth.accounts.create();","title":"Set up account"},{"location":"biznet/wallet/key-management/#recover-account","text":"If you have backup the private key of your account, you can use it to restore your account. const account = web3.eth.accounts.privateKeyToAccount(\"$private-key\")","title":"Recover account"},{"location":"biznet/wallet/key-management/#full-example","text":"const Web3 = require('web3'); async function main() { const web3 = new Web3('https://mainnet.bosagora.org:443'); const loader = setupLoader({ provider: web3 }).web3; const account = web3.eth.accounts.create(); console.log(account); }","title":"Full Example"},{"location":"biznet/wallet/tutorials/ledge_hardware_wallet/","text":"","title":"Ledge hardware wallet"},{"location":"biznet/wallet/tutorials/metamask/","text":"Use MetaMask For BizNet !!! Tip If you encounter any network configuration issues in MetaMask, please make sure you have the latest version running. What is it? MetaMask was created out of the needs of creating more secure and usable Ethereum-based web sites. In particular, it handles account management and connecting the user to the blockchain. It\u2019s supported in Chrome, Chrome, and Safari browsers. Install Example: Install MetaMask in Chrome browser Open Extension Category in Chrome: https://chrome.google.com/webstore/category/extensionsSearch for MetaMask !!! warning Note: Make sure it\u2019s offered by metamask.io Click on \u201cAdd to Chrome\u201d That\u2019s it! You have successfully installed MetaMask extension in Chrome! !!! Tip The workflow is the same for all browsers Create an account in MetaMask for BizNet Click on the \u201cCreate a wallet\u201d button Create Password of at least 8 characters Click on \u201cCreate\u201d and then write down your backup phrase. Select each phrase in order to make sure it is correct then click \u201cConfirm\u201d. Congratulations! you have creat your MetaMask account! Connect Your MetaMask With BizNet Go to setting page Add a new network Testnet RPC URLs ChainID: 0x7E3 (2019 in decimal) Symbol: BOA Block Explorer Mainnet RPC URLs ChainID: 0x867 (2151 in decimal) Symbol: BOA Block Explorer Claim some testnet token to your account. Click on your address for copy Go to faucet page: https://faucet.bosagora.org/request/boa/your-address !!! Tip Please note that you can only claim once every minute After the transfer transaction is sent, you will see an increase of your balance Transfer BOA to other BizNet address Log in to your MetaMask Click on Send button Copy the receiver\u2019s address in the box Input the amount Confirm your transaction, then click Next Click Confirm to send your transaction Wait for your transaction to be included in the new block Once your transaction is confirmed, check it on block explorer by clicking Details Click on your account to see \"Details'' Verify your transaction in Explorer: Add ERC20 Tokens Deploy an ERC20 contract at https://remix.ethereum.org/ You can create a new file or import a sample contract: https://gist.github.com/dev-bosagora/5e06fc7357604f900c2d81e0f6f0ad75 Connect your BizNet Account to Remix Select \"SampleToken\" contract and compile Deploy your compiled contract Adjust Gas Fee for your contract, then confirm your deployed contract You can see that there is a new creat contract transaction in block explorer In MetaMask, Click on \u201cImport Tokens\u201d Choose \u201cCustom Token\u201d and copy the contract address in the box Click on \u201cAdd Custom Tokens\u201d Then you can see change of your balance Create Multiple Accounts To create multiple accounts, you click on Profile icon on MetaMask and then click on Create Account You can then add an account name and click on Create. Then you can see a new account is created!","title":"\uba54\ud0c0\ub9c8\uc2a4\ud06c"},{"location":"biznet/wallet/tutorials/metamask/#use-metamask-for-biznet","text":"!!! Tip If you encounter any network configuration issues in MetaMask, please make sure you have the latest version running.","title":"Use MetaMask For BizNet"},{"location":"biznet/wallet/tutorials/metamask/#what-is-it","text":"MetaMask was created out of the needs of creating more secure and usable Ethereum-based web sites. In particular, it handles account management and connecting the user to the blockchain. It\u2019s supported in Chrome, Chrome, and Safari browsers.","title":"What is it?"},{"location":"biznet/wallet/tutorials/metamask/#install","text":"Example: Install MetaMask in Chrome browser Open Extension Category in Chrome: https://chrome.google.com/webstore/category/extensionsSearch for MetaMask !!! warning Note: Make sure it\u2019s offered by metamask.io Click on \u201cAdd to Chrome\u201d That\u2019s it! You have successfully installed MetaMask extension in Chrome! !!! Tip The workflow is the same for all browsers","title":"Install"},{"location":"biznet/wallet/tutorials/metamask/#create-an-account-in-metamask-for-biznet","text":"Click on the \u201cCreate a wallet\u201d button Create Password of at least 8 characters Click on \u201cCreate\u201d and then write down your backup phrase. Select each phrase in order to make sure it is correct then click \u201cConfirm\u201d. Congratulations! you have creat your MetaMask account!","title":"Create an account in MetaMask for BizNet"},{"location":"biznet/wallet/tutorials/metamask/#connect-your-metamask-with-biznet","text":"Go to setting page Add a new network Testnet RPC URLs ChainID: 0x7E3 (2019 in decimal) Symbol: BOA Block Explorer Mainnet RPC URLs ChainID: 0x867 (2151 in decimal) Symbol: BOA Block Explorer Claim some testnet token to your account. Click on your address for copy Go to faucet page: https://faucet.bosagora.org/request/boa/your-address !!! Tip Please note that you can only claim once every minute After the transfer transaction is sent, you will see an increase of your balance","title":"Connect Your MetaMask With BizNet"},{"location":"biznet/wallet/tutorials/metamask/#transfer-boa-to-other-biznet-address","text":"Log in to your MetaMask Click on Send button Copy the receiver\u2019s address in the box Input the amount Confirm your transaction, then click Next Click Confirm to send your transaction Wait for your transaction to be included in the new block Once your transaction is confirmed, check it on block explorer by clicking Details Click on your account to see \"Details'' Verify your transaction in Explorer:","title":"Transfer BOA to other BizNet address"},{"location":"biznet/wallet/tutorials/metamask/#add-erc20-tokens","text":"Deploy an ERC20 contract at https://remix.ethereum.org/ You can create a new file or import a sample contract: https://gist.github.com/dev-bosagora/5e06fc7357604f900c2d81e0f6f0ad75 Connect your BizNet Account to Remix Select \"SampleToken\" contract and compile Deploy your compiled contract Adjust Gas Fee for your contract, then confirm your deployed contract You can see that there is a new creat contract transaction in block explorer In MetaMask, Click on \u201cImport Tokens\u201d Choose \u201cCustom Token\u201d and copy the contract address in the box Click on \u201cAdd Custom Tokens\u201d Then you can see change of your balance","title":"Add ERC20 Tokens"},{"location":"biznet/wallet/tutorials/metamask/#create-multiple-accounts","text":"To create multiple accounts, you click on Profile icon on MetaMask and then click on Create Account You can then add an account name and click on Create. Then you can see a new account is created!","title":"Create Multiple Accounts"},{"location":"biznet/wallet/tutorials/overview/","text":"","title":"Overview"},{"location":"boa_swap/","text":"BOA Swap","title":"BOA Swap"},{"location":"boa_swap/#boa-swap","text":"","title":"BOA Swap"}]}